# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from jira_client.api_client import ApiClient


class ScreenTabsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_screen_tab(self, body, screen_id, **kwargs):  # noqa: E501
        """Create screen tab  # noqa: E501

        Creates a tab for a screen.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_screen_tab(body, screen_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ScreenableTab body: (required)
        :param int screen_id: The ID of the screen. (required)
        :return: ScreenableTab
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_screen_tab_with_http_info(body, screen_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_screen_tab_with_http_info(body, screen_id, **kwargs)  # noqa: E501
            return data

    def add_screen_tab_with_http_info(self, body, screen_id, **kwargs):  # noqa: E501
        """Create screen tab  # noqa: E501

        Creates a tab for a screen.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_screen_tab_with_http_info(body, screen_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ScreenableTab body: (required)
        :param int screen_id: The ID of the screen. (required)
        :return: ScreenableTab
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'screen_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_screen_tab" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_screen_tab`")  # noqa: E501
        # verify the required parameter 'screen_id' is set
        if ('screen_id' not in params or
                params['screen_id'] is None):
            raise ValueError("Missing the required parameter `screen_id` when calling `add_screen_tab`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'screen_id' in params:
            path_params['screenId'] = params['screen_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rest/api/3/screens/{screenId}/tabs', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ScreenableTab',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_screen_tab(self, screen_id, tab_id, **kwargs):  # noqa: E501
        """Delete screen tab  # noqa: E501

        Deletes a screen tab.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_screen_tab(screen_id, tab_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int screen_id: The ID of the screen. (required)
        :param int tab_id: The ID of the screen tab. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_screen_tab_with_http_info(screen_id, tab_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_screen_tab_with_http_info(screen_id, tab_id, **kwargs)  # noqa: E501
            return data

    def delete_screen_tab_with_http_info(self, screen_id, tab_id, **kwargs):  # noqa: E501
        """Delete screen tab  # noqa: E501

        Deletes a screen tab.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_screen_tab_with_http_info(screen_id, tab_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int screen_id: The ID of the screen. (required)
        :param int tab_id: The ID of the screen tab. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['screen_id', 'tab_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_screen_tab" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'screen_id' is set
        if ('screen_id' not in params or
                params['screen_id'] is None):
            raise ValueError("Missing the required parameter `screen_id` when calling `delete_screen_tab`")  # noqa: E501
        # verify the required parameter 'tab_id' is set
        if ('tab_id' not in params or
                params['tab_id'] is None):
            raise ValueError("Missing the required parameter `tab_id` when calling `delete_screen_tab`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'screen_id' in params:
            path_params['screenId'] = params['screen_id']  # noqa: E501
        if 'tab_id' in params:
            path_params['tabId'] = params['tab_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['OAuth2', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rest/api/3/screens/{screenId}/tabs/{tabId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_screen_tabs(self, screen_id, **kwargs):  # noqa: E501
        """Get all screen tabs  # noqa: E501

        Returns the list of tabs for a screen.  **[Permissions](#permissions) required:**   *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  *  *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) when the project key is specified, providing that the screen is associated with the project through a Screen Scheme and Issue Type Screen Scheme.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_screen_tabs(screen_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int screen_id: The ID of the screen. (required)
        :param str project_key: The key of the project.
        :return: list[ScreenableTab]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_screen_tabs_with_http_info(screen_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_screen_tabs_with_http_info(screen_id, **kwargs)  # noqa: E501
            return data

    def get_all_screen_tabs_with_http_info(self, screen_id, **kwargs):  # noqa: E501
        """Get all screen tabs  # noqa: E501

        Returns the list of tabs for a screen.  **[Permissions](#permissions) required:**   *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  *  *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) when the project key is specified, providing that the screen is associated with the project through a Screen Scheme and Issue Type Screen Scheme.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_screen_tabs_with_http_info(screen_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int screen_id: The ID of the screen. (required)
        :param str project_key: The key of the project.
        :return: list[ScreenableTab]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['screen_id', 'project_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_screen_tabs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'screen_id' is set
        if ('screen_id' not in params or
                params['screen_id'] is None):
            raise ValueError("Missing the required parameter `screen_id` when calling `get_all_screen_tabs`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'screen_id' in params:
            path_params['screenId'] = params['screen_id']  # noqa: E501

        query_params = []
        if 'project_key' in params:
            query_params.append(('projectKey', params['project_key']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rest/api/3/screens/{screenId}/tabs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ScreenableTab]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_bulk_screen_tabs(self, **kwargs):  # noqa: E501
        """Get bulk screen tabs  # noqa: E501

        Returns the list of tabs for a bulk of screens.  **[Permissions](#permissions) required:**   *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_bulk_screen_tabs(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] screen_id: The list of screen IDs. To include multiple screen IDs, provide an ampersand-separated list. For example, `screenId=10000&screenId=10001`.
        :param list[int] tab_id: The list of tab IDs. To include multiple tab IDs, provide an ampersand-separated list. For example, `tabId=10000&tabId=10001`.
        :param int start_at: The index of the first item to return in a page of results (page offset).
        :param int max_result: The maximum number of items to return per page. The maximum number is 100,
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_bulk_screen_tabs_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_bulk_screen_tabs_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_bulk_screen_tabs_with_http_info(self, **kwargs):  # noqa: E501
        """Get bulk screen tabs  # noqa: E501

        Returns the list of tabs for a bulk of screens.  **[Permissions](#permissions) required:**   *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_bulk_screen_tabs_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] screen_id: The list of screen IDs. To include multiple screen IDs, provide an ampersand-separated list. For example, `screenId=10000&screenId=10001`.
        :param list[int] tab_id: The list of tab IDs. To include multiple tab IDs, provide an ampersand-separated list. For example, `tabId=10000&tabId=10001`.
        :param int start_at: The index of the first item to return in a page of results (page offset).
        :param int max_result: The maximum number of items to return per page. The maximum number is 100,
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['screen_id', 'tab_id', 'start_at', 'max_result']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_bulk_screen_tabs" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'screen_id' in params:
            query_params.append(('screenId', params['screen_id']))  # noqa: E501
            collection_formats['screenId'] = 'multi'  # noqa: E501
        if 'tab_id' in params:
            query_params.append(('tabId', params['tab_id']))  # noqa: E501
            collection_formats['tabId'] = 'multi'  # noqa: E501
        if 'start_at' in params:
            query_params.append(('startAt', params['start_at']))  # noqa: E501
        if 'max_result' in params:
            query_params.append(('maxResult', params['max_result']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rest/api/3/screens/tabs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def move_screen_tab(self, screen_id, tab_id, pos, **kwargs):  # noqa: E501
        """Move screen tab  # noqa: E501

        Moves a screen tab.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.move_screen_tab(screen_id, tab_id, pos, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int screen_id: The ID of the screen. (required)
        :param int tab_id: The ID of the screen tab. (required)
        :param int pos: The position of tab. The base index is 0. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.move_screen_tab_with_http_info(screen_id, tab_id, pos, **kwargs)  # noqa: E501
        else:
            (data) = self.move_screen_tab_with_http_info(screen_id, tab_id, pos, **kwargs)  # noqa: E501
            return data

    def move_screen_tab_with_http_info(self, screen_id, tab_id, pos, **kwargs):  # noqa: E501
        """Move screen tab  # noqa: E501

        Moves a screen tab.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.move_screen_tab_with_http_info(screen_id, tab_id, pos, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int screen_id: The ID of the screen. (required)
        :param int tab_id: The ID of the screen tab. (required)
        :param int pos: The position of tab. The base index is 0. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['screen_id', 'tab_id', 'pos']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method move_screen_tab" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'screen_id' is set
        if ('screen_id' not in params or
                params['screen_id'] is None):
            raise ValueError("Missing the required parameter `screen_id` when calling `move_screen_tab`")  # noqa: E501
        # verify the required parameter 'tab_id' is set
        if ('tab_id' not in params or
                params['tab_id'] is None):
            raise ValueError("Missing the required parameter `tab_id` when calling `move_screen_tab`")  # noqa: E501
        # verify the required parameter 'pos' is set
        if ('pos' not in params or
                params['pos'] is None):
            raise ValueError("Missing the required parameter `pos` when calling `move_screen_tab`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'screen_id' in params:
            path_params['screenId'] = params['screen_id']  # noqa: E501
        if 'tab_id' in params:
            path_params['tabId'] = params['tab_id']  # noqa: E501
        if 'pos' in params:
            path_params['pos'] = params['pos']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rest/api/3/screens/{screenId}/tabs/{tabId}/move/{pos}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def rename_screen_tab(self, body, screen_id, tab_id, **kwargs):  # noqa: E501
        """Update screen tab  # noqa: E501

        Updates the name of a screen tab.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rename_screen_tab(body, screen_id, tab_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ScreenableTab body: (required)
        :param int screen_id: The ID of the screen. (required)
        :param int tab_id: The ID of the screen tab. (required)
        :return: ScreenableTab
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.rename_screen_tab_with_http_info(body, screen_id, tab_id, **kwargs)  # noqa: E501
        else:
            (data) = self.rename_screen_tab_with_http_info(body, screen_id, tab_id, **kwargs)  # noqa: E501
            return data

    def rename_screen_tab_with_http_info(self, body, screen_id, tab_id, **kwargs):  # noqa: E501
        """Update screen tab  # noqa: E501

        Updates the name of a screen tab.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rename_screen_tab_with_http_info(body, screen_id, tab_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ScreenableTab body: (required)
        :param int screen_id: The ID of the screen. (required)
        :param int tab_id: The ID of the screen tab. (required)
        :return: ScreenableTab
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'screen_id', 'tab_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method rename_screen_tab" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `rename_screen_tab`")  # noqa: E501
        # verify the required parameter 'screen_id' is set
        if ('screen_id' not in params or
                params['screen_id'] is None):
            raise ValueError("Missing the required parameter `screen_id` when calling `rename_screen_tab`")  # noqa: E501
        # verify the required parameter 'tab_id' is set
        if ('tab_id' not in params or
                params['tab_id'] is None):
            raise ValueError("Missing the required parameter `tab_id` when calling `rename_screen_tab`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'screen_id' in params:
            path_params['screenId'] = params['screen_id']  # noqa: E501
        if 'tab_id' in params:
            path_params['tabId'] = params['tab_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rest/api/3/screens/{screenId}/tabs/{tabId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ScreenableTab',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
