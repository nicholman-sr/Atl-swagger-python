# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from jira_client.api_client import ApiClient


class WorkflowSchemeDraftsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_workflow_scheme_draft_from_parent(self, id, **kwargs):  # noqa: E501
        """Create draft workflow scheme  # noqa: E501

        Create a draft workflow scheme from an active workflow scheme, by copying the active workflow scheme. Note that an active workflow scheme can only have one draft workflow scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_workflow_scheme_draft_from_parent(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The ID of the active workflow scheme that the draft is created from. (required)
        :return: WorkflowScheme
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_workflow_scheme_draft_from_parent_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_workflow_scheme_draft_from_parent_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def create_workflow_scheme_draft_from_parent_with_http_info(self, id, **kwargs):  # noqa: E501
        """Create draft workflow scheme  # noqa: E501

        Create a draft workflow scheme from an active workflow scheme, by copying the active workflow scheme. Note that an active workflow scheme can only have one draft workflow scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_workflow_scheme_draft_from_parent_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The ID of the active workflow scheme that the draft is created from. (required)
        :return: WorkflowScheme
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_workflow_scheme_draft_from_parent" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `create_workflow_scheme_draft_from_parent`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rest/api/3/workflowscheme/{id}/createdraft', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WorkflowScheme',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_draft_default_workflow(self, id, **kwargs):  # noqa: E501
        """Delete draft default workflow  # noqa: E501

        Resets the default workflow for a workflow scheme's draft. That is, the default workflow is set to Jira's system workflow (the *jira* workflow).  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_draft_default_workflow(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The ID of the workflow scheme that the draft belongs to. (required)
        :return: WorkflowScheme
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_draft_default_workflow_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_draft_default_workflow_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def delete_draft_default_workflow_with_http_info(self, id, **kwargs):  # noqa: E501
        """Delete draft default workflow  # noqa: E501

        Resets the default workflow for a workflow scheme's draft. That is, the default workflow is set to Jira's system workflow (the *jira* workflow).  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_draft_default_workflow_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The ID of the workflow scheme that the draft belongs to. (required)
        :return: WorkflowScheme
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_draft_default_workflow" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_draft_default_workflow`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rest/api/3/workflowscheme/{id}/draft/default', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WorkflowScheme',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_draft_workflow_mapping(self, id, workflow_name, **kwargs):  # noqa: E501
        """Delete issue types for workflow in draft workflow scheme  # noqa: E501

        Deletes the workflow-issue type mapping for a workflow in a workflow scheme's draft.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_draft_workflow_mapping(id, workflow_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The ID of the workflow scheme that the draft belongs to. (required)
        :param str workflow_name: The name of the workflow. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_draft_workflow_mapping_with_http_info(id, workflow_name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_draft_workflow_mapping_with_http_info(id, workflow_name, **kwargs)  # noqa: E501
            return data

    def delete_draft_workflow_mapping_with_http_info(self, id, workflow_name, **kwargs):  # noqa: E501
        """Delete issue types for workflow in draft workflow scheme  # noqa: E501

        Deletes the workflow-issue type mapping for a workflow in a workflow scheme's draft.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_draft_workflow_mapping_with_http_info(id, workflow_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The ID of the workflow scheme that the draft belongs to. (required)
        :param str workflow_name: The name of the workflow. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'workflow_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_draft_workflow_mapping" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_draft_workflow_mapping`")  # noqa: E501
        # verify the required parameter 'workflow_name' is set
        if ('workflow_name' not in params or
                params['workflow_name'] is None):
            raise ValueError("Missing the required parameter `workflow_name` when calling `delete_draft_workflow_mapping`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'workflow_name' in params:
            query_params.append(('workflowName', params['workflow_name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['OAuth2', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rest/api/3/workflowscheme/{id}/draft/workflow', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_workflow_scheme_draft(self, id, **kwargs):  # noqa: E501
        """Delete draft workflow scheme  # noqa: E501

        Deletes a draft workflow scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_workflow_scheme_draft(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The ID of the active workflow scheme that the draft was created from. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_workflow_scheme_draft_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_workflow_scheme_draft_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def delete_workflow_scheme_draft_with_http_info(self, id, **kwargs):  # noqa: E501
        """Delete draft workflow scheme  # noqa: E501

        Deletes a draft workflow scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_workflow_scheme_draft_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The ID of the active workflow scheme that the draft was created from. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_workflow_scheme_draft" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_workflow_scheme_draft`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['OAuth2', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rest/api/3/workflowscheme/{id}/draft', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_workflow_scheme_draft_issue_type(self, id, issue_type, **kwargs):  # noqa: E501
        """Delete workflow for issue type in draft workflow scheme  # noqa: E501

        Deletes the issue type-workflow mapping for an issue type in a workflow scheme's draft.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_workflow_scheme_draft_issue_type(id, issue_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The ID of the workflow scheme that the draft belongs to. (required)
        :param str issue_type: The ID of the issue type. (required)
        :return: WorkflowScheme
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_workflow_scheme_draft_issue_type_with_http_info(id, issue_type, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_workflow_scheme_draft_issue_type_with_http_info(id, issue_type, **kwargs)  # noqa: E501
            return data

    def delete_workflow_scheme_draft_issue_type_with_http_info(self, id, issue_type, **kwargs):  # noqa: E501
        """Delete workflow for issue type in draft workflow scheme  # noqa: E501

        Deletes the issue type-workflow mapping for an issue type in a workflow scheme's draft.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_workflow_scheme_draft_issue_type_with_http_info(id, issue_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The ID of the workflow scheme that the draft belongs to. (required)
        :param str issue_type: The ID of the issue type. (required)
        :return: WorkflowScheme
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'issue_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_workflow_scheme_draft_issue_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_workflow_scheme_draft_issue_type`")  # noqa: E501
        # verify the required parameter 'issue_type' is set
        if ('issue_type' not in params or
                params['issue_type'] is None):
            raise ValueError("Missing the required parameter `issue_type` when calling `delete_workflow_scheme_draft_issue_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'issue_type' in params:
            path_params['issueType'] = params['issue_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rest/api/3/workflowscheme/{id}/draft/issuetype/{issueType}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WorkflowScheme',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_draft_default_workflow(self, id, **kwargs):  # noqa: E501
        """Get draft default workflow  # noqa: E501

        Returns the default workflow for a workflow scheme's draft. The default workflow is the workflow that is assigned any issue types that have not been mapped to any other workflow. The default workflow has *All Unassigned Issue Types* listed in its issue types for the workflow scheme in Jira.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_draft_default_workflow(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The ID of the workflow scheme that the draft belongs to. (required)
        :return: DefaultWorkflow
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_draft_default_workflow_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_draft_default_workflow_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_draft_default_workflow_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get draft default workflow  # noqa: E501

        Returns the default workflow for a workflow scheme's draft. The default workflow is the workflow that is assigned any issue types that have not been mapped to any other workflow. The default workflow has *All Unassigned Issue Types* listed in its issue types for the workflow scheme in Jira.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_draft_default_workflow_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The ID of the workflow scheme that the draft belongs to. (required)
        :return: DefaultWorkflow
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_draft_default_workflow" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_draft_default_workflow`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rest/api/3/workflowscheme/{id}/draft/default', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DefaultWorkflow',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_draft_workflow(self, id, **kwargs):  # noqa: E501
        """Get issue types for workflows in draft workflow scheme  # noqa: E501

        Returns the workflow-issue type mappings for a workflow scheme's draft.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_draft_workflow(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The ID of the workflow scheme that the draft belongs to. (required)
        :param str workflow_name: The name of a workflow in the scheme. Limits the results to the workflow-issue type mapping for the specified workflow.
        :return: IssueTypesWorkflowMapping
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_draft_workflow_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_draft_workflow_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_draft_workflow_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get issue types for workflows in draft workflow scheme  # noqa: E501

        Returns the workflow-issue type mappings for a workflow scheme's draft.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_draft_workflow_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The ID of the workflow scheme that the draft belongs to. (required)
        :param str workflow_name: The name of a workflow in the scheme. Limits the results to the workflow-issue type mapping for the specified workflow.
        :return: IssueTypesWorkflowMapping
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'workflow_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_draft_workflow" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_draft_workflow`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'workflow_name' in params:
            query_params.append(('workflowName', params['workflow_name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rest/api/3/workflowscheme/{id}/draft/workflow', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IssueTypesWorkflowMapping',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_workflow_scheme_draft(self, id, **kwargs):  # noqa: E501
        """Get draft workflow scheme  # noqa: E501

        Returns the draft workflow scheme for an active workflow scheme. Draft workflow schemes allow changes to be made to the active workflow schemes: When an active workflow scheme is updated, a draft copy is created. The draft is modified, then the changes in the draft are copied back to the active workflow scheme. See [Configuring workflow schemes](https://confluence.atlassian.com/x/tohKLg) for more information.   Note that:   *  Only active workflow schemes can have draft workflow schemes.  *  An active workflow scheme can only have one draft workflow scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workflow_scheme_draft(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The ID of the active workflow scheme that the draft was created from. (required)
        :return: WorkflowScheme
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_workflow_scheme_draft_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workflow_scheme_draft_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_workflow_scheme_draft_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get draft workflow scheme  # noqa: E501

        Returns the draft workflow scheme for an active workflow scheme. Draft workflow schemes allow changes to be made to the active workflow schemes: When an active workflow scheme is updated, a draft copy is created. The draft is modified, then the changes in the draft are copied back to the active workflow scheme. See [Configuring workflow schemes](https://confluence.atlassian.com/x/tohKLg) for more information.   Note that:   *  Only active workflow schemes can have draft workflow schemes.  *  An active workflow scheme can only have one draft workflow scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workflow_scheme_draft_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The ID of the active workflow scheme that the draft was created from. (required)
        :return: WorkflowScheme
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_workflow_scheme_draft" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_workflow_scheme_draft`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rest/api/3/workflowscheme/{id}/draft', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WorkflowScheme',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_workflow_scheme_draft_issue_type(self, id, issue_type, **kwargs):  # noqa: E501
        """Get workflow for issue type in draft workflow scheme  # noqa: E501

        Returns the issue type-workflow mapping for an issue type in a workflow scheme's draft.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workflow_scheme_draft_issue_type(id, issue_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The ID of the workflow scheme that the draft belongs to. (required)
        :param str issue_type: The ID of the issue type. (required)
        :return: IssueTypeWorkflowMapping
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_workflow_scheme_draft_issue_type_with_http_info(id, issue_type, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workflow_scheme_draft_issue_type_with_http_info(id, issue_type, **kwargs)  # noqa: E501
            return data

    def get_workflow_scheme_draft_issue_type_with_http_info(self, id, issue_type, **kwargs):  # noqa: E501
        """Get workflow for issue type in draft workflow scheme  # noqa: E501

        Returns the issue type-workflow mapping for an issue type in a workflow scheme's draft.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workflow_scheme_draft_issue_type_with_http_info(id, issue_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The ID of the workflow scheme that the draft belongs to. (required)
        :param str issue_type: The ID of the issue type. (required)
        :return: IssueTypeWorkflowMapping
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'issue_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_workflow_scheme_draft_issue_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_workflow_scheme_draft_issue_type`")  # noqa: E501
        # verify the required parameter 'issue_type' is set
        if ('issue_type' not in params or
                params['issue_type'] is None):
            raise ValueError("Missing the required parameter `issue_type` when calling `get_workflow_scheme_draft_issue_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'issue_type' in params:
            path_params['issueType'] = params['issue_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rest/api/3/workflowscheme/{id}/draft/issuetype/{issueType}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IssueTypeWorkflowMapping',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def publish_draft_workflow_scheme(self, body, id, **kwargs):  # noqa: E501
        """Publish draft workflow scheme  # noqa: E501

        Publishes a draft workflow scheme.  Where the draft workflow includes new workflow statuses for an issue type, mappings are provided to update issues with the original workflow status to the new workflow status.  This operation is [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain updates.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.publish_draft_workflow_scheme(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PublishDraftWorkflowScheme body: Details of the status mappings. (required)
        :param int id: The ID of the workflow scheme that the draft belongs to. (required)
        :param bool validate_only: Whether the request only performs a validation.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.publish_draft_workflow_scheme_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.publish_draft_workflow_scheme_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def publish_draft_workflow_scheme_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """Publish draft workflow scheme  # noqa: E501

        Publishes a draft workflow scheme.  Where the draft workflow includes new workflow statuses for an issue type, mappings are provided to update issues with the original workflow status to the new workflow status.  This operation is [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain updates.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.publish_draft_workflow_scheme_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PublishDraftWorkflowScheme body: Details of the status mappings. (required)
        :param int id: The ID of the workflow scheme that the draft belongs to. (required)
        :param bool validate_only: Whether the request only performs a validation.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id', 'validate_only']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method publish_draft_workflow_scheme" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `publish_draft_workflow_scheme`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `publish_draft_workflow_scheme`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'validate_only' in params:
            query_params.append(('validateOnly', params['validate_only']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rest/api/3/workflowscheme/{id}/draft/publish', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_workflow_scheme_draft_issue_type(self, body, id, issue_type, **kwargs):  # noqa: E501
        """Set workflow for issue type in draft workflow scheme  # noqa: E501

        Sets the workflow for an issue type in a workflow scheme's draft.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_workflow_scheme_draft_issue_type(body, id, issue_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IssueTypeWorkflowMapping body: The issue type-project mapping. (required)
        :param int id: The ID of the workflow scheme that the draft belongs to. (required)
        :param str issue_type: The ID of the issue type. (required)
        :return: WorkflowScheme
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.set_workflow_scheme_draft_issue_type_with_http_info(body, id, issue_type, **kwargs)  # noqa: E501
        else:
            (data) = self.set_workflow_scheme_draft_issue_type_with_http_info(body, id, issue_type, **kwargs)  # noqa: E501
            return data

    def set_workflow_scheme_draft_issue_type_with_http_info(self, body, id, issue_type, **kwargs):  # noqa: E501
        """Set workflow for issue type in draft workflow scheme  # noqa: E501

        Sets the workflow for an issue type in a workflow scheme's draft.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_workflow_scheme_draft_issue_type_with_http_info(body, id, issue_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IssueTypeWorkflowMapping body: The issue type-project mapping. (required)
        :param int id: The ID of the workflow scheme that the draft belongs to. (required)
        :param str issue_type: The ID of the issue type. (required)
        :return: WorkflowScheme
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id', 'issue_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_workflow_scheme_draft_issue_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `set_workflow_scheme_draft_issue_type`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `set_workflow_scheme_draft_issue_type`")  # noqa: E501
        # verify the required parameter 'issue_type' is set
        if ('issue_type' not in params or
                params['issue_type'] is None):
            raise ValueError("Missing the required parameter `issue_type` when calling `set_workflow_scheme_draft_issue_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'issue_type' in params:
            path_params['issueType'] = params['issue_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rest/api/3/workflowscheme/{id}/draft/issuetype/{issueType}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WorkflowScheme',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_draft_default_workflow(self, body, id, **kwargs):  # noqa: E501
        """Update draft default workflow  # noqa: E501

        Sets the default workflow for a workflow scheme's draft.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_draft_default_workflow(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DefaultWorkflow body: The object for the new default workflow. (required)
        :param int id: The ID of the workflow scheme that the draft belongs to. (required)
        :return: WorkflowScheme
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_draft_default_workflow_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_draft_default_workflow_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def update_draft_default_workflow_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """Update draft default workflow  # noqa: E501

        Sets the default workflow for a workflow scheme's draft.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_draft_default_workflow_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DefaultWorkflow body: The object for the new default workflow. (required)
        :param int id: The ID of the workflow scheme that the draft belongs to. (required)
        :return: WorkflowScheme
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_draft_default_workflow" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_draft_default_workflow`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_draft_default_workflow`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rest/api/3/workflowscheme/{id}/draft/default', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WorkflowScheme',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_draft_workflow_mapping(self, body, workflow_name, id, **kwargs):  # noqa: E501
        """Set issue types for workflow in workflow scheme  # noqa: E501

        Sets the issue types for a workflow in a workflow scheme's draft. The workflow can also be set as the default workflow for the draft workflow scheme. Unmapped issues types are mapped to the default workflow.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_draft_workflow_mapping(body, workflow_name, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IssueTypesWorkflowMapping body: (required)
        :param str workflow_name: The name of the workflow. (required)
        :param int id: The ID of the workflow scheme that the draft belongs to. (required)
        :return: WorkflowScheme
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_draft_workflow_mapping_with_http_info(body, workflow_name, id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_draft_workflow_mapping_with_http_info(body, workflow_name, id, **kwargs)  # noqa: E501
            return data

    def update_draft_workflow_mapping_with_http_info(self, body, workflow_name, id, **kwargs):  # noqa: E501
        """Set issue types for workflow in workflow scheme  # noqa: E501

        Sets the issue types for a workflow in a workflow scheme's draft. The workflow can also be set as the default workflow for the draft workflow scheme. Unmapped issues types are mapped to the default workflow.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_draft_workflow_mapping_with_http_info(body, workflow_name, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IssueTypesWorkflowMapping body: (required)
        :param str workflow_name: The name of the workflow. (required)
        :param int id: The ID of the workflow scheme that the draft belongs to. (required)
        :return: WorkflowScheme
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'workflow_name', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_draft_workflow_mapping" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_draft_workflow_mapping`")  # noqa: E501
        # verify the required parameter 'workflow_name' is set
        if ('workflow_name' not in params or
                params['workflow_name'] is None):
            raise ValueError("Missing the required parameter `workflow_name` when calling `update_draft_workflow_mapping`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_draft_workflow_mapping`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'workflow_name' in params:
            query_params.append(('workflowName', params['workflow_name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rest/api/3/workflowscheme/{id}/draft/workflow', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WorkflowScheme',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_workflow_scheme_draft(self, body, id, **kwargs):  # noqa: E501
        """Update draft workflow scheme  # noqa: E501

        Updates a draft workflow scheme. If a draft workflow scheme does not exist for the active workflow scheme, then a draft is created. Note that an active workflow scheme can only have one draft workflow scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_workflow_scheme_draft(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WorkflowScheme body: (required)
        :param int id: The ID of the active workflow scheme that the draft was created from. (required)
        :return: WorkflowScheme
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_workflow_scheme_draft_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_workflow_scheme_draft_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def update_workflow_scheme_draft_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """Update draft workflow scheme  # noqa: E501

        Updates a draft workflow scheme. If a draft workflow scheme does not exist for the active workflow scheme, then a draft is created. Note that an active workflow scheme can only have one draft workflow scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_workflow_scheme_draft_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WorkflowScheme body: (required)
        :param int id: The ID of the active workflow scheme that the draft was created from. (required)
        :return: WorkflowScheme
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_workflow_scheme_draft" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_workflow_scheme_draft`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_workflow_scheme_draft`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rest/api/3/workflowscheme/{id}/draft', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WorkflowScheme',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
