# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ApplicationRole(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'default_groups': 'list[str]',
        'default_groups_details': 'list[GroupName]',
        'defined': 'bool',
        'group_details': 'list[GroupName]',
        'groups': 'list[str]',
        'has_unlimited_seats': 'bool',
        'key': 'str',
        'name': 'str',
        'number_of_seats': 'int',
        'platform': 'bool',
        'remaining_seats': 'int',
        'selected_by_default': 'bool',
        'user_count': 'int',
        'user_count_description': 'str'
    }

    attribute_map = {
        'default_groups': 'defaultGroups',
        'default_groups_details': 'defaultGroupsDetails',
        'defined': 'defined',
        'group_details': 'groupDetails',
        'groups': 'groups',
        'has_unlimited_seats': 'hasUnlimitedSeats',
        'key': 'key',
        'name': 'name',
        'number_of_seats': 'numberOfSeats',
        'platform': 'platform',
        'remaining_seats': 'remainingSeats',
        'selected_by_default': 'selectedByDefault',
        'user_count': 'userCount',
        'user_count_description': 'userCountDescription'
    }

    def __init__(self, default_groups=None, default_groups_details=None, defined=None, group_details=None, groups=None, has_unlimited_seats=None, key=None, name=None, number_of_seats=None, platform=None, remaining_seats=None, selected_by_default=None, user_count=None, user_count_description=None):  # noqa: E501
        """ApplicationRole - a model defined in Swagger"""  # noqa: E501
        self._default_groups = None
        self._default_groups_details = None
        self._defined = None
        self._group_details = None
        self._groups = None
        self._has_unlimited_seats = None
        self._key = None
        self._name = None
        self._number_of_seats = None
        self._platform = None
        self._remaining_seats = None
        self._selected_by_default = None
        self._user_count = None
        self._user_count_description = None
        self.discriminator = None
        if default_groups is not None:
            self.default_groups = default_groups
        if default_groups_details is not None:
            self.default_groups_details = default_groups_details
        if defined is not None:
            self.defined = defined
        if group_details is not None:
            self.group_details = group_details
        if groups is not None:
            self.groups = groups
        if has_unlimited_seats is not None:
            self.has_unlimited_seats = has_unlimited_seats
        if key is not None:
            self.key = key
        if name is not None:
            self.name = name
        if number_of_seats is not None:
            self.number_of_seats = number_of_seats
        if platform is not None:
            self.platform = platform
        if remaining_seats is not None:
            self.remaining_seats = remaining_seats
        if selected_by_default is not None:
            self.selected_by_default = selected_by_default
        if user_count is not None:
            self.user_count = user_count
        if user_count_description is not None:
            self.user_count_description = user_count_description

    @property
    def default_groups(self):
        """Gets the default_groups of this ApplicationRole.  # noqa: E501

        The groups that are granted default access for this application role. As a group's name can change, use of `defaultGroupsDetails` is recommended to identify a groups.  # noqa: E501

        :return: The default_groups of this ApplicationRole.  # noqa: E501
        :rtype: list[str]
        """
        return self._default_groups

    @default_groups.setter
    def default_groups(self, default_groups):
        """Sets the default_groups of this ApplicationRole.

        The groups that are granted default access for this application role. As a group's name can change, use of `defaultGroupsDetails` is recommended to identify a groups.  # noqa: E501

        :param default_groups: The default_groups of this ApplicationRole.  # noqa: E501
        :type: list[str]
        """

        self._default_groups = default_groups

    @property
    def default_groups_details(self):
        """Gets the default_groups_details of this ApplicationRole.  # noqa: E501

        The groups that are granted default access for this application role.  # noqa: E501

        :return: The default_groups_details of this ApplicationRole.  # noqa: E501
        :rtype: list[GroupName]
        """
        return self._default_groups_details

    @default_groups_details.setter
    def default_groups_details(self, default_groups_details):
        """Sets the default_groups_details of this ApplicationRole.

        The groups that are granted default access for this application role.  # noqa: E501

        :param default_groups_details: The default_groups_details of this ApplicationRole.  # noqa: E501
        :type: list[GroupName]
        """

        self._default_groups_details = default_groups_details

    @property
    def defined(self):
        """Gets the defined of this ApplicationRole.  # noqa: E501

        Deprecated.  # noqa: E501

        :return: The defined of this ApplicationRole.  # noqa: E501
        :rtype: bool
        """
        return self._defined

    @defined.setter
    def defined(self, defined):
        """Sets the defined of this ApplicationRole.

        Deprecated.  # noqa: E501

        :param defined: The defined of this ApplicationRole.  # noqa: E501
        :type: bool
        """

        self._defined = defined

    @property
    def group_details(self):
        """Gets the group_details of this ApplicationRole.  # noqa: E501

        The groups associated with the application role.  # noqa: E501

        :return: The group_details of this ApplicationRole.  # noqa: E501
        :rtype: list[GroupName]
        """
        return self._group_details

    @group_details.setter
    def group_details(self, group_details):
        """Sets the group_details of this ApplicationRole.

        The groups associated with the application role.  # noqa: E501

        :param group_details: The group_details of this ApplicationRole.  # noqa: E501
        :type: list[GroupName]
        """

        self._group_details = group_details

    @property
    def groups(self):
        """Gets the groups of this ApplicationRole.  # noqa: E501

        The groups associated with the application role. As a group's name can change, use of `groupDetails` is recommended to identify a groups.  # noqa: E501

        :return: The groups of this ApplicationRole.  # noqa: E501
        :rtype: list[str]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this ApplicationRole.

        The groups associated with the application role. As a group's name can change, use of `groupDetails` is recommended to identify a groups.  # noqa: E501

        :param groups: The groups of this ApplicationRole.  # noqa: E501
        :type: list[str]
        """

        self._groups = groups

    @property
    def has_unlimited_seats(self):
        """Gets the has_unlimited_seats of this ApplicationRole.  # noqa: E501


        :return: The has_unlimited_seats of this ApplicationRole.  # noqa: E501
        :rtype: bool
        """
        return self._has_unlimited_seats

    @has_unlimited_seats.setter
    def has_unlimited_seats(self, has_unlimited_seats):
        """Sets the has_unlimited_seats of this ApplicationRole.


        :param has_unlimited_seats: The has_unlimited_seats of this ApplicationRole.  # noqa: E501
        :type: bool
        """

        self._has_unlimited_seats = has_unlimited_seats

    @property
    def key(self):
        """Gets the key of this ApplicationRole.  # noqa: E501

        The key of the application role.  # noqa: E501

        :return: The key of this ApplicationRole.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this ApplicationRole.

        The key of the application role.  # noqa: E501

        :param key: The key of this ApplicationRole.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def name(self):
        """Gets the name of this ApplicationRole.  # noqa: E501

        The display name of the application role.  # noqa: E501

        :return: The name of this ApplicationRole.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ApplicationRole.

        The display name of the application role.  # noqa: E501

        :param name: The name of this ApplicationRole.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def number_of_seats(self):
        """Gets the number_of_seats of this ApplicationRole.  # noqa: E501

        The maximum count of users on your license.  # noqa: E501

        :return: The number_of_seats of this ApplicationRole.  # noqa: E501
        :rtype: int
        """
        return self._number_of_seats

    @number_of_seats.setter
    def number_of_seats(self, number_of_seats):
        """Sets the number_of_seats of this ApplicationRole.

        The maximum count of users on your license.  # noqa: E501

        :param number_of_seats: The number_of_seats of this ApplicationRole.  # noqa: E501
        :type: int
        """

        self._number_of_seats = number_of_seats

    @property
    def platform(self):
        """Gets the platform of this ApplicationRole.  # noqa: E501

        Indicates if the application role belongs to Jira platform (`jira-core`).  # noqa: E501

        :return: The platform of this ApplicationRole.  # noqa: E501
        :rtype: bool
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this ApplicationRole.

        Indicates if the application role belongs to Jira platform (`jira-core`).  # noqa: E501

        :param platform: The platform of this ApplicationRole.  # noqa: E501
        :type: bool
        """

        self._platform = platform

    @property
    def remaining_seats(self):
        """Gets the remaining_seats of this ApplicationRole.  # noqa: E501

        The count of users remaining on your license.  # noqa: E501

        :return: The remaining_seats of this ApplicationRole.  # noqa: E501
        :rtype: int
        """
        return self._remaining_seats

    @remaining_seats.setter
    def remaining_seats(self, remaining_seats):
        """Sets the remaining_seats of this ApplicationRole.

        The count of users remaining on your license.  # noqa: E501

        :param remaining_seats: The remaining_seats of this ApplicationRole.  # noqa: E501
        :type: int
        """

        self._remaining_seats = remaining_seats

    @property
    def selected_by_default(self):
        """Gets the selected_by_default of this ApplicationRole.  # noqa: E501

        Determines whether this application role should be selected by default on user creation.  # noqa: E501

        :return: The selected_by_default of this ApplicationRole.  # noqa: E501
        :rtype: bool
        """
        return self._selected_by_default

    @selected_by_default.setter
    def selected_by_default(self, selected_by_default):
        """Sets the selected_by_default of this ApplicationRole.

        Determines whether this application role should be selected by default on user creation.  # noqa: E501

        :param selected_by_default: The selected_by_default of this ApplicationRole.  # noqa: E501
        :type: bool
        """

        self._selected_by_default = selected_by_default

    @property
    def user_count(self):
        """Gets the user_count of this ApplicationRole.  # noqa: E501

        The number of users counting against your license.  # noqa: E501

        :return: The user_count of this ApplicationRole.  # noqa: E501
        :rtype: int
        """
        return self._user_count

    @user_count.setter
    def user_count(self, user_count):
        """Sets the user_count of this ApplicationRole.

        The number of users counting against your license.  # noqa: E501

        :param user_count: The user_count of this ApplicationRole.  # noqa: E501
        :type: int
        """

        self._user_count = user_count

    @property
    def user_count_description(self):
        """Gets the user_count_description of this ApplicationRole.  # noqa: E501

        The [type of users](https://confluence.atlassian.com/x/lRW3Ng) being counted against your license.  # noqa: E501

        :return: The user_count_description of this ApplicationRole.  # noqa: E501
        :rtype: str
        """
        return self._user_count_description

    @user_count_description.setter
    def user_count_description(self, user_count_description):
        """Sets the user_count_description of this ApplicationRole.

        The [type of users](https://confluence.atlassian.com/x/lRW3Ng) being counted against your license.  # noqa: E501

        :param user_count_description: The user_count_description of this ApplicationRole.  # noqa: E501
        :type: str
        """

        self._user_count_description = user_count_description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApplicationRole, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApplicationRole):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
