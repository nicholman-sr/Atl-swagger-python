# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ApprovalConfiguration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'active': 'str',
        'condition_type': 'str',
        'condition_value': 'str',
        'exclude': 'list[str]',
        'field_id': 'str',
        'pre_populated_field_id': 'str',
        'transition_approved': 'str',
        'transition_rejected': 'str'
    }

    attribute_map = {
        'active': 'active',
        'condition_type': 'conditionType',
        'condition_value': 'conditionValue',
        'exclude': 'exclude',
        'field_id': 'fieldId',
        'pre_populated_field_id': 'prePopulatedFieldId',
        'transition_approved': 'transitionApproved',
        'transition_rejected': 'transitionRejected'
    }

    def __init__(self, active=None, condition_type=None, condition_value=None, exclude=None, field_id=None, pre_populated_field_id=None, transition_approved=None, transition_rejected=None):  # noqa: E501
        """ApprovalConfiguration - a model defined in Swagger"""  # noqa: E501
        self._active = None
        self._condition_type = None
        self._condition_value = None
        self._exclude = None
        self._field_id = None
        self._pre_populated_field_id = None
        self._transition_approved = None
        self._transition_rejected = None
        self.discriminator = None
        self.active = active
        self.condition_type = condition_type
        self.condition_value = condition_value
        if exclude is not None:
            self.exclude = exclude
        self.field_id = field_id
        if pre_populated_field_id is not None:
            self.pre_populated_field_id = pre_populated_field_id
        self.transition_approved = transition_approved
        self.transition_rejected = transition_rejected

    @property
    def active(self):
        """Gets the active of this ApprovalConfiguration.  # noqa: E501

        Whether the approval configuration is active.  # noqa: E501

        :return: The active of this ApprovalConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this ApprovalConfiguration.

        Whether the approval configuration is active.  # noqa: E501

        :param active: The active of this ApprovalConfiguration.  # noqa: E501
        :type: str
        """
        if active is None:
            raise ValueError("Invalid value for `active`, must not be `None`")  # noqa: E501
        allowed_values = ["true", "false"]  # noqa: E501
        if active not in allowed_values:
            raise ValueError(
                "Invalid value for `active` ({0}), must be one of {1}"  # noqa: E501
                .format(active, allowed_values)
            )

        self._active = active

    @property
    def condition_type(self):
        """Gets the condition_type of this ApprovalConfiguration.  # noqa: E501

        How the required approval count is calculated. It may be configured to require a specific number of approvals, or approval by a percentage of approvers. If the approvers source field is Approver groups, you can configure how many approvals per group are required for the request to be approved. The number will be the same across all groups.  # noqa: E501

        :return: The condition_type of this ApprovalConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._condition_type

    @condition_type.setter
    def condition_type(self, condition_type):
        """Sets the condition_type of this ApprovalConfiguration.

        How the required approval count is calculated. It may be configured to require a specific number of approvals, or approval by a percentage of approvers. If the approvers source field is Approver groups, you can configure how many approvals per group are required for the request to be approved. The number will be the same across all groups.  # noqa: E501

        :param condition_type: The condition_type of this ApprovalConfiguration.  # noqa: E501
        :type: str
        """
        if condition_type is None:
            raise ValueError("Invalid value for `condition_type`, must not be `None`")  # noqa: E501
        allowed_values = ["number", "percent", "numberPerPrincipal"]  # noqa: E501
        if condition_type not in allowed_values:
            raise ValueError(
                "Invalid value for `condition_type` ({0}), must be one of {1}"  # noqa: E501
                .format(condition_type, allowed_values)
            )

        self._condition_type = condition_type

    @property
    def condition_value(self):
        """Gets the condition_value of this ApprovalConfiguration.  # noqa: E501

        The number or percentage of approvals required for a request to be approved. If `conditionType` is `number`, the value must be 20 or less. If `conditionType` is `percent`, the value must be 100 or less.  # noqa: E501

        :return: The condition_value of this ApprovalConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._condition_value

    @condition_value.setter
    def condition_value(self, condition_value):
        """Sets the condition_value of this ApprovalConfiguration.

        The number or percentage of approvals required for a request to be approved. If `conditionType` is `number`, the value must be 20 or less. If `conditionType` is `percent`, the value must be 100 or less.  # noqa: E501

        :param condition_value: The condition_value of this ApprovalConfiguration.  # noqa: E501
        :type: str
        """
        if condition_value is None:
            raise ValueError("Invalid value for `condition_value`, must not be `None`")  # noqa: E501

        self._condition_value = condition_value

    @property
    def exclude(self):
        """Gets the exclude of this ApprovalConfiguration.  # noqa: E501

        A list of roles that should be excluded as possible approvers.  # noqa: E501

        :return: The exclude of this ApprovalConfiguration.  # noqa: E501
        :rtype: list[str]
        """
        return self._exclude

    @exclude.setter
    def exclude(self, exclude):
        """Sets the exclude of this ApprovalConfiguration.

        A list of roles that should be excluded as possible approvers.  # noqa: E501

        :param exclude: The exclude of this ApprovalConfiguration.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["assignee", "reporter"]  # noqa: E501
        if not set(exclude).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `exclude` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(exclude) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._exclude = exclude

    @property
    def field_id(self):
        """Gets the field_id of this ApprovalConfiguration.  # noqa: E501

        The custom field ID of the \"Approvers\" or \"Approver Groups\" field.  # noqa: E501

        :return: The field_id of this ApprovalConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._field_id

    @field_id.setter
    def field_id(self, field_id):
        """Sets the field_id of this ApprovalConfiguration.

        The custom field ID of the \"Approvers\" or \"Approver Groups\" field.  # noqa: E501

        :param field_id: The field_id of this ApprovalConfiguration.  # noqa: E501
        :type: str
        """
        if field_id is None:
            raise ValueError("Invalid value for `field_id`, must not be `None`")  # noqa: E501

        self._field_id = field_id

    @property
    def pre_populated_field_id(self):
        """Gets the pre_populated_field_id of this ApprovalConfiguration.  # noqa: E501

        The custom field ID of the field used to pre-populate the Approver field. Only supports the \"Affected Services\" field.  # noqa: E501

        :return: The pre_populated_field_id of this ApprovalConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._pre_populated_field_id

    @pre_populated_field_id.setter
    def pre_populated_field_id(self, pre_populated_field_id):
        """Sets the pre_populated_field_id of this ApprovalConfiguration.

        The custom field ID of the field used to pre-populate the Approver field. Only supports the \"Affected Services\" field.  # noqa: E501

        :param pre_populated_field_id: The pre_populated_field_id of this ApprovalConfiguration.  # noqa: E501
        :type: str
        """

        self._pre_populated_field_id = pre_populated_field_id

    @property
    def transition_approved(self):
        """Gets the transition_approved of this ApprovalConfiguration.  # noqa: E501

        The numeric ID of the transition to be executed if the request is approved.  # noqa: E501

        :return: The transition_approved of this ApprovalConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._transition_approved

    @transition_approved.setter
    def transition_approved(self, transition_approved):
        """Sets the transition_approved of this ApprovalConfiguration.

        The numeric ID of the transition to be executed if the request is approved.  # noqa: E501

        :param transition_approved: The transition_approved of this ApprovalConfiguration.  # noqa: E501
        :type: str
        """
        if transition_approved is None:
            raise ValueError("Invalid value for `transition_approved`, must not be `None`")  # noqa: E501

        self._transition_approved = transition_approved

    @property
    def transition_rejected(self):
        """Gets the transition_rejected of this ApprovalConfiguration.  # noqa: E501

        The numeric ID of the transition to be executed if the request is declined.  # noqa: E501

        :return: The transition_rejected of this ApprovalConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._transition_rejected

    @transition_rejected.setter
    def transition_rejected(self, transition_rejected):
        """Sets the transition_rejected of this ApprovalConfiguration.

        The numeric ID of the transition to be executed if the request is declined.  # noqa: E501

        :param transition_rejected: The transition_rejected of this ApprovalConfiguration.  # noqa: E501
        :type: str
        """
        if transition_rejected is None:
            raise ValueError("Invalid value for `transition_rejected`, must not be `None`")  # noqa: E501

        self._transition_rejected = transition_rejected

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApprovalConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApprovalConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
