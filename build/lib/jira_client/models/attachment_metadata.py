# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AttachmentMetadata(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'author': 'AllOfAttachmentMetadataAuthor',
        'content': 'str',
        'created': 'datetime',
        'filename': 'str',
        'id': 'int',
        'mime_type': 'str',
        'properties': 'dict(str, object)',
        '_self': 'str',
        'size': 'int',
        'thumbnail': 'str'
    }

    attribute_map = {
        'author': 'author',
        'content': 'content',
        'created': 'created',
        'filename': 'filename',
        'id': 'id',
        'mime_type': 'mimeType',
        'properties': 'properties',
        '_self': 'self',
        'size': 'size',
        'thumbnail': 'thumbnail'
    }

    def __init__(self, author=None, content=None, created=None, filename=None, id=None, mime_type=None, properties=None, _self=None, size=None, thumbnail=None):  # noqa: E501
        """AttachmentMetadata - a model defined in Swagger"""  # noqa: E501
        self._author = None
        self._content = None
        self._created = None
        self._filename = None
        self._id = None
        self._mime_type = None
        self._properties = None
        self.__self = None
        self._size = None
        self._thumbnail = None
        self.discriminator = None
        if author is not None:
            self.author = author
        if content is not None:
            self.content = content
        if created is not None:
            self.created = created
        if filename is not None:
            self.filename = filename
        if id is not None:
            self.id = id
        if mime_type is not None:
            self.mime_type = mime_type
        if properties is not None:
            self.properties = properties
        if _self is not None:
            self._self = _self
        if size is not None:
            self.size = size
        if thumbnail is not None:
            self.thumbnail = thumbnail

    @property
    def author(self):
        """Gets the author of this AttachmentMetadata.  # noqa: E501

        Details of the user who attached the file.  # noqa: E501

        :return: The author of this AttachmentMetadata.  # noqa: E501
        :rtype: AllOfAttachmentMetadataAuthor
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this AttachmentMetadata.

        Details of the user who attached the file.  # noqa: E501

        :param author: The author of this AttachmentMetadata.  # noqa: E501
        :type: AllOfAttachmentMetadataAuthor
        """

        self._author = author

    @property
    def content(self):
        """Gets the content of this AttachmentMetadata.  # noqa: E501

        The URL of the attachment.  # noqa: E501

        :return: The content of this AttachmentMetadata.  # noqa: E501
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this AttachmentMetadata.

        The URL of the attachment.  # noqa: E501

        :param content: The content of this AttachmentMetadata.  # noqa: E501
        :type: str
        """

        self._content = content

    @property
    def created(self):
        """Gets the created of this AttachmentMetadata.  # noqa: E501

        The datetime the attachment was created.  # noqa: E501

        :return: The created of this AttachmentMetadata.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this AttachmentMetadata.

        The datetime the attachment was created.  # noqa: E501

        :param created: The created of this AttachmentMetadata.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def filename(self):
        """Gets the filename of this AttachmentMetadata.  # noqa: E501

        The name of the attachment file.  # noqa: E501

        :return: The filename of this AttachmentMetadata.  # noqa: E501
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """Sets the filename of this AttachmentMetadata.

        The name of the attachment file.  # noqa: E501

        :param filename: The filename of this AttachmentMetadata.  # noqa: E501
        :type: str
        """

        self._filename = filename

    @property
    def id(self):
        """Gets the id of this AttachmentMetadata.  # noqa: E501

        The ID of the attachment.  # noqa: E501

        :return: The id of this AttachmentMetadata.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AttachmentMetadata.

        The ID of the attachment.  # noqa: E501

        :param id: The id of this AttachmentMetadata.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def mime_type(self):
        """Gets the mime_type of this AttachmentMetadata.  # noqa: E501

        The MIME type of the attachment.  # noqa: E501

        :return: The mime_type of this AttachmentMetadata.  # noqa: E501
        :rtype: str
        """
        return self._mime_type

    @mime_type.setter
    def mime_type(self, mime_type):
        """Sets the mime_type of this AttachmentMetadata.

        The MIME type of the attachment.  # noqa: E501

        :param mime_type: The mime_type of this AttachmentMetadata.  # noqa: E501
        :type: str
        """

        self._mime_type = mime_type

    @property
    def properties(self):
        """Gets the properties of this AttachmentMetadata.  # noqa: E501

        Additional properties of the attachment.  # noqa: E501

        :return: The properties of this AttachmentMetadata.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this AttachmentMetadata.

        Additional properties of the attachment.  # noqa: E501

        :param properties: The properties of this AttachmentMetadata.  # noqa: E501
        :type: dict(str, object)
        """

        self._properties = properties

    @property
    def _self(self):
        """Gets the _self of this AttachmentMetadata.  # noqa: E501

        The URL of the attachment metadata details.  # noqa: E501

        :return: The _self of this AttachmentMetadata.  # noqa: E501
        :rtype: str
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this AttachmentMetadata.

        The URL of the attachment metadata details.  # noqa: E501

        :param _self: The _self of this AttachmentMetadata.  # noqa: E501
        :type: str
        """

        self.__self = _self

    @property
    def size(self):
        """Gets the size of this AttachmentMetadata.  # noqa: E501

        The size of the attachment.  # noqa: E501

        :return: The size of this AttachmentMetadata.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this AttachmentMetadata.

        The size of the attachment.  # noqa: E501

        :param size: The size of this AttachmentMetadata.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def thumbnail(self):
        """Gets the thumbnail of this AttachmentMetadata.  # noqa: E501

        The URL of a thumbnail representing the attachment.  # noqa: E501

        :return: The thumbnail of this AttachmentMetadata.  # noqa: E501
        :rtype: str
        """
        return self._thumbnail

    @thumbnail.setter
    def thumbnail(self, thumbnail):
        """Sets the thumbnail of this AttachmentMetadata.

        The URL of a thumbnail representing the attachment.  # noqa: E501

        :param thumbnail: The thumbnail of this AttachmentMetadata.  # noqa: E501
        :type: str
        """

        self._thumbnail = thumbnail

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AttachmentMetadata, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AttachmentMetadata):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
