# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AvailableWorkflowSystemRule(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'incompatible_rule_keys': 'list[str]',
        'is_available_for_initial_transition': 'bool',
        'is_visible': 'bool',
        'name': 'str',
        'rule_key': 'str',
        'rule_type': 'str'
    }

    attribute_map = {
        'description': 'description',
        'incompatible_rule_keys': 'incompatibleRuleKeys',
        'is_available_for_initial_transition': 'isAvailableForInitialTransition',
        'is_visible': 'isVisible',
        'name': 'name',
        'rule_key': 'ruleKey',
        'rule_type': 'ruleType'
    }

    def __init__(self, description=None, incompatible_rule_keys=None, is_available_for_initial_transition=None, is_visible=None, name=None, rule_key=None, rule_type=None):  # noqa: E501
        """AvailableWorkflowSystemRule - a model defined in Swagger"""  # noqa: E501
        self._description = None
        self._incompatible_rule_keys = None
        self._is_available_for_initial_transition = None
        self._is_visible = None
        self._name = None
        self._rule_key = None
        self._rule_type = None
        self.discriminator = None
        self.description = description
        self.incompatible_rule_keys = incompatible_rule_keys
        self.is_available_for_initial_transition = is_available_for_initial_transition
        self.is_visible = is_visible
        self.name = name
        self.rule_key = rule_key
        self.rule_type = rule_type

    @property
    def description(self):
        """Gets the description of this AvailableWorkflowSystemRule.  # noqa: E501

        The rule description.  # noqa: E501

        :return: The description of this AvailableWorkflowSystemRule.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AvailableWorkflowSystemRule.

        The rule description.  # noqa: E501

        :param description: The description of this AvailableWorkflowSystemRule.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def incompatible_rule_keys(self):
        """Gets the incompatible_rule_keys of this AvailableWorkflowSystemRule.  # noqa: E501

        List of rules that conflict with this one.  # noqa: E501

        :return: The incompatible_rule_keys of this AvailableWorkflowSystemRule.  # noqa: E501
        :rtype: list[str]
        """
        return self._incompatible_rule_keys

    @incompatible_rule_keys.setter
    def incompatible_rule_keys(self, incompatible_rule_keys):
        """Sets the incompatible_rule_keys of this AvailableWorkflowSystemRule.

        List of rules that conflict with this one.  # noqa: E501

        :param incompatible_rule_keys: The incompatible_rule_keys of this AvailableWorkflowSystemRule.  # noqa: E501
        :type: list[str]
        """
        if incompatible_rule_keys is None:
            raise ValueError("Invalid value for `incompatible_rule_keys`, must not be `None`")  # noqa: E501

        self._incompatible_rule_keys = incompatible_rule_keys

    @property
    def is_available_for_initial_transition(self):
        """Gets the is_available_for_initial_transition of this AvailableWorkflowSystemRule.  # noqa: E501

        Whether the rule can be added added to an initial transition.  # noqa: E501

        :return: The is_available_for_initial_transition of this AvailableWorkflowSystemRule.  # noqa: E501
        :rtype: bool
        """
        return self._is_available_for_initial_transition

    @is_available_for_initial_transition.setter
    def is_available_for_initial_transition(self, is_available_for_initial_transition):
        """Sets the is_available_for_initial_transition of this AvailableWorkflowSystemRule.

        Whether the rule can be added added to an initial transition.  # noqa: E501

        :param is_available_for_initial_transition: The is_available_for_initial_transition of this AvailableWorkflowSystemRule.  # noqa: E501
        :type: bool
        """
        if is_available_for_initial_transition is None:
            raise ValueError("Invalid value for `is_available_for_initial_transition`, must not be `None`")  # noqa: E501

        self._is_available_for_initial_transition = is_available_for_initial_transition

    @property
    def is_visible(self):
        """Gets the is_visible of this AvailableWorkflowSystemRule.  # noqa: E501

        Whether the rule is visible.  # noqa: E501

        :return: The is_visible of this AvailableWorkflowSystemRule.  # noqa: E501
        :rtype: bool
        """
        return self._is_visible

    @is_visible.setter
    def is_visible(self, is_visible):
        """Sets the is_visible of this AvailableWorkflowSystemRule.

        Whether the rule is visible.  # noqa: E501

        :param is_visible: The is_visible of this AvailableWorkflowSystemRule.  # noqa: E501
        :type: bool
        """
        if is_visible is None:
            raise ValueError("Invalid value for `is_visible`, must not be `None`")  # noqa: E501

        self._is_visible = is_visible

    @property
    def name(self):
        """Gets the name of this AvailableWorkflowSystemRule.  # noqa: E501

        The rule name.  # noqa: E501

        :return: The name of this AvailableWorkflowSystemRule.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AvailableWorkflowSystemRule.

        The rule name.  # noqa: E501

        :param name: The name of this AvailableWorkflowSystemRule.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def rule_key(self):
        """Gets the rule_key of this AvailableWorkflowSystemRule.  # noqa: E501

        The rule key.  # noqa: E501

        :return: The rule_key of this AvailableWorkflowSystemRule.  # noqa: E501
        :rtype: str
        """
        return self._rule_key

    @rule_key.setter
    def rule_key(self, rule_key):
        """Sets the rule_key of this AvailableWorkflowSystemRule.

        The rule key.  # noqa: E501

        :param rule_key: The rule_key of this AvailableWorkflowSystemRule.  # noqa: E501
        :type: str
        """
        if rule_key is None:
            raise ValueError("Invalid value for `rule_key`, must not be `None`")  # noqa: E501

        self._rule_key = rule_key

    @property
    def rule_type(self):
        """Gets the rule_type of this AvailableWorkflowSystemRule.  # noqa: E501

        The rule type.  # noqa: E501

        :return: The rule_type of this AvailableWorkflowSystemRule.  # noqa: E501
        :rtype: str
        """
        return self._rule_type

    @rule_type.setter
    def rule_type(self, rule_type):
        """Sets the rule_type of this AvailableWorkflowSystemRule.

        The rule type.  # noqa: E501

        :param rule_type: The rule_type of this AvailableWorkflowSystemRule.  # noqa: E501
        :type: str
        """
        if rule_type is None:
            raise ValueError("Invalid value for `rule_type`, must not be `None`")  # noqa: E501
        allowed_values = ["Condition", "Validator", "Function", "Screen"]  # noqa: E501
        if rule_type not in allowed_values:
            raise ValueError(
                "Invalid value for `rule_type` ({0}), must be one of {1}"  # noqa: E501
                .format(rule_type, allowed_values)
            )

        self._rule_type = rule_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AvailableWorkflowSystemRule, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AvailableWorkflowSystemRule):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
