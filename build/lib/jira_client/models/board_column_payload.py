# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BoardColumnPayload(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'maximum_issue_constraint': 'int',
        'minimum_issue_constraint': 'int',
        'name': 'str',
        'status_ids': 'list[ProjectCreateResourceIdentifier]'
    }

    attribute_map = {
        'maximum_issue_constraint': 'maximumIssueConstraint',
        'minimum_issue_constraint': 'minimumIssueConstraint',
        'name': 'name',
        'status_ids': 'statusIds'
    }

    def __init__(self, maximum_issue_constraint=None, minimum_issue_constraint=None, name=None, status_ids=None):  # noqa: E501
        """BoardColumnPayload - a model defined in Swagger"""  # noqa: E501
        self._maximum_issue_constraint = None
        self._minimum_issue_constraint = None
        self._name = None
        self._status_ids = None
        self.discriminator = None
        if maximum_issue_constraint is not None:
            self.maximum_issue_constraint = maximum_issue_constraint
        if minimum_issue_constraint is not None:
            self.minimum_issue_constraint = minimum_issue_constraint
        if name is not None:
            self.name = name
        if status_ids is not None:
            self.status_ids = status_ids

    @property
    def maximum_issue_constraint(self):
        """Gets the maximum_issue_constraint of this BoardColumnPayload.  # noqa: E501

        The maximum issue constraint for the column  # noqa: E501

        :return: The maximum_issue_constraint of this BoardColumnPayload.  # noqa: E501
        :rtype: int
        """
        return self._maximum_issue_constraint

    @maximum_issue_constraint.setter
    def maximum_issue_constraint(self, maximum_issue_constraint):
        """Sets the maximum_issue_constraint of this BoardColumnPayload.

        The maximum issue constraint for the column  # noqa: E501

        :param maximum_issue_constraint: The maximum_issue_constraint of this BoardColumnPayload.  # noqa: E501
        :type: int
        """

        self._maximum_issue_constraint = maximum_issue_constraint

    @property
    def minimum_issue_constraint(self):
        """Gets the minimum_issue_constraint of this BoardColumnPayload.  # noqa: E501

        The minimum issue constraint for the column  # noqa: E501

        :return: The minimum_issue_constraint of this BoardColumnPayload.  # noqa: E501
        :rtype: int
        """
        return self._minimum_issue_constraint

    @minimum_issue_constraint.setter
    def minimum_issue_constraint(self, minimum_issue_constraint):
        """Sets the minimum_issue_constraint of this BoardColumnPayload.

        The minimum issue constraint for the column  # noqa: E501

        :param minimum_issue_constraint: The minimum_issue_constraint of this BoardColumnPayload.  # noqa: E501
        :type: int
        """

        self._minimum_issue_constraint = minimum_issue_constraint

    @property
    def name(self):
        """Gets the name of this BoardColumnPayload.  # noqa: E501

        The name of the column  # noqa: E501

        :return: The name of this BoardColumnPayload.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BoardColumnPayload.

        The name of the column  # noqa: E501

        :param name: The name of this BoardColumnPayload.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def status_ids(self):
        """Gets the status_ids of this BoardColumnPayload.  # noqa: E501

        The status IDs for the column  # noqa: E501

        :return: The status_ids of this BoardColumnPayload.  # noqa: E501
        :rtype: list[ProjectCreateResourceIdentifier]
        """
        return self._status_ids

    @status_ids.setter
    def status_ids(self, status_ids):
        """Sets the status_ids of this BoardColumnPayload.

        The status IDs for the column  # noqa: E501

        :param status_ids: The status_ids of this BoardColumnPayload.  # noqa: E501
        :type: list[ProjectCreateResourceIdentifier]
        """

        self._status_ids = status_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BoardColumnPayload, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BoardColumnPayload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
