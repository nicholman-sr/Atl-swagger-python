# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BoardFeaturePayload(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'feature_key': 'str',
        'state': 'bool'
    }

    attribute_map = {
        'feature_key': 'featureKey',
        'state': 'state'
    }

    def __init__(self, feature_key=None, state=None):  # noqa: E501
        """BoardFeaturePayload - a model defined in Swagger"""  # noqa: E501
        self._feature_key = None
        self._state = None
        self.discriminator = None
        if feature_key is not None:
            self.feature_key = feature_key
        if state is not None:
            self.state = state

    @property
    def feature_key(self):
        """Gets the feature_key of this BoardFeaturePayload.  # noqa: E501

        The key of the feature  # noqa: E501

        :return: The feature_key of this BoardFeaturePayload.  # noqa: E501
        :rtype: str
        """
        return self._feature_key

    @feature_key.setter
    def feature_key(self, feature_key):
        """Sets the feature_key of this BoardFeaturePayload.

        The key of the feature  # noqa: E501

        :param feature_key: The feature_key of this BoardFeaturePayload.  # noqa: E501
        :type: str
        """
        allowed_values = ["ESTIMATION", "SPRINTS"]  # noqa: E501
        if feature_key not in allowed_values:
            raise ValueError(
                "Invalid value for `feature_key` ({0}), must be one of {1}"  # noqa: E501
                .format(feature_key, allowed_values)
            )

        self._feature_key = feature_key

    @property
    def state(self):
        """Gets the state of this BoardFeaturePayload.  # noqa: E501

        Whether the feature should be turned on or off  # noqa: E501

        :return: The state of this BoardFeaturePayload.  # noqa: E501
        :rtype: bool
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this BoardFeaturePayload.

        Whether the feature should be turned on or off  # noqa: E501

        :param state: The state of this BoardFeaturePayload.  # noqa: E501
        :type: bool
        """

        self._state = state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BoardFeaturePayload, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BoardFeaturePayload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
