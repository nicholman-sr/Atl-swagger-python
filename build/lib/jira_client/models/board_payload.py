# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BoardPayload(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'board_filter_jql': 'str',
        'card_color_strategy': 'str',
        'card_layout': 'CardLayout',
        'card_layouts': 'list[CardLayoutField]',
        'columns': 'list[BoardColumnPayload]',
        'features': 'list[BoardFeaturePayload]',
        'name': 'str',
        'pcri': 'ProjectCreateResourceIdentifier',
        'quick_filters': 'list[QuickFilterPayload]',
        'supports_sprint': 'bool',
        'swimlanes': 'SwimlanesPayload',
        'working_days_config': 'WorkingDaysConfig'
    }

    attribute_map = {
        'board_filter_jql': 'boardFilterJQL',
        'card_color_strategy': 'cardColorStrategy',
        'card_layout': 'cardLayout',
        'card_layouts': 'cardLayouts',
        'columns': 'columns',
        'features': 'features',
        'name': 'name',
        'pcri': 'pcri',
        'quick_filters': 'quickFilters',
        'supports_sprint': 'supportsSprint',
        'swimlanes': 'swimlanes',
        'working_days_config': 'workingDaysConfig'
    }

    def __init__(self, board_filter_jql=None, card_color_strategy=None, card_layout=None, card_layouts=None, columns=None, features=None, name=None, pcri=None, quick_filters=None, supports_sprint=True, swimlanes=None, working_days_config=None):  # noqa: E501
        """BoardPayload - a model defined in Swagger"""  # noqa: E501
        self._board_filter_jql = None
        self._card_color_strategy = None
        self._card_layout = None
        self._card_layouts = None
        self._columns = None
        self._features = None
        self._name = None
        self._pcri = None
        self._quick_filters = None
        self._supports_sprint = None
        self._swimlanes = None
        self._working_days_config = None
        self.discriminator = None
        if board_filter_jql is not None:
            self.board_filter_jql = board_filter_jql
        if card_color_strategy is not None:
            self.card_color_strategy = card_color_strategy
        if card_layout is not None:
            self.card_layout = card_layout
        if card_layouts is not None:
            self.card_layouts = card_layouts
        if columns is not None:
            self.columns = columns
        if features is not None:
            self.features = features
        if name is not None:
            self.name = name
        if pcri is not None:
            self.pcri = pcri
        if quick_filters is not None:
            self.quick_filters = quick_filters
        if supports_sprint is not None:
            self.supports_sprint = supports_sprint
        if swimlanes is not None:
            self.swimlanes = swimlanes
        if working_days_config is not None:
            self.working_days_config = working_days_config

    @property
    def board_filter_jql(self):
        """Gets the board_filter_jql of this BoardPayload.  # noqa: E501

        Takes in a JQL string to create a new filter. If no value is provided, it'll default to a JQL filter for the project creating  # noqa: E501

        :return: The board_filter_jql of this BoardPayload.  # noqa: E501
        :rtype: str
        """
        return self._board_filter_jql

    @board_filter_jql.setter
    def board_filter_jql(self, board_filter_jql):
        """Sets the board_filter_jql of this BoardPayload.

        Takes in a JQL string to create a new filter. If no value is provided, it'll default to a JQL filter for the project creating  # noqa: E501

        :param board_filter_jql: The board_filter_jql of this BoardPayload.  # noqa: E501
        :type: str
        """

        self._board_filter_jql = board_filter_jql

    @property
    def card_color_strategy(self):
        """Gets the card_color_strategy of this BoardPayload.  # noqa: E501

        Card color settings of the board  # noqa: E501

        :return: The card_color_strategy of this BoardPayload.  # noqa: E501
        :rtype: str
        """
        return self._card_color_strategy

    @card_color_strategy.setter
    def card_color_strategy(self, card_color_strategy):
        """Sets the card_color_strategy of this BoardPayload.

        Card color settings of the board  # noqa: E501

        :param card_color_strategy: The card_color_strategy of this BoardPayload.  # noqa: E501
        :type: str
        """
        allowed_values = ["ISSUE_TYPE", "REQUEST_TYPE", "ASSIGNEE", "PRIORITY", "NONE", "CUSTOM"]  # noqa: E501
        if card_color_strategy not in allowed_values:
            raise ValueError(
                "Invalid value for `card_color_strategy` ({0}), must be one of {1}"  # noqa: E501
                .format(card_color_strategy, allowed_values)
            )

        self._card_color_strategy = card_color_strategy

    @property
    def card_layout(self):
        """Gets the card_layout of this BoardPayload.  # noqa: E501


        :return: The card_layout of this BoardPayload.  # noqa: E501
        :rtype: CardLayout
        """
        return self._card_layout

    @card_layout.setter
    def card_layout(self, card_layout):
        """Sets the card_layout of this BoardPayload.


        :param card_layout: The card_layout of this BoardPayload.  # noqa: E501
        :type: CardLayout
        """

        self._card_layout = card_layout

    @property
    def card_layouts(self):
        """Gets the card_layouts of this BoardPayload.  # noqa: E501

        Card layout settings of the board  # noqa: E501

        :return: The card_layouts of this BoardPayload.  # noqa: E501
        :rtype: list[CardLayoutField]
        """
        return self._card_layouts

    @card_layouts.setter
    def card_layouts(self, card_layouts):
        """Sets the card_layouts of this BoardPayload.

        Card layout settings of the board  # noqa: E501

        :param card_layouts: The card_layouts of this BoardPayload.  # noqa: E501
        :type: list[CardLayoutField]
        """

        self._card_layouts = card_layouts

    @property
    def columns(self):
        """Gets the columns of this BoardPayload.  # noqa: E501

        The columns of the board  # noqa: E501

        :return: The columns of this BoardPayload.  # noqa: E501
        :rtype: list[BoardColumnPayload]
        """
        return self._columns

    @columns.setter
    def columns(self, columns):
        """Sets the columns of this BoardPayload.

        The columns of the board  # noqa: E501

        :param columns: The columns of this BoardPayload.  # noqa: E501
        :type: list[BoardColumnPayload]
        """

        self._columns = columns

    @property
    def features(self):
        """Gets the features of this BoardPayload.  # noqa: E501

        Feature settings for the board  # noqa: E501

        :return: The features of this BoardPayload.  # noqa: E501
        :rtype: list[BoardFeaturePayload]
        """
        return self._features

    @features.setter
    def features(self, features):
        """Sets the features of this BoardPayload.

        Feature settings for the board  # noqa: E501

        :param features: The features of this BoardPayload.  # noqa: E501
        :type: list[BoardFeaturePayload]
        """

        self._features = features

    @property
    def name(self):
        """Gets the name of this BoardPayload.  # noqa: E501

        The name of the board  # noqa: E501

        :return: The name of this BoardPayload.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BoardPayload.

        The name of the board  # noqa: E501

        :param name: The name of this BoardPayload.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def pcri(self):
        """Gets the pcri of this BoardPayload.  # noqa: E501


        :return: The pcri of this BoardPayload.  # noqa: E501
        :rtype: ProjectCreateResourceIdentifier
        """
        return self._pcri

    @pcri.setter
    def pcri(self, pcri):
        """Sets the pcri of this BoardPayload.


        :param pcri: The pcri of this BoardPayload.  # noqa: E501
        :type: ProjectCreateResourceIdentifier
        """

        self._pcri = pcri

    @property
    def quick_filters(self):
        """Gets the quick_filters of this BoardPayload.  # noqa: E501

        The quick filters for the board.  # noqa: E501

        :return: The quick_filters of this BoardPayload.  # noqa: E501
        :rtype: list[QuickFilterPayload]
        """
        return self._quick_filters

    @quick_filters.setter
    def quick_filters(self, quick_filters):
        """Sets the quick_filters of this BoardPayload.

        The quick filters for the board.  # noqa: E501

        :param quick_filters: The quick_filters of this BoardPayload.  # noqa: E501
        :type: list[QuickFilterPayload]
        """

        self._quick_filters = quick_filters

    @property
    def supports_sprint(self):
        """Gets the supports_sprint of this BoardPayload.  # noqa: E501

        Whether sprints are supported on the board  # noqa: E501

        :return: The supports_sprint of this BoardPayload.  # noqa: E501
        :rtype: bool
        """
        return self._supports_sprint

    @supports_sprint.setter
    def supports_sprint(self, supports_sprint):
        """Sets the supports_sprint of this BoardPayload.

        Whether sprints are supported on the board  # noqa: E501

        :param supports_sprint: The supports_sprint of this BoardPayload.  # noqa: E501
        :type: bool
        """

        self._supports_sprint = supports_sprint

    @property
    def swimlanes(self):
        """Gets the swimlanes of this BoardPayload.  # noqa: E501


        :return: The swimlanes of this BoardPayload.  # noqa: E501
        :rtype: SwimlanesPayload
        """
        return self._swimlanes

    @swimlanes.setter
    def swimlanes(self, swimlanes):
        """Sets the swimlanes of this BoardPayload.


        :param swimlanes: The swimlanes of this BoardPayload.  # noqa: E501
        :type: SwimlanesPayload
        """

        self._swimlanes = swimlanes

    @property
    def working_days_config(self):
        """Gets the working_days_config of this BoardPayload.  # noqa: E501


        :return: The working_days_config of this BoardPayload.  # noqa: E501
        :rtype: WorkingDaysConfig
        """
        return self._working_days_config

    @working_days_config.setter
    def working_days_config(self, working_days_config):
        """Sets the working_days_config of this BoardPayload.


        :param working_days_config: The working_days_config of this BoardPayload.  # noqa: E501
        :type: WorkingDaysConfig
        """

        self._working_days_config = working_days_config

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BoardPayload, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BoardPayload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
