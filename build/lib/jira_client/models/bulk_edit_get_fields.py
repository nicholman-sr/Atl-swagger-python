# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BulkEditGetFields(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ending_before': 'str',
        'fields': 'list[IssueBulkEditField]',
        'starting_after': 'str'
    }

    attribute_map = {
        'ending_before': 'endingBefore',
        'fields': 'fields',
        'starting_after': 'startingAfter'
    }

    def __init__(self, ending_before=None, fields=None, starting_after=None):  # noqa: E501
        """BulkEditGetFields - a model defined in Swagger"""  # noqa: E501
        self._ending_before = None
        self._fields = None
        self._starting_after = None
        self.discriminator = None
        if ending_before is not None:
            self.ending_before = ending_before
        if fields is not None:
            self.fields = fields
        if starting_after is not None:
            self.starting_after = starting_after

    @property
    def ending_before(self):
        """Gets the ending_before of this BulkEditGetFields.  # noqa: E501

        The end cursor for use in pagination.  # noqa: E501

        :return: The ending_before of this BulkEditGetFields.  # noqa: E501
        :rtype: str
        """
        return self._ending_before

    @ending_before.setter
    def ending_before(self, ending_before):
        """Sets the ending_before of this BulkEditGetFields.

        The end cursor for use in pagination.  # noqa: E501

        :param ending_before: The ending_before of this BulkEditGetFields.  # noqa: E501
        :type: str
        """

        self._ending_before = ending_before

    @property
    def fields(self):
        """Gets the fields of this BulkEditGetFields.  # noqa: E501

        List of all the fields  # noqa: E501

        :return: The fields of this BulkEditGetFields.  # noqa: E501
        :rtype: list[IssueBulkEditField]
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this BulkEditGetFields.

        List of all the fields  # noqa: E501

        :param fields: The fields of this BulkEditGetFields.  # noqa: E501
        :type: list[IssueBulkEditField]
        """

        self._fields = fields

    @property
    def starting_after(self):
        """Gets the starting_after of this BulkEditGetFields.  # noqa: E501

        The start cursor for use in pagination.  # noqa: E501

        :return: The starting_after of this BulkEditGetFields.  # noqa: E501
        :rtype: str
        """
        return self._starting_after

    @starting_after.setter
    def starting_after(self, starting_after):
        """Sets the starting_after of this BulkEditGetFields.

        The start cursor for use in pagination.  # noqa: E501

        :param starting_after: The starting_after of this BulkEditGetFields.  # noqa: E501
        :type: str
        """

        self._starting_after = starting_after

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BulkEditGetFields, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BulkEditGetFields):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
