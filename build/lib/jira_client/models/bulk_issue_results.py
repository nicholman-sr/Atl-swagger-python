# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BulkIssueResults(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'issue_errors': 'list[IssueError]',
        'issues': 'list[IssueBean]'
    }

    attribute_map = {
        'issue_errors': 'issueErrors',
        'issues': 'issues'
    }

    def __init__(self, issue_errors=None, issues=None):  # noqa: E501
        """BulkIssueResults - a model defined in Swagger"""  # noqa: E501
        self._issue_errors = None
        self._issues = None
        self.discriminator = None
        if issue_errors is not None:
            self.issue_errors = issue_errors
        if issues is not None:
            self.issues = issues

    @property
    def issue_errors(self):
        """Gets the issue_errors of this BulkIssueResults.  # noqa: E501

        When Jira can't return an issue enumerated in a request due to a retriable error or payload constraint, we'll return the respective issue ID with a corresponding error message. This list is empty when there are no errors Issues which aren't found or that the user doesn't have permission to view won't be returned in this list.  # noqa: E501

        :return: The issue_errors of this BulkIssueResults.  # noqa: E501
        :rtype: list[IssueError]
        """
        return self._issue_errors

    @issue_errors.setter
    def issue_errors(self, issue_errors):
        """Sets the issue_errors of this BulkIssueResults.

        When Jira can't return an issue enumerated in a request due to a retriable error or payload constraint, we'll return the respective issue ID with a corresponding error message. This list is empty when there are no errors Issues which aren't found or that the user doesn't have permission to view won't be returned in this list.  # noqa: E501

        :param issue_errors: The issue_errors of this BulkIssueResults.  # noqa: E501
        :type: list[IssueError]
        """

        self._issue_errors = issue_errors

    @property
    def issues(self):
        """Gets the issues of this BulkIssueResults.  # noqa: E501

        The list of issues.  # noqa: E501

        :return: The issues of this BulkIssueResults.  # noqa: E501
        :rtype: list[IssueBean]
        """
        return self._issues

    @issues.setter
    def issues(self, issues):
        """Sets the issues of this BulkIssueResults.

        The list of issues.  # noqa: E501

        :param issues: The issues of this BulkIssueResults.  # noqa: E501
        :type: list[IssueBean]
        """

        self._issues = issues

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BulkIssueResults, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BulkIssueResults):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
