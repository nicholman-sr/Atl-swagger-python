# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BulkPermissionsRequestBean(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'str',
        'global_permissions': 'list[str]',
        'project_permissions': 'list[BulkProjectPermissions]'
    }

    attribute_map = {
        'account_id': 'accountId',
        'global_permissions': 'globalPermissions',
        'project_permissions': 'projectPermissions'
    }

    def __init__(self, account_id=None, global_permissions=None, project_permissions=None):  # noqa: E501
        """BulkPermissionsRequestBean - a model defined in Swagger"""  # noqa: E501
        self._account_id = None
        self._global_permissions = None
        self._project_permissions = None
        self.discriminator = None
        if account_id is not None:
            self.account_id = account_id
        if global_permissions is not None:
            self.global_permissions = global_permissions
        if project_permissions is not None:
            self.project_permissions = project_permissions

    @property
    def account_id(self):
        """Gets the account_id of this BulkPermissionsRequestBean.  # noqa: E501

        The account ID of a user.  # noqa: E501

        :return: The account_id of this BulkPermissionsRequestBean.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this BulkPermissionsRequestBean.

        The account ID of a user.  # noqa: E501

        :param account_id: The account_id of this BulkPermissionsRequestBean.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def global_permissions(self):
        """Gets the global_permissions of this BulkPermissionsRequestBean.  # noqa: E501

        Global permissions to look up.  # noqa: E501

        :return: The global_permissions of this BulkPermissionsRequestBean.  # noqa: E501
        :rtype: list[str]
        """
        return self._global_permissions

    @global_permissions.setter
    def global_permissions(self, global_permissions):
        """Sets the global_permissions of this BulkPermissionsRequestBean.

        Global permissions to look up.  # noqa: E501

        :param global_permissions: The global_permissions of this BulkPermissionsRequestBean.  # noqa: E501
        :type: list[str]
        """

        self._global_permissions = global_permissions

    @property
    def project_permissions(self):
        """Gets the project_permissions of this BulkPermissionsRequestBean.  # noqa: E501

        Project permissions with associated projects and issues to look up.  # noqa: E501

        :return: The project_permissions of this BulkPermissionsRequestBean.  # noqa: E501
        :rtype: list[BulkProjectPermissions]
        """
        return self._project_permissions

    @project_permissions.setter
    def project_permissions(self, project_permissions):
        """Sets the project_permissions of this BulkPermissionsRequestBean.

        Project permissions with associated projects and issues to look up.  # noqa: E501

        :param project_permissions: The project_permissions of this BulkPermissionsRequestBean.  # noqa: E501
        :type: list[BulkProjectPermissions]
        """

        self._project_permissions = project_permissions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BulkPermissionsRequestBean, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BulkPermissionsRequestBean):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
