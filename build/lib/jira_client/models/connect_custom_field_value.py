# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ConnectCustomFieldValue(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'field_id': 'int',
        'issue_id': 'int',
        'number': 'float',
        'option_id': 'str',
        'rich_text': 'str',
        'string': 'str',
        'text': 'str'
    }

    attribute_map = {
        'type': '_type',
        'field_id': 'fieldID',
        'issue_id': 'issueID',
        'number': 'number',
        'option_id': 'optionID',
        'rich_text': 'richText',
        'string': 'string',
        'text': 'text'
    }

    def __init__(self, type=None, field_id=None, issue_id=None, number=None, option_id=None, rich_text=None, string=None, text=None):  # noqa: E501
        """ConnectCustomFieldValue - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._field_id = None
        self._issue_id = None
        self._number = None
        self._option_id = None
        self._rich_text = None
        self._string = None
        self._text = None
        self.discriminator = None
        self.type = type
        self.field_id = field_id
        self.issue_id = issue_id
        if number is not None:
            self.number = number
        if option_id is not None:
            self.option_id = option_id
        if rich_text is not None:
            self.rich_text = rich_text
        if string is not None:
            self.string = string
        if text is not None:
            self.text = text

    @property
    def type(self):
        """Gets the type of this ConnectCustomFieldValue.  # noqa: E501

        The type of custom field.  # noqa: E501

        :return: The type of this ConnectCustomFieldValue.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ConnectCustomFieldValue.

        The type of custom field.  # noqa: E501

        :param type: The type of this ConnectCustomFieldValue.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["StringIssueField", "NumberIssueField", "RichTextIssueField", "SingleSelectIssueField", "MultiSelectIssueField", "TextIssueField"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def field_id(self):
        """Gets the field_id of this ConnectCustomFieldValue.  # noqa: E501

        The custom field ID.  # noqa: E501

        :return: The field_id of this ConnectCustomFieldValue.  # noqa: E501
        :rtype: int
        """
        return self._field_id

    @field_id.setter
    def field_id(self, field_id):
        """Sets the field_id of this ConnectCustomFieldValue.

        The custom field ID.  # noqa: E501

        :param field_id: The field_id of this ConnectCustomFieldValue.  # noqa: E501
        :type: int
        """
        if field_id is None:
            raise ValueError("Invalid value for `field_id`, must not be `None`")  # noqa: E501

        self._field_id = field_id

    @property
    def issue_id(self):
        """Gets the issue_id of this ConnectCustomFieldValue.  # noqa: E501

        The issue ID.  # noqa: E501

        :return: The issue_id of this ConnectCustomFieldValue.  # noqa: E501
        :rtype: int
        """
        return self._issue_id

    @issue_id.setter
    def issue_id(self, issue_id):
        """Sets the issue_id of this ConnectCustomFieldValue.

        The issue ID.  # noqa: E501

        :param issue_id: The issue_id of this ConnectCustomFieldValue.  # noqa: E501
        :type: int
        """
        if issue_id is None:
            raise ValueError("Invalid value for `issue_id`, must not be `None`")  # noqa: E501

        self._issue_id = issue_id

    @property
    def number(self):
        """Gets the number of this ConnectCustomFieldValue.  # noqa: E501

        The value of number type custom field when `_type` is `NumberIssueField`.  # noqa: E501

        :return: The number of this ConnectCustomFieldValue.  # noqa: E501
        :rtype: float
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this ConnectCustomFieldValue.

        The value of number type custom field when `_type` is `NumberIssueField`.  # noqa: E501

        :param number: The number of this ConnectCustomFieldValue.  # noqa: E501
        :type: float
        """

        self._number = number

    @property
    def option_id(self):
        """Gets the option_id of this ConnectCustomFieldValue.  # noqa: E501

        The value of single select and multiselect custom field type when `_type` is `SingleSelectIssueField` or `MultiSelectIssueField`.  # noqa: E501

        :return: The option_id of this ConnectCustomFieldValue.  # noqa: E501
        :rtype: str
        """
        return self._option_id

    @option_id.setter
    def option_id(self, option_id):
        """Sets the option_id of this ConnectCustomFieldValue.

        The value of single select and multiselect custom field type when `_type` is `SingleSelectIssueField` or `MultiSelectIssueField`.  # noqa: E501

        :param option_id: The option_id of this ConnectCustomFieldValue.  # noqa: E501
        :type: str
        """

        self._option_id = option_id

    @property
    def rich_text(self):
        """Gets the rich_text of this ConnectCustomFieldValue.  # noqa: E501

        The value of richText type custom field when `_type` is `RichTextIssueField`.  # noqa: E501

        :return: The rich_text of this ConnectCustomFieldValue.  # noqa: E501
        :rtype: str
        """
        return self._rich_text

    @rich_text.setter
    def rich_text(self, rich_text):
        """Sets the rich_text of this ConnectCustomFieldValue.

        The value of richText type custom field when `_type` is `RichTextIssueField`.  # noqa: E501

        :param rich_text: The rich_text of this ConnectCustomFieldValue.  # noqa: E501
        :type: str
        """

        self._rich_text = rich_text

    @property
    def string(self):
        """Gets the string of this ConnectCustomFieldValue.  # noqa: E501

        The value of string type custom field when `_type` is `StringIssueField`.  # noqa: E501

        :return: The string of this ConnectCustomFieldValue.  # noqa: E501
        :rtype: str
        """
        return self._string

    @string.setter
    def string(self, string):
        """Sets the string of this ConnectCustomFieldValue.

        The value of string type custom field when `_type` is `StringIssueField`.  # noqa: E501

        :param string: The string of this ConnectCustomFieldValue.  # noqa: E501
        :type: str
        """

        self._string = string

    @property
    def text(self):
        """Gets the text of this ConnectCustomFieldValue.  # noqa: E501

        The value of of text custom field type when `_type` is `TextIssueField`.  # noqa: E501

        :return: The text of this ConnectCustomFieldValue.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this ConnectCustomFieldValue.

        The value of of text custom field type when `_type` is `TextIssueField`.  # noqa: E501

        :param text: The text of this ConnectCustomFieldValue.  # noqa: E501
        :type: str
        """

        self._text = text

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConnectCustomFieldValue, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConnectCustomFieldValue):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
