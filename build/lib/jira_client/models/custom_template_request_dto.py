# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CustomTemplateRequestDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'boards': 'BoardsPayload',
        'field': 'FieldCapabilityPayload',
        'issue_type': 'IssueTypeProjectCreatePayload',
        'notification': 'NotificationSchemePayload',
        'permission_scheme': 'PermissionPayloadDTO',
        'project': 'ProjectPayload',
        'role': 'RolesCapabilityPayload',
        'scope': 'ScopePayload',
        'security': 'SecuritySchemePayload',
        'workflow': 'WorkflowCapabilityPayload'
    }

    attribute_map = {
        'boards': 'boards',
        'field': 'field',
        'issue_type': 'issueType',
        'notification': 'notification',
        'permission_scheme': 'permissionScheme',
        'project': 'project',
        'role': 'role',
        'scope': 'scope',
        'security': 'security',
        'workflow': 'workflow'
    }

    def __init__(self, boards=None, field=None, issue_type=None, notification=None, permission_scheme=None, project=None, role=None, scope=None, security=None, workflow=None):  # noqa: E501
        """CustomTemplateRequestDTO - a model defined in Swagger"""  # noqa: E501
        self._boards = None
        self._field = None
        self._issue_type = None
        self._notification = None
        self._permission_scheme = None
        self._project = None
        self._role = None
        self._scope = None
        self._security = None
        self._workflow = None
        self.discriminator = None
        if boards is not None:
            self.boards = boards
        if field is not None:
            self.field = field
        if issue_type is not None:
            self.issue_type = issue_type
        if notification is not None:
            self.notification = notification
        if permission_scheme is not None:
            self.permission_scheme = permission_scheme
        if project is not None:
            self.project = project
        if role is not None:
            self.role = role
        if scope is not None:
            self.scope = scope
        if security is not None:
            self.security = security
        if workflow is not None:
            self.workflow = workflow

    @property
    def boards(self):
        """Gets the boards of this CustomTemplateRequestDTO.  # noqa: E501


        :return: The boards of this CustomTemplateRequestDTO.  # noqa: E501
        :rtype: BoardsPayload
        """
        return self._boards

    @boards.setter
    def boards(self, boards):
        """Sets the boards of this CustomTemplateRequestDTO.


        :param boards: The boards of this CustomTemplateRequestDTO.  # noqa: E501
        :type: BoardsPayload
        """

        self._boards = boards

    @property
    def field(self):
        """Gets the field of this CustomTemplateRequestDTO.  # noqa: E501


        :return: The field of this CustomTemplateRequestDTO.  # noqa: E501
        :rtype: FieldCapabilityPayload
        """
        return self._field

    @field.setter
    def field(self, field):
        """Sets the field of this CustomTemplateRequestDTO.


        :param field: The field of this CustomTemplateRequestDTO.  # noqa: E501
        :type: FieldCapabilityPayload
        """

        self._field = field

    @property
    def issue_type(self):
        """Gets the issue_type of this CustomTemplateRequestDTO.  # noqa: E501


        :return: The issue_type of this CustomTemplateRequestDTO.  # noqa: E501
        :rtype: IssueTypeProjectCreatePayload
        """
        return self._issue_type

    @issue_type.setter
    def issue_type(self, issue_type):
        """Sets the issue_type of this CustomTemplateRequestDTO.


        :param issue_type: The issue_type of this CustomTemplateRequestDTO.  # noqa: E501
        :type: IssueTypeProjectCreatePayload
        """

        self._issue_type = issue_type

    @property
    def notification(self):
        """Gets the notification of this CustomTemplateRequestDTO.  # noqa: E501


        :return: The notification of this CustomTemplateRequestDTO.  # noqa: E501
        :rtype: NotificationSchemePayload
        """
        return self._notification

    @notification.setter
    def notification(self, notification):
        """Sets the notification of this CustomTemplateRequestDTO.


        :param notification: The notification of this CustomTemplateRequestDTO.  # noqa: E501
        :type: NotificationSchemePayload
        """

        self._notification = notification

    @property
    def permission_scheme(self):
        """Gets the permission_scheme of this CustomTemplateRequestDTO.  # noqa: E501


        :return: The permission_scheme of this CustomTemplateRequestDTO.  # noqa: E501
        :rtype: PermissionPayloadDTO
        """
        return self._permission_scheme

    @permission_scheme.setter
    def permission_scheme(self, permission_scheme):
        """Sets the permission_scheme of this CustomTemplateRequestDTO.


        :param permission_scheme: The permission_scheme of this CustomTemplateRequestDTO.  # noqa: E501
        :type: PermissionPayloadDTO
        """

        self._permission_scheme = permission_scheme

    @property
    def project(self):
        """Gets the project of this CustomTemplateRequestDTO.  # noqa: E501


        :return: The project of this CustomTemplateRequestDTO.  # noqa: E501
        :rtype: ProjectPayload
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this CustomTemplateRequestDTO.


        :param project: The project of this CustomTemplateRequestDTO.  # noqa: E501
        :type: ProjectPayload
        """

        self._project = project

    @property
    def role(self):
        """Gets the role of this CustomTemplateRequestDTO.  # noqa: E501


        :return: The role of this CustomTemplateRequestDTO.  # noqa: E501
        :rtype: RolesCapabilityPayload
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this CustomTemplateRequestDTO.


        :param role: The role of this CustomTemplateRequestDTO.  # noqa: E501
        :type: RolesCapabilityPayload
        """

        self._role = role

    @property
    def scope(self):
        """Gets the scope of this CustomTemplateRequestDTO.  # noqa: E501


        :return: The scope of this CustomTemplateRequestDTO.  # noqa: E501
        :rtype: ScopePayload
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this CustomTemplateRequestDTO.


        :param scope: The scope of this CustomTemplateRequestDTO.  # noqa: E501
        :type: ScopePayload
        """

        self._scope = scope

    @property
    def security(self):
        """Gets the security of this CustomTemplateRequestDTO.  # noqa: E501


        :return: The security of this CustomTemplateRequestDTO.  # noqa: E501
        :rtype: SecuritySchemePayload
        """
        return self._security

    @security.setter
    def security(self, security):
        """Sets the security of this CustomTemplateRequestDTO.


        :param security: The security of this CustomTemplateRequestDTO.  # noqa: E501
        :type: SecuritySchemePayload
        """

        self._security = security

    @property
    def workflow(self):
        """Gets the workflow of this CustomTemplateRequestDTO.  # noqa: E501


        :return: The workflow of this CustomTemplateRequestDTO.  # noqa: E501
        :rtype: WorkflowCapabilityPayload
        """
        return self._workflow

    @workflow.setter
    def workflow(self, workflow):
        """Sets the workflow of this CustomTemplateRequestDTO.


        :param workflow: The workflow of this CustomTemplateRequestDTO.  # noqa: E501
        :type: WorkflowCapabilityPayload
        """

        self._workflow = workflow

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CustomTemplateRequestDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomTemplateRequestDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
