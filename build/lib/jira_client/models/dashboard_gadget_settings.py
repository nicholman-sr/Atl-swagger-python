# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DashboardGadgetSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'color': 'str',
        'ignore_uri_and_module_key_validation': 'bool',
        'module_key': 'str',
        'position': 'AllOfDashboardGadgetSettingsPosition',
        'title': 'str',
        'uri': 'str'
    }

    attribute_map = {
        'color': 'color',
        'ignore_uri_and_module_key_validation': 'ignoreUriAndModuleKeyValidation',
        'module_key': 'moduleKey',
        'position': 'position',
        'title': 'title',
        'uri': 'uri'
    }

    def __init__(self, color=None, ignore_uri_and_module_key_validation=None, module_key=None, position=None, title=None, uri=None):  # noqa: E501
        """DashboardGadgetSettings - a model defined in Swagger"""  # noqa: E501
        self._color = None
        self._ignore_uri_and_module_key_validation = None
        self._module_key = None
        self._position = None
        self._title = None
        self._uri = None
        self.discriminator = None
        if color is not None:
            self.color = color
        if ignore_uri_and_module_key_validation is not None:
            self.ignore_uri_and_module_key_validation = ignore_uri_and_module_key_validation
        if module_key is not None:
            self.module_key = module_key
        if position is not None:
            self.position = position
        if title is not None:
            self.title = title
        if uri is not None:
            self.uri = uri

    @property
    def color(self):
        """Gets the color of this DashboardGadgetSettings.  # noqa: E501

        The color of the gadget. Should be one of `blue`, `red`, `yellow`, `green`, `cyan`, `purple`, `gray`, or `white`.  # noqa: E501

        :return: The color of this DashboardGadgetSettings.  # noqa: E501
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this DashboardGadgetSettings.

        The color of the gadget. Should be one of `blue`, `red`, `yellow`, `green`, `cyan`, `purple`, `gray`, or `white`.  # noqa: E501

        :param color: The color of this DashboardGadgetSettings.  # noqa: E501
        :type: str
        """

        self._color = color

    @property
    def ignore_uri_and_module_key_validation(self):
        """Gets the ignore_uri_and_module_key_validation of this DashboardGadgetSettings.  # noqa: E501

        Whether to ignore the validation of module key and URI. For example, when a gadget is created that is a part of an application that isn't installed.  # noqa: E501

        :return: The ignore_uri_and_module_key_validation of this DashboardGadgetSettings.  # noqa: E501
        :rtype: bool
        """
        return self._ignore_uri_and_module_key_validation

    @ignore_uri_and_module_key_validation.setter
    def ignore_uri_and_module_key_validation(self, ignore_uri_and_module_key_validation):
        """Sets the ignore_uri_and_module_key_validation of this DashboardGadgetSettings.

        Whether to ignore the validation of module key and URI. For example, when a gadget is created that is a part of an application that isn't installed.  # noqa: E501

        :param ignore_uri_and_module_key_validation: The ignore_uri_and_module_key_validation of this DashboardGadgetSettings.  # noqa: E501
        :type: bool
        """

        self._ignore_uri_and_module_key_validation = ignore_uri_and_module_key_validation

    @property
    def module_key(self):
        """Gets the module_key of this DashboardGadgetSettings.  # noqa: E501

        The module key of the gadget type. Can't be provided with `uri`.  # noqa: E501

        :return: The module_key of this DashboardGadgetSettings.  # noqa: E501
        :rtype: str
        """
        return self._module_key

    @module_key.setter
    def module_key(self, module_key):
        """Sets the module_key of this DashboardGadgetSettings.

        The module key of the gadget type. Can't be provided with `uri`.  # noqa: E501

        :param module_key: The module_key of this DashboardGadgetSettings.  # noqa: E501
        :type: str
        """

        self._module_key = module_key

    @property
    def position(self):
        """Gets the position of this DashboardGadgetSettings.  # noqa: E501

        The position of the gadget. When the gadget is placed into the position, other gadgets in the same column are moved down to accommodate it.  # noqa: E501

        :return: The position of this DashboardGadgetSettings.  # noqa: E501
        :rtype: AllOfDashboardGadgetSettingsPosition
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this DashboardGadgetSettings.

        The position of the gadget. When the gadget is placed into the position, other gadgets in the same column are moved down to accommodate it.  # noqa: E501

        :param position: The position of this DashboardGadgetSettings.  # noqa: E501
        :type: AllOfDashboardGadgetSettingsPosition
        """

        self._position = position

    @property
    def title(self):
        """Gets the title of this DashboardGadgetSettings.  # noqa: E501

        The title of the gadget.  # noqa: E501

        :return: The title of this DashboardGadgetSettings.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this DashboardGadgetSettings.

        The title of the gadget.  # noqa: E501

        :param title: The title of this DashboardGadgetSettings.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def uri(self):
        """Gets the uri of this DashboardGadgetSettings.  # noqa: E501

        The URI of the gadget type. Can't be provided with `moduleKey`.  # noqa: E501

        :return: The uri of this DashboardGadgetSettings.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this DashboardGadgetSettings.

        The URI of the gadget type. Can't be provided with `moduleKey`.  # noqa: E501

        :param uri: The uri of this DashboardGadgetSettings.  # noqa: E501
        :type: str
        """

        self._uri = uri

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DashboardGadgetSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DashboardGadgetSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
