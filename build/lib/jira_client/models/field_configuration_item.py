# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FieldConfigurationItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'id': 'str',
        'is_hidden': 'bool',
        'is_required': 'bool',
        'renderer': 'str'
    }

    attribute_map = {
        'description': 'description',
        'id': 'id',
        'is_hidden': 'isHidden',
        'is_required': 'isRequired',
        'renderer': 'renderer'
    }

    def __init__(self, description=None, id=None, is_hidden=None, is_required=None, renderer=None):  # noqa: E501
        """FieldConfigurationItem - a model defined in Swagger"""  # noqa: E501
        self._description = None
        self._id = None
        self._is_hidden = None
        self._is_required = None
        self._renderer = None
        self.discriminator = None
        if description is not None:
            self.description = description
        self.id = id
        if is_hidden is not None:
            self.is_hidden = is_hidden
        if is_required is not None:
            self.is_required = is_required
        if renderer is not None:
            self.renderer = renderer

    @property
    def description(self):
        """Gets the description of this FieldConfigurationItem.  # noqa: E501

        The description of the field within the field configuration.  # noqa: E501

        :return: The description of this FieldConfigurationItem.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this FieldConfigurationItem.

        The description of the field within the field configuration.  # noqa: E501

        :param description: The description of this FieldConfigurationItem.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this FieldConfigurationItem.  # noqa: E501

        The ID of the field within the field configuration.  # noqa: E501

        :return: The id of this FieldConfigurationItem.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FieldConfigurationItem.

        The ID of the field within the field configuration.  # noqa: E501

        :param id: The id of this FieldConfigurationItem.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def is_hidden(self):
        """Gets the is_hidden of this FieldConfigurationItem.  # noqa: E501

        Whether the field is hidden in the field configuration.  # noqa: E501

        :return: The is_hidden of this FieldConfigurationItem.  # noqa: E501
        :rtype: bool
        """
        return self._is_hidden

    @is_hidden.setter
    def is_hidden(self, is_hidden):
        """Sets the is_hidden of this FieldConfigurationItem.

        Whether the field is hidden in the field configuration.  # noqa: E501

        :param is_hidden: The is_hidden of this FieldConfigurationItem.  # noqa: E501
        :type: bool
        """

        self._is_hidden = is_hidden

    @property
    def is_required(self):
        """Gets the is_required of this FieldConfigurationItem.  # noqa: E501

        Whether the field is required in the field configuration.  # noqa: E501

        :return: The is_required of this FieldConfigurationItem.  # noqa: E501
        :rtype: bool
        """
        return self._is_required

    @is_required.setter
    def is_required(self, is_required):
        """Sets the is_required of this FieldConfigurationItem.

        Whether the field is required in the field configuration.  # noqa: E501

        :param is_required: The is_required of this FieldConfigurationItem.  # noqa: E501
        :type: bool
        """

        self._is_required = is_required

    @property
    def renderer(self):
        """Gets the renderer of this FieldConfigurationItem.  # noqa: E501

        The renderer type for the field within the field configuration.  # noqa: E501

        :return: The renderer of this FieldConfigurationItem.  # noqa: E501
        :rtype: str
        """
        return self._renderer

    @renderer.setter
    def renderer(self, renderer):
        """Sets the renderer of this FieldConfigurationItem.

        The renderer type for the field within the field configuration.  # noqa: E501

        :param renderer: The renderer of this FieldConfigurationItem.  # noqa: E501
        :type: str
        """

        self._renderer = renderer

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FieldConfigurationItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FieldConfigurationItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
