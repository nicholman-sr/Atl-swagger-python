# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FieldValueClause(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'field': 'JqlQueryField',
        'operand': 'JqlQueryClauseOperand',
        'operator': 'str'
    }

    attribute_map = {
        'field': 'field',
        'operand': 'operand',
        'operator': 'operator'
    }

    def __init__(self, field=None, operand=None, operator=None):  # noqa: E501
        """FieldValueClause - a model defined in Swagger"""  # noqa: E501
        self._field = None
        self._operand = None
        self._operator = None
        self.discriminator = None
        self.field = field
        self.operand = operand
        self.operator = operator

    @property
    def field(self):
        """Gets the field of this FieldValueClause.  # noqa: E501


        :return: The field of this FieldValueClause.  # noqa: E501
        :rtype: JqlQueryField
        """
        return self._field

    @field.setter
    def field(self, field):
        """Sets the field of this FieldValueClause.


        :param field: The field of this FieldValueClause.  # noqa: E501
        :type: JqlQueryField
        """
        if field is None:
            raise ValueError("Invalid value for `field`, must not be `None`")  # noqa: E501

        self._field = field

    @property
    def operand(self):
        """Gets the operand of this FieldValueClause.  # noqa: E501


        :return: The operand of this FieldValueClause.  # noqa: E501
        :rtype: JqlQueryClauseOperand
        """
        return self._operand

    @operand.setter
    def operand(self, operand):
        """Sets the operand of this FieldValueClause.


        :param operand: The operand of this FieldValueClause.  # noqa: E501
        :type: JqlQueryClauseOperand
        """
        if operand is None:
            raise ValueError("Invalid value for `operand`, must not be `None`")  # noqa: E501

        self._operand = operand

    @property
    def operator(self):
        """Gets the operator of this FieldValueClause.  # noqa: E501

        The operator between the field and operand.  # noqa: E501

        :return: The operator of this FieldValueClause.  # noqa: E501
        :rtype: str
        """
        return self._operator

    @operator.setter
    def operator(self, operator):
        """Sets the operator of this FieldValueClause.

        The operator between the field and operand.  # noqa: E501

        :param operator: The operator of this FieldValueClause.  # noqa: E501
        :type: str
        """
        if operator is None:
            raise ValueError("Invalid value for `operator`, must not be `None`")  # noqa: E501
        allowed_values = ["=", "!=", ">", "<", ">=", "<=", "in", "not in", "~", "~=", "is", "is not"]  # noqa: E501
        if operator not in allowed_values:
            raise ValueError(
                "Invalid value for `operator` ({0}), must be one of {1}"  # noqa: E501
                .format(operator, allowed_values)
            )

        self._operator = operator

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FieldValueClause, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FieldValueClause):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
