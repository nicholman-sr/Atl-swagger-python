# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GetSchedulingResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dependencies': 'str',
        'end_date': 'AllOfGetSchedulingResponseEndDate',
        'estimation': 'str',
        'inferred_dates': 'str',
        'start_date': 'AllOfGetSchedulingResponseStartDate'
    }

    attribute_map = {
        'dependencies': 'dependencies',
        'end_date': 'endDate',
        'estimation': 'estimation',
        'inferred_dates': 'inferredDates',
        'start_date': 'startDate'
    }

    def __init__(self, dependencies=None, end_date=None, estimation=None, inferred_dates=None, start_date=None):  # noqa: E501
        """GetSchedulingResponse - a model defined in Swagger"""  # noqa: E501
        self._dependencies = None
        self._end_date = None
        self._estimation = None
        self._inferred_dates = None
        self._start_date = None
        self.discriminator = None
        self.dependencies = dependencies
        self.end_date = end_date
        self.estimation = estimation
        self.inferred_dates = inferred_dates
        self.start_date = start_date

    @property
    def dependencies(self):
        """Gets the dependencies of this GetSchedulingResponse.  # noqa: E501

        The dependencies for the plan. This is \"Sequential\" or \"Concurrent\".  # noqa: E501

        :return: The dependencies of this GetSchedulingResponse.  # noqa: E501
        :rtype: str
        """
        return self._dependencies

    @dependencies.setter
    def dependencies(self, dependencies):
        """Sets the dependencies of this GetSchedulingResponse.

        The dependencies for the plan. This is \"Sequential\" or \"Concurrent\".  # noqa: E501

        :param dependencies: The dependencies of this GetSchedulingResponse.  # noqa: E501
        :type: str
        """
        if dependencies is None:
            raise ValueError("Invalid value for `dependencies`, must not be `None`")  # noqa: E501
        allowed_values = ["Sequential", "Concurrent"]  # noqa: E501
        if dependencies not in allowed_values:
            raise ValueError(
                "Invalid value for `dependencies` ({0}), must be one of {1}"  # noqa: E501
                .format(dependencies, allowed_values)
            )

        self._dependencies = dependencies

    @property
    def end_date(self):
        """Gets the end_date of this GetSchedulingResponse.  # noqa: E501

        The end date field for the plan.  # noqa: E501

        :return: The end_date of this GetSchedulingResponse.  # noqa: E501
        :rtype: AllOfGetSchedulingResponseEndDate
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this GetSchedulingResponse.

        The end date field for the plan.  # noqa: E501

        :param end_date: The end_date of this GetSchedulingResponse.  # noqa: E501
        :type: AllOfGetSchedulingResponseEndDate
        """
        if end_date is None:
            raise ValueError("Invalid value for `end_date`, must not be `None`")  # noqa: E501

        self._end_date = end_date

    @property
    def estimation(self):
        """Gets the estimation of this GetSchedulingResponse.  # noqa: E501

        The estimation unit for the plan. This is \"StoryPoints\", \"Days\" or \"Hours\".  # noqa: E501

        :return: The estimation of this GetSchedulingResponse.  # noqa: E501
        :rtype: str
        """
        return self._estimation

    @estimation.setter
    def estimation(self, estimation):
        """Sets the estimation of this GetSchedulingResponse.

        The estimation unit for the plan. This is \"StoryPoints\", \"Days\" or \"Hours\".  # noqa: E501

        :param estimation: The estimation of this GetSchedulingResponse.  # noqa: E501
        :type: str
        """
        if estimation is None:
            raise ValueError("Invalid value for `estimation`, must not be `None`")  # noqa: E501
        allowed_values = ["StoryPoints", "Days", "Hours"]  # noqa: E501
        if estimation not in allowed_values:
            raise ValueError(
                "Invalid value for `estimation` ({0}), must be one of {1}"  # noqa: E501
                .format(estimation, allowed_values)
            )

        self._estimation = estimation

    @property
    def inferred_dates(self):
        """Gets the inferred_dates of this GetSchedulingResponse.  # noqa: E501

        The inferred dates for the plan. This is \"None\", \"SprintDates\" or \"ReleaseDates\".  # noqa: E501

        :return: The inferred_dates of this GetSchedulingResponse.  # noqa: E501
        :rtype: str
        """
        return self._inferred_dates

    @inferred_dates.setter
    def inferred_dates(self, inferred_dates):
        """Sets the inferred_dates of this GetSchedulingResponse.

        The inferred dates for the plan. This is \"None\", \"SprintDates\" or \"ReleaseDates\".  # noqa: E501

        :param inferred_dates: The inferred_dates of this GetSchedulingResponse.  # noqa: E501
        :type: str
        """
        if inferred_dates is None:
            raise ValueError("Invalid value for `inferred_dates`, must not be `None`")  # noqa: E501
        allowed_values = ["None", "SprintDates", "ReleaseDates"]  # noqa: E501
        if inferred_dates not in allowed_values:
            raise ValueError(
                "Invalid value for `inferred_dates` ({0}), must be one of {1}"  # noqa: E501
                .format(inferred_dates, allowed_values)
            )

        self._inferred_dates = inferred_dates

    @property
    def start_date(self):
        """Gets the start_date of this GetSchedulingResponse.  # noqa: E501

        The start date field for the plan.  # noqa: E501

        :return: The start_date of this GetSchedulingResponse.  # noqa: E501
        :rtype: AllOfGetSchedulingResponseStartDate
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this GetSchedulingResponse.

        The start date field for the plan.  # noqa: E501

        :param start_date: The start_date of this GetSchedulingResponse.  # noqa: E501
        :type: AllOfGetSchedulingResponseStartDate
        """
        if start_date is None:
            raise ValueError("Invalid value for `start_date`, must not be `None`")  # noqa: E501

        self._start_date = start_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetSchedulingResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetSchedulingResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
