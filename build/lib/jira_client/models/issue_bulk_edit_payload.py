# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IssueBulkEditPayload(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'edited_fields_input': 'AllOfIssueBulkEditPayloadEditedFieldsInput',
        'selected_actions': 'list[str]',
        'selected_issue_ids_or_keys': 'list[str]',
        'send_bulk_notification': 'bool'
    }

    attribute_map = {
        'edited_fields_input': 'editedFieldsInput',
        'selected_actions': 'selectedActions',
        'selected_issue_ids_or_keys': 'selectedIssueIdsOrKeys',
        'send_bulk_notification': 'sendBulkNotification'
    }

    def __init__(self, edited_fields_input=None, selected_actions=None, selected_issue_ids_or_keys=None, send_bulk_notification=True):  # noqa: E501
        """IssueBulkEditPayload - a model defined in Swagger"""  # noqa: E501
        self._edited_fields_input = None
        self._selected_actions = None
        self._selected_issue_ids_or_keys = None
        self._send_bulk_notification = None
        self.discriminator = None
        self.edited_fields_input = edited_fields_input
        self.selected_actions = selected_actions
        self.selected_issue_ids_or_keys = selected_issue_ids_or_keys
        if send_bulk_notification is not None:
            self.send_bulk_notification = send_bulk_notification

    @property
    def edited_fields_input(self):
        """Gets the edited_fields_input of this IssueBulkEditPayload.  # noqa: E501

        An object that defines the values to be updated in specified fields of an issue. The structure and content of this parameter vary depending on the type of field being edited. Although the order is not significant, ensure that field IDs align with those in selectedActions.  # noqa: E501

        :return: The edited_fields_input of this IssueBulkEditPayload.  # noqa: E501
        :rtype: AllOfIssueBulkEditPayloadEditedFieldsInput
        """
        return self._edited_fields_input

    @edited_fields_input.setter
    def edited_fields_input(self, edited_fields_input):
        """Sets the edited_fields_input of this IssueBulkEditPayload.

        An object that defines the values to be updated in specified fields of an issue. The structure and content of this parameter vary depending on the type of field being edited. Although the order is not significant, ensure that field IDs align with those in selectedActions.  # noqa: E501

        :param edited_fields_input: The edited_fields_input of this IssueBulkEditPayload.  # noqa: E501
        :type: AllOfIssueBulkEditPayloadEditedFieldsInput
        """
        if edited_fields_input is None:
            raise ValueError("Invalid value for `edited_fields_input`, must not be `None`")  # noqa: E501

        self._edited_fields_input = edited_fields_input

    @property
    def selected_actions(self):
        """Gets the selected_actions of this IssueBulkEditPayload.  # noqa: E501

        List of all the field IDs that are to be bulk edited. Each field ID in this list corresponds to a specific attribute of an issue that is set to be modified in the bulk edit operation. The relevant field ID can be obtained by calling the Bulk Edit Get Fields REST API (documentation available on this page itself).  # noqa: E501

        :return: The selected_actions of this IssueBulkEditPayload.  # noqa: E501
        :rtype: list[str]
        """
        return self._selected_actions

    @selected_actions.setter
    def selected_actions(self, selected_actions):
        """Sets the selected_actions of this IssueBulkEditPayload.

        List of all the field IDs that are to be bulk edited. Each field ID in this list corresponds to a specific attribute of an issue that is set to be modified in the bulk edit operation. The relevant field ID can be obtained by calling the Bulk Edit Get Fields REST API (documentation available on this page itself).  # noqa: E501

        :param selected_actions: The selected_actions of this IssueBulkEditPayload.  # noqa: E501
        :type: list[str]
        """
        if selected_actions is None:
            raise ValueError("Invalid value for `selected_actions`, must not be `None`")  # noqa: E501

        self._selected_actions = selected_actions

    @property
    def selected_issue_ids_or_keys(self):
        """Gets the selected_issue_ids_or_keys of this IssueBulkEditPayload.  # noqa: E501

        List of issue IDs or keys which are to be bulk edited. These IDs or keys can be from different projects and issue types.  # noqa: E501

        :return: The selected_issue_ids_or_keys of this IssueBulkEditPayload.  # noqa: E501
        :rtype: list[str]
        """
        return self._selected_issue_ids_or_keys

    @selected_issue_ids_or_keys.setter
    def selected_issue_ids_or_keys(self, selected_issue_ids_or_keys):
        """Sets the selected_issue_ids_or_keys of this IssueBulkEditPayload.

        List of issue IDs or keys which are to be bulk edited. These IDs or keys can be from different projects and issue types.  # noqa: E501

        :param selected_issue_ids_or_keys: The selected_issue_ids_or_keys of this IssueBulkEditPayload.  # noqa: E501
        :type: list[str]
        """
        if selected_issue_ids_or_keys is None:
            raise ValueError("Invalid value for `selected_issue_ids_or_keys`, must not be `None`")  # noqa: E501

        self._selected_issue_ids_or_keys = selected_issue_ids_or_keys

    @property
    def send_bulk_notification(self):
        """Gets the send_bulk_notification of this IssueBulkEditPayload.  # noqa: E501

        A boolean value that indicates whether to send a bulk change notification when the issues are being edited.  If `true`, dispatches a bulk notification email to users about the updates.  # noqa: E501

        :return: The send_bulk_notification of this IssueBulkEditPayload.  # noqa: E501
        :rtype: bool
        """
        return self._send_bulk_notification

    @send_bulk_notification.setter
    def send_bulk_notification(self, send_bulk_notification):
        """Sets the send_bulk_notification of this IssueBulkEditPayload.

        A boolean value that indicates whether to send a bulk change notification when the issues are being edited.  If `true`, dispatches a bulk notification email to users about the updates.  # noqa: E501

        :param send_bulk_notification: The send_bulk_notification of this IssueBulkEditPayload.  # noqa: E501
        :type: bool
        """

        self._send_bulk_notification = send_bulk_notification

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IssueBulkEditPayload, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IssueBulkEditPayload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
