# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class JiraExpressionsComplexityBean(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'beans': 'AllOfJiraExpressionsComplexityBeanBeans',
        'expensive_operations': 'AllOfJiraExpressionsComplexityBeanExpensiveOperations',
        'primitive_values': 'AllOfJiraExpressionsComplexityBeanPrimitiveValues',
        'steps': 'AllOfJiraExpressionsComplexityBeanSteps'
    }

    attribute_map = {
        'beans': 'beans',
        'expensive_operations': 'expensiveOperations',
        'primitive_values': 'primitiveValues',
        'steps': 'steps'
    }

    def __init__(self, beans=None, expensive_operations=None, primitive_values=None, steps=None):  # noqa: E501
        """JiraExpressionsComplexityBean - a model defined in Swagger"""  # noqa: E501
        self._beans = None
        self._expensive_operations = None
        self._primitive_values = None
        self._steps = None
        self.discriminator = None
        self.beans = beans
        self.expensive_operations = expensive_operations
        self.primitive_values = primitive_values
        self.steps = steps

    @property
    def beans(self):
        """Gets the beans of this JiraExpressionsComplexityBean.  # noqa: E501

        The number of Jira REST API beans returned in the response.  # noqa: E501

        :return: The beans of this JiraExpressionsComplexityBean.  # noqa: E501
        :rtype: AllOfJiraExpressionsComplexityBeanBeans
        """
        return self._beans

    @beans.setter
    def beans(self, beans):
        """Sets the beans of this JiraExpressionsComplexityBean.

        The number of Jira REST API beans returned in the response.  # noqa: E501

        :param beans: The beans of this JiraExpressionsComplexityBean.  # noqa: E501
        :type: AllOfJiraExpressionsComplexityBeanBeans
        """
        if beans is None:
            raise ValueError("Invalid value for `beans`, must not be `None`")  # noqa: E501

        self._beans = beans

    @property
    def expensive_operations(self):
        """Gets the expensive_operations of this JiraExpressionsComplexityBean.  # noqa: E501

        The number of expensive operations executed while evaluating the expression. Expensive operations are those that load additional data, such as entity properties, comments, or custom fields.  # noqa: E501

        :return: The expensive_operations of this JiraExpressionsComplexityBean.  # noqa: E501
        :rtype: AllOfJiraExpressionsComplexityBeanExpensiveOperations
        """
        return self._expensive_operations

    @expensive_operations.setter
    def expensive_operations(self, expensive_operations):
        """Sets the expensive_operations of this JiraExpressionsComplexityBean.

        The number of expensive operations executed while evaluating the expression. Expensive operations are those that load additional data, such as entity properties, comments, or custom fields.  # noqa: E501

        :param expensive_operations: The expensive_operations of this JiraExpressionsComplexityBean.  # noqa: E501
        :type: AllOfJiraExpressionsComplexityBeanExpensiveOperations
        """
        if expensive_operations is None:
            raise ValueError("Invalid value for `expensive_operations`, must not be `None`")  # noqa: E501

        self._expensive_operations = expensive_operations

    @property
    def primitive_values(self):
        """Gets the primitive_values of this JiraExpressionsComplexityBean.  # noqa: E501

        The number of primitive values returned in the response.  # noqa: E501

        :return: The primitive_values of this JiraExpressionsComplexityBean.  # noqa: E501
        :rtype: AllOfJiraExpressionsComplexityBeanPrimitiveValues
        """
        return self._primitive_values

    @primitive_values.setter
    def primitive_values(self, primitive_values):
        """Sets the primitive_values of this JiraExpressionsComplexityBean.

        The number of primitive values returned in the response.  # noqa: E501

        :param primitive_values: The primitive_values of this JiraExpressionsComplexityBean.  # noqa: E501
        :type: AllOfJiraExpressionsComplexityBeanPrimitiveValues
        """
        if primitive_values is None:
            raise ValueError("Invalid value for `primitive_values`, must not be `None`")  # noqa: E501

        self._primitive_values = primitive_values

    @property
    def steps(self):
        """Gets the steps of this JiraExpressionsComplexityBean.  # noqa: E501

        The number of steps it took to evaluate the expression, where a step is a high-level operation performed by the expression. A step is an operation such as arithmetic, accessing a property, accessing a context variable, or calling a function.  # noqa: E501

        :return: The steps of this JiraExpressionsComplexityBean.  # noqa: E501
        :rtype: AllOfJiraExpressionsComplexityBeanSteps
        """
        return self._steps

    @steps.setter
    def steps(self, steps):
        """Sets the steps of this JiraExpressionsComplexityBean.

        The number of steps it took to evaluate the expression, where a step is a high-level operation performed by the expression. A step is an operation such as arithmetic, accessing a property, accessing a context variable, or calling a function.  # noqa: E501

        :param steps: The steps of this JiraExpressionsComplexityBean.  # noqa: E501
        :type: AllOfJiraExpressionsComplexityBeanSteps
        """
        if steps is None:
            raise ValueError("Invalid value for `steps`, must not be `None`")  # noqa: E501

        self._steps = steps

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JiraExpressionsComplexityBean, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JiraExpressionsComplexityBean):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
