# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class JiraIssueFields(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cascading_select_fields': 'list[JiraCascadingSelectField]',
        'clearable_number_fields': 'list[JiraNumberField]',
        'color_fields': 'list[JiraColorField]',
        'date_picker_fields': 'list[JiraDateField]',
        'date_time_picker_fields': 'list[JiraDateTimeField]',
        'issue_type': 'AllOfJiraIssueFieldsIssueType',
        'labels_fields': 'list[JiraLabelsField]',
        'multiple_group_picker_fields': 'list[JiraMultipleGroupPickerField]',
        'multiple_select_clearable_user_picker_fields': 'list[JiraMultipleSelectUserPickerField]',
        'multiple_select_fields': 'list[JiraMultipleSelectField]',
        'multiple_version_picker_fields': 'list[JiraMultipleVersionPickerField]',
        'multiselect_components': 'AllOfJiraIssueFieldsMultiselectComponents',
        'original_estimate_field': 'AllOfJiraIssueFieldsOriginalEstimateField',
        'priority': 'AllOfJiraIssueFieldsPriority',
        'rich_text_fields': 'list[JiraRichTextField]',
        'single_group_picker_fields': 'list[JiraSingleGroupPickerField]',
        'single_line_text_fields': 'list[JiraSingleLineTextField]',
        'single_select_clearable_user_picker_fields': 'list[JiraSingleSelectUserPickerField]',
        'single_select_fields': 'list[JiraSingleSelectField]',
        'single_version_picker_fields': 'list[JiraSingleVersionPickerField]',
        'status': 'JiraStatusInput',
        'time_tracking_field': 'AllOfJiraIssueFieldsTimeTrackingField',
        'url_fields': 'list[JiraUrlField]'
    }

    attribute_map = {
        'cascading_select_fields': 'cascadingSelectFields',
        'clearable_number_fields': 'clearableNumberFields',
        'color_fields': 'colorFields',
        'date_picker_fields': 'datePickerFields',
        'date_time_picker_fields': 'dateTimePickerFields',
        'issue_type': 'issueType',
        'labels_fields': 'labelsFields',
        'multiple_group_picker_fields': 'multipleGroupPickerFields',
        'multiple_select_clearable_user_picker_fields': 'multipleSelectClearableUserPickerFields',
        'multiple_select_fields': 'multipleSelectFields',
        'multiple_version_picker_fields': 'multipleVersionPickerFields',
        'multiselect_components': 'multiselectComponents',
        'original_estimate_field': 'originalEstimateField',
        'priority': 'priority',
        'rich_text_fields': 'richTextFields',
        'single_group_picker_fields': 'singleGroupPickerFields',
        'single_line_text_fields': 'singleLineTextFields',
        'single_select_clearable_user_picker_fields': 'singleSelectClearableUserPickerFields',
        'single_select_fields': 'singleSelectFields',
        'single_version_picker_fields': 'singleVersionPickerFields',
        'status': 'status',
        'time_tracking_field': 'timeTrackingField',
        'url_fields': 'urlFields'
    }

    def __init__(self, cascading_select_fields=None, clearable_number_fields=None, color_fields=None, date_picker_fields=None, date_time_picker_fields=None, issue_type=None, labels_fields=None, multiple_group_picker_fields=None, multiple_select_clearable_user_picker_fields=None, multiple_select_fields=None, multiple_version_picker_fields=None, multiselect_components=None, original_estimate_field=None, priority=None, rich_text_fields=None, single_group_picker_fields=None, single_line_text_fields=None, single_select_clearable_user_picker_fields=None, single_select_fields=None, single_version_picker_fields=None, status=None, time_tracking_field=None, url_fields=None):  # noqa: E501
        """JiraIssueFields - a model defined in Swagger"""  # noqa: E501
        self._cascading_select_fields = None
        self._clearable_number_fields = None
        self._color_fields = None
        self._date_picker_fields = None
        self._date_time_picker_fields = None
        self._issue_type = None
        self._labels_fields = None
        self._multiple_group_picker_fields = None
        self._multiple_select_clearable_user_picker_fields = None
        self._multiple_select_fields = None
        self._multiple_version_picker_fields = None
        self._multiselect_components = None
        self._original_estimate_field = None
        self._priority = None
        self._rich_text_fields = None
        self._single_group_picker_fields = None
        self._single_line_text_fields = None
        self._single_select_clearable_user_picker_fields = None
        self._single_select_fields = None
        self._single_version_picker_fields = None
        self._status = None
        self._time_tracking_field = None
        self._url_fields = None
        self.discriminator = None
        if cascading_select_fields is not None:
            self.cascading_select_fields = cascading_select_fields
        if clearable_number_fields is not None:
            self.clearable_number_fields = clearable_number_fields
        if color_fields is not None:
            self.color_fields = color_fields
        if date_picker_fields is not None:
            self.date_picker_fields = date_picker_fields
        if date_time_picker_fields is not None:
            self.date_time_picker_fields = date_time_picker_fields
        if issue_type is not None:
            self.issue_type = issue_type
        if labels_fields is not None:
            self.labels_fields = labels_fields
        if multiple_group_picker_fields is not None:
            self.multiple_group_picker_fields = multiple_group_picker_fields
        if multiple_select_clearable_user_picker_fields is not None:
            self.multiple_select_clearable_user_picker_fields = multiple_select_clearable_user_picker_fields
        if multiple_select_fields is not None:
            self.multiple_select_fields = multiple_select_fields
        if multiple_version_picker_fields is not None:
            self.multiple_version_picker_fields = multiple_version_picker_fields
        if multiselect_components is not None:
            self.multiselect_components = multiselect_components
        if original_estimate_field is not None:
            self.original_estimate_field = original_estimate_field
        if priority is not None:
            self.priority = priority
        if rich_text_fields is not None:
            self.rich_text_fields = rich_text_fields
        if single_group_picker_fields is not None:
            self.single_group_picker_fields = single_group_picker_fields
        if single_line_text_fields is not None:
            self.single_line_text_fields = single_line_text_fields
        if single_select_clearable_user_picker_fields is not None:
            self.single_select_clearable_user_picker_fields = single_select_clearable_user_picker_fields
        if single_select_fields is not None:
            self.single_select_fields = single_select_fields
        if single_version_picker_fields is not None:
            self.single_version_picker_fields = single_version_picker_fields
        if status is not None:
            self.status = status
        if time_tracking_field is not None:
            self.time_tracking_field = time_tracking_field
        if url_fields is not None:
            self.url_fields = url_fields

    @property
    def cascading_select_fields(self):
        """Gets the cascading_select_fields of this JiraIssueFields.  # noqa: E501

        Add or clear a cascading select field:   *  To add, specify `optionId` for both parent and child.  *  To clear the child, set its `optionId` to null.  *  To clear both, set the parent's `optionId` to null.  # noqa: E501

        :return: The cascading_select_fields of this JiraIssueFields.  # noqa: E501
        :rtype: list[JiraCascadingSelectField]
        """
        return self._cascading_select_fields

    @cascading_select_fields.setter
    def cascading_select_fields(self, cascading_select_fields):
        """Sets the cascading_select_fields of this JiraIssueFields.

        Add or clear a cascading select field:   *  To add, specify `optionId` for both parent and child.  *  To clear the child, set its `optionId` to null.  *  To clear both, set the parent's `optionId` to null.  # noqa: E501

        :param cascading_select_fields: The cascading_select_fields of this JiraIssueFields.  # noqa: E501
        :type: list[JiraCascadingSelectField]
        """

        self._cascading_select_fields = cascading_select_fields

    @property
    def clearable_number_fields(self):
        """Gets the clearable_number_fields of this JiraIssueFields.  # noqa: E501

        Add or clear a number field:   *  To add, specify a numeric `value`.  *  To clear, set `value` to `null`.  # noqa: E501

        :return: The clearable_number_fields of this JiraIssueFields.  # noqa: E501
        :rtype: list[JiraNumberField]
        """
        return self._clearable_number_fields

    @clearable_number_fields.setter
    def clearable_number_fields(self, clearable_number_fields):
        """Sets the clearable_number_fields of this JiraIssueFields.

        Add or clear a number field:   *  To add, specify a numeric `value`.  *  To clear, set `value` to `null`.  # noqa: E501

        :param clearable_number_fields: The clearable_number_fields of this JiraIssueFields.  # noqa: E501
        :type: list[JiraNumberField]
        """

        self._clearable_number_fields = clearable_number_fields

    @property
    def color_fields(self):
        """Gets the color_fields of this JiraIssueFields.  # noqa: E501

        Add or clear a color field:   *  To add, specify the color `name`. Available colors are: `purple`, `blue`, `green`, `teal`, `yellow`, `orange`, `grey`, `dark purple`, `dark blue`, `dark green`, `dark teal`, `dark yellow`, `dark orange`, `dark grey`.  *  To clear, set the color `name` to an empty string.  # noqa: E501

        :return: The color_fields of this JiraIssueFields.  # noqa: E501
        :rtype: list[JiraColorField]
        """
        return self._color_fields

    @color_fields.setter
    def color_fields(self, color_fields):
        """Sets the color_fields of this JiraIssueFields.

        Add or clear a color field:   *  To add, specify the color `name`. Available colors are: `purple`, `blue`, `green`, `teal`, `yellow`, `orange`, `grey`, `dark purple`, `dark blue`, `dark green`, `dark teal`, `dark yellow`, `dark orange`, `dark grey`.  *  To clear, set the color `name` to an empty string.  # noqa: E501

        :param color_fields: The color_fields of this JiraIssueFields.  # noqa: E501
        :type: list[JiraColorField]
        """

        self._color_fields = color_fields

    @property
    def date_picker_fields(self):
        """Gets the date_picker_fields of this JiraIssueFields.  # noqa: E501

        Add or clear a date picker field:   *  To add, specify the date in `d/mmm/yy` format or ISO format `dd-mm-yyyy`.  *  To clear, set `formattedDate` to an empty string.  # noqa: E501

        :return: The date_picker_fields of this JiraIssueFields.  # noqa: E501
        :rtype: list[JiraDateField]
        """
        return self._date_picker_fields

    @date_picker_fields.setter
    def date_picker_fields(self, date_picker_fields):
        """Sets the date_picker_fields of this JiraIssueFields.

        Add or clear a date picker field:   *  To add, specify the date in `d/mmm/yy` format or ISO format `dd-mm-yyyy`.  *  To clear, set `formattedDate` to an empty string.  # noqa: E501

        :param date_picker_fields: The date_picker_fields of this JiraIssueFields.  # noqa: E501
        :type: list[JiraDateField]
        """

        self._date_picker_fields = date_picker_fields

    @property
    def date_time_picker_fields(self):
        """Gets the date_time_picker_fields of this JiraIssueFields.  # noqa: E501

        Add or clear the planned start date and time:   *  To add, specify the date and time in ISO format for `formattedDateTime`.  *  To clear, provide an empty string for `formattedDateTime`.  # noqa: E501

        :return: The date_time_picker_fields of this JiraIssueFields.  # noqa: E501
        :rtype: list[JiraDateTimeField]
        """
        return self._date_time_picker_fields

    @date_time_picker_fields.setter
    def date_time_picker_fields(self, date_time_picker_fields):
        """Sets the date_time_picker_fields of this JiraIssueFields.

        Add or clear the planned start date and time:   *  To add, specify the date and time in ISO format for `formattedDateTime`.  *  To clear, provide an empty string for `formattedDateTime`.  # noqa: E501

        :param date_time_picker_fields: The date_time_picker_fields of this JiraIssueFields.  # noqa: E501
        :type: list[JiraDateTimeField]
        """

        self._date_time_picker_fields = date_time_picker_fields

    @property
    def issue_type(self):
        """Gets the issue_type of this JiraIssueFields.  # noqa: E501

        Set the issue type field by providing an `issueTypeId`.  # noqa: E501

        :return: The issue_type of this JiraIssueFields.  # noqa: E501
        :rtype: AllOfJiraIssueFieldsIssueType
        """
        return self._issue_type

    @issue_type.setter
    def issue_type(self, issue_type):
        """Sets the issue_type of this JiraIssueFields.

        Set the issue type field by providing an `issueTypeId`.  # noqa: E501

        :param issue_type: The issue_type of this JiraIssueFields.  # noqa: E501
        :type: AllOfJiraIssueFieldsIssueType
        """

        self._issue_type = issue_type

    @property
    def labels_fields(self):
        """Gets the labels_fields of this JiraIssueFields.  # noqa: E501

        Edit a labels field:   *  Options include `ADD`, `REPLACE`, `REMOVE`, or `REMOVE_ALL` for bulk edits.  *  To clear labels, use the `REMOVE_ALL` option with an empty `labels` array.  # noqa: E501

        :return: The labels_fields of this JiraIssueFields.  # noqa: E501
        :rtype: list[JiraLabelsField]
        """
        return self._labels_fields

    @labels_fields.setter
    def labels_fields(self, labels_fields):
        """Sets the labels_fields of this JiraIssueFields.

        Edit a labels field:   *  Options include `ADD`, `REPLACE`, `REMOVE`, or `REMOVE_ALL` for bulk edits.  *  To clear labels, use the `REMOVE_ALL` option with an empty `labels` array.  # noqa: E501

        :param labels_fields: The labels_fields of this JiraIssueFields.  # noqa: E501
        :type: list[JiraLabelsField]
        """

        self._labels_fields = labels_fields

    @property
    def multiple_group_picker_fields(self):
        """Gets the multiple_group_picker_fields of this JiraIssueFields.  # noqa: E501

        Add or clear a multi-group picker field:   *  To add groups, provide an array of groups with `groupName`s.  *  To clear all groups, use an empty `groups` array.  # noqa: E501

        :return: The multiple_group_picker_fields of this JiraIssueFields.  # noqa: E501
        :rtype: list[JiraMultipleGroupPickerField]
        """
        return self._multiple_group_picker_fields

    @multiple_group_picker_fields.setter
    def multiple_group_picker_fields(self, multiple_group_picker_fields):
        """Sets the multiple_group_picker_fields of this JiraIssueFields.

        Add or clear a multi-group picker field:   *  To add groups, provide an array of groups with `groupName`s.  *  To clear all groups, use an empty `groups` array.  # noqa: E501

        :param multiple_group_picker_fields: The multiple_group_picker_fields of this JiraIssueFields.  # noqa: E501
        :type: list[JiraMultipleGroupPickerField]
        """

        self._multiple_group_picker_fields = multiple_group_picker_fields

    @property
    def multiple_select_clearable_user_picker_fields(self):
        """Gets the multiple_select_clearable_user_picker_fields of this JiraIssueFields.  # noqa: E501

        Assign or unassign multiple users to/from a field:   *  To assign, provide an array of user `accountId`s.  *  To clear, set `users` to `null`.  # noqa: E501

        :return: The multiple_select_clearable_user_picker_fields of this JiraIssueFields.  # noqa: E501
        :rtype: list[JiraMultipleSelectUserPickerField]
        """
        return self._multiple_select_clearable_user_picker_fields

    @multiple_select_clearable_user_picker_fields.setter
    def multiple_select_clearable_user_picker_fields(self, multiple_select_clearable_user_picker_fields):
        """Sets the multiple_select_clearable_user_picker_fields of this JiraIssueFields.

        Assign or unassign multiple users to/from a field:   *  To assign, provide an array of user `accountId`s.  *  To clear, set `users` to `null`.  # noqa: E501

        :param multiple_select_clearable_user_picker_fields: The multiple_select_clearable_user_picker_fields of this JiraIssueFields.  # noqa: E501
        :type: list[JiraMultipleSelectUserPickerField]
        """

        self._multiple_select_clearable_user_picker_fields = multiple_select_clearable_user_picker_fields

    @property
    def multiple_select_fields(self):
        """Gets the multiple_select_fields of this JiraIssueFields.  # noqa: E501

        Add or clear a multi-select field:   *  To add, provide an array of options with `optionId`s.  *  To clear, use an empty `options` array.  # noqa: E501

        :return: The multiple_select_fields of this JiraIssueFields.  # noqa: E501
        :rtype: list[JiraMultipleSelectField]
        """
        return self._multiple_select_fields

    @multiple_select_fields.setter
    def multiple_select_fields(self, multiple_select_fields):
        """Sets the multiple_select_fields of this JiraIssueFields.

        Add or clear a multi-select field:   *  To add, provide an array of options with `optionId`s.  *  To clear, use an empty `options` array.  # noqa: E501

        :param multiple_select_fields: The multiple_select_fields of this JiraIssueFields.  # noqa: E501
        :type: list[JiraMultipleSelectField]
        """

        self._multiple_select_fields = multiple_select_fields

    @property
    def multiple_version_picker_fields(self):
        """Gets the multiple_version_picker_fields of this JiraIssueFields.  # noqa: E501

        Edit a multi-version picker field like Fix Versions/Affects Versions:   *  Options include `ADD`, `REPLACE`, `REMOVE`, or `REMOVE_ALL` for bulk edits.  *  To clear the field, use the `REMOVE_ALL` option with an empty `versions` array.  # noqa: E501

        :return: The multiple_version_picker_fields of this JiraIssueFields.  # noqa: E501
        :rtype: list[JiraMultipleVersionPickerField]
        """
        return self._multiple_version_picker_fields

    @multiple_version_picker_fields.setter
    def multiple_version_picker_fields(self, multiple_version_picker_fields):
        """Sets the multiple_version_picker_fields of this JiraIssueFields.

        Edit a multi-version picker field like Fix Versions/Affects Versions:   *  Options include `ADD`, `REPLACE`, `REMOVE`, or `REMOVE_ALL` for bulk edits.  *  To clear the field, use the `REMOVE_ALL` option with an empty `versions` array.  # noqa: E501

        :param multiple_version_picker_fields: The multiple_version_picker_fields of this JiraIssueFields.  # noqa: E501
        :type: list[JiraMultipleVersionPickerField]
        """

        self._multiple_version_picker_fields = multiple_version_picker_fields

    @property
    def multiselect_components(self):
        """Gets the multiselect_components of this JiraIssueFields.  # noqa: E501

        Edit a multi select components field:   *  Options include `ADD`, `REPLACE`, `REMOVE`, or `REMOVE_ALL` for bulk edits.  *  To clear, use the `REMOVE_ALL` option with an empty `components` array.  # noqa: E501

        :return: The multiselect_components of this JiraIssueFields.  # noqa: E501
        :rtype: AllOfJiraIssueFieldsMultiselectComponents
        """
        return self._multiselect_components

    @multiselect_components.setter
    def multiselect_components(self, multiselect_components):
        """Sets the multiselect_components of this JiraIssueFields.

        Edit a multi select components field:   *  Options include `ADD`, `REPLACE`, `REMOVE`, or `REMOVE_ALL` for bulk edits.  *  To clear, use the `REMOVE_ALL` option with an empty `components` array.  # noqa: E501

        :param multiselect_components: The multiselect_components of this JiraIssueFields.  # noqa: E501
        :type: AllOfJiraIssueFieldsMultiselectComponents
        """

        self._multiselect_components = multiselect_components

    @property
    def original_estimate_field(self):
        """Gets the original_estimate_field of this JiraIssueFields.  # noqa: E501

        Edit the original estimate field.  # noqa: E501

        :return: The original_estimate_field of this JiraIssueFields.  # noqa: E501
        :rtype: AllOfJiraIssueFieldsOriginalEstimateField
        """
        return self._original_estimate_field

    @original_estimate_field.setter
    def original_estimate_field(self, original_estimate_field):
        """Sets the original_estimate_field of this JiraIssueFields.

        Edit the original estimate field.  # noqa: E501

        :param original_estimate_field: The original_estimate_field of this JiraIssueFields.  # noqa: E501
        :type: AllOfJiraIssueFieldsOriginalEstimateField
        """

        self._original_estimate_field = original_estimate_field

    @property
    def priority(self):
        """Gets the priority of this JiraIssueFields.  # noqa: E501

        Set the priority of an issue by specifying a `priorityId`.  # noqa: E501

        :return: The priority of this JiraIssueFields.  # noqa: E501
        :rtype: AllOfJiraIssueFieldsPriority
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this JiraIssueFields.

        Set the priority of an issue by specifying a `priorityId`.  # noqa: E501

        :param priority: The priority of this JiraIssueFields.  # noqa: E501
        :type: AllOfJiraIssueFieldsPriority
        """

        self._priority = priority

    @property
    def rich_text_fields(self):
        """Gets the rich_text_fields of this JiraIssueFields.  # noqa: E501

        Add or clear a rich text field:   *  To add, provide `adfValue`. Note that rich text fields only support ADF values.  *  To clear, use an empty `richText` object.  For ADF format details, refer to: [Atlassian Document Format](https://developer.atlassian.com/cloud/jira/platform/apis/document/structure).  # noqa: E501

        :return: The rich_text_fields of this JiraIssueFields.  # noqa: E501
        :rtype: list[JiraRichTextField]
        """
        return self._rich_text_fields

    @rich_text_fields.setter
    def rich_text_fields(self, rich_text_fields):
        """Sets the rich_text_fields of this JiraIssueFields.

        Add or clear a rich text field:   *  To add, provide `adfValue`. Note that rich text fields only support ADF values.  *  To clear, use an empty `richText` object.  For ADF format details, refer to: [Atlassian Document Format](https://developer.atlassian.com/cloud/jira/platform/apis/document/structure).  # noqa: E501

        :param rich_text_fields: The rich_text_fields of this JiraIssueFields.  # noqa: E501
        :type: list[JiraRichTextField]
        """

        self._rich_text_fields = rich_text_fields

    @property
    def single_group_picker_fields(self):
        """Gets the single_group_picker_fields of this JiraIssueFields.  # noqa: E501

        Add or clear a single group picker field:   *  To add, specify the group with `groupName`.  *  To clear, set `groupName` to an empty string.  # noqa: E501

        :return: The single_group_picker_fields of this JiraIssueFields.  # noqa: E501
        :rtype: list[JiraSingleGroupPickerField]
        """
        return self._single_group_picker_fields

    @single_group_picker_fields.setter
    def single_group_picker_fields(self, single_group_picker_fields):
        """Sets the single_group_picker_fields of this JiraIssueFields.

        Add or clear a single group picker field:   *  To add, specify the group with `groupName`.  *  To clear, set `groupName` to an empty string.  # noqa: E501

        :param single_group_picker_fields: The single_group_picker_fields of this JiraIssueFields.  # noqa: E501
        :type: list[JiraSingleGroupPickerField]
        """

        self._single_group_picker_fields = single_group_picker_fields

    @property
    def single_line_text_fields(self):
        """Gets the single_line_text_fields of this JiraIssueFields.  # noqa: E501

        Add or clear a single line text field:   *  To add, provide the `text` value.  *  To clear, set `text` to an empty string.  # noqa: E501

        :return: The single_line_text_fields of this JiraIssueFields.  # noqa: E501
        :rtype: list[JiraSingleLineTextField]
        """
        return self._single_line_text_fields

    @single_line_text_fields.setter
    def single_line_text_fields(self, single_line_text_fields):
        """Sets the single_line_text_fields of this JiraIssueFields.

        Add or clear a single line text field:   *  To add, provide the `text` value.  *  To clear, set `text` to an empty string.  # noqa: E501

        :param single_line_text_fields: The single_line_text_fields of this JiraIssueFields.  # noqa: E501
        :type: list[JiraSingleLineTextField]
        """

        self._single_line_text_fields = single_line_text_fields

    @property
    def single_select_clearable_user_picker_fields(self):
        """Gets the single_select_clearable_user_picker_fields of this JiraIssueFields.  # noqa: E501

        Edit assignment for single select user picker fields like Assignee/Reporter:   *  To assign an issue, specify the user's `accountId`.  *  To unassign an issue, set `user` to `null`.  *  For automatic assignment, set `accountId` to `-1`.  # noqa: E501

        :return: The single_select_clearable_user_picker_fields of this JiraIssueFields.  # noqa: E501
        :rtype: list[JiraSingleSelectUserPickerField]
        """
        return self._single_select_clearable_user_picker_fields

    @single_select_clearable_user_picker_fields.setter
    def single_select_clearable_user_picker_fields(self, single_select_clearable_user_picker_fields):
        """Sets the single_select_clearable_user_picker_fields of this JiraIssueFields.

        Edit assignment for single select user picker fields like Assignee/Reporter:   *  To assign an issue, specify the user's `accountId`.  *  To unassign an issue, set `user` to `null`.  *  For automatic assignment, set `accountId` to `-1`.  # noqa: E501

        :param single_select_clearable_user_picker_fields: The single_select_clearable_user_picker_fields of this JiraIssueFields.  # noqa: E501
        :type: list[JiraSingleSelectUserPickerField]
        """

        self._single_select_clearable_user_picker_fields = single_select_clearable_user_picker_fields

    @property
    def single_select_fields(self):
        """Gets the single_select_fields of this JiraIssueFields.  # noqa: E501

        Add or clear a single select field:   *  To add, specify the option with an `optionId`.  *  To clear, pass an option with `optionId` as `-1`.  # noqa: E501

        :return: The single_select_fields of this JiraIssueFields.  # noqa: E501
        :rtype: list[JiraSingleSelectField]
        """
        return self._single_select_fields

    @single_select_fields.setter
    def single_select_fields(self, single_select_fields):
        """Sets the single_select_fields of this JiraIssueFields.

        Add or clear a single select field:   *  To add, specify the option with an `optionId`.  *  To clear, pass an option with `optionId` as `-1`.  # noqa: E501

        :param single_select_fields: The single_select_fields of this JiraIssueFields.  # noqa: E501
        :type: list[JiraSingleSelectField]
        """

        self._single_select_fields = single_select_fields

    @property
    def single_version_picker_fields(self):
        """Gets the single_version_picker_fields of this JiraIssueFields.  # noqa: E501

        Add or clear a single version picker field:   *  To add, specify the version with a `versionId`.  *  To clear, set `versionId` to `-1`.  # noqa: E501

        :return: The single_version_picker_fields of this JiraIssueFields.  # noqa: E501
        :rtype: list[JiraSingleVersionPickerField]
        """
        return self._single_version_picker_fields

    @single_version_picker_fields.setter
    def single_version_picker_fields(self, single_version_picker_fields):
        """Sets the single_version_picker_fields of this JiraIssueFields.

        Add or clear a single version picker field:   *  To add, specify the version with a `versionId`.  *  To clear, set `versionId` to `-1`.  # noqa: E501

        :param single_version_picker_fields: The single_version_picker_fields of this JiraIssueFields.  # noqa: E501
        :type: list[JiraSingleVersionPickerField]
        """

        self._single_version_picker_fields = single_version_picker_fields

    @property
    def status(self):
        """Gets the status of this JiraIssueFields.  # noqa: E501


        :return: The status of this JiraIssueFields.  # noqa: E501
        :rtype: JiraStatusInput
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this JiraIssueFields.


        :param status: The status of this JiraIssueFields.  # noqa: E501
        :type: JiraStatusInput
        """

        self._status = status

    @property
    def time_tracking_field(self):
        """Gets the time_tracking_field of this JiraIssueFields.  # noqa: E501

        Edit the time tracking field.  # noqa: E501

        :return: The time_tracking_field of this JiraIssueFields.  # noqa: E501
        :rtype: AllOfJiraIssueFieldsTimeTrackingField
        """
        return self._time_tracking_field

    @time_tracking_field.setter
    def time_tracking_field(self, time_tracking_field):
        """Sets the time_tracking_field of this JiraIssueFields.

        Edit the time tracking field.  # noqa: E501

        :param time_tracking_field: The time_tracking_field of this JiraIssueFields.  # noqa: E501
        :type: AllOfJiraIssueFieldsTimeTrackingField
        """

        self._time_tracking_field = time_tracking_field

    @property
    def url_fields(self):
        """Gets the url_fields of this JiraIssueFields.  # noqa: E501

        Add or clear a URL field:   *  To add, provide the `url` with the desired URL value.  *  To clear, set `url` to an empty string.  # noqa: E501

        :return: The url_fields of this JiraIssueFields.  # noqa: E501
        :rtype: list[JiraUrlField]
        """
        return self._url_fields

    @url_fields.setter
    def url_fields(self, url_fields):
        """Sets the url_fields of this JiraIssueFields.

        Add or clear a URL field:   *  To add, provide the `url` with the desired URL value.  *  To clear, set `url` to an empty string.  # noqa: E501

        :param url_fields: The url_fields of this JiraIssueFields.  # noqa: E501
        :type: list[JiraUrlField]
        """

        self._url_fields = url_fields

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JiraIssueFields, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JiraIssueFields):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
