# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class JqlFunctionPrecomputationBean(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'arguments': 'list[str]',
        'created': 'datetime',
        'error': 'str',
        'field': 'str',
        'function_key': 'str',
        'function_name': 'str',
        'id': 'str',
        'operator': 'str',
        'updated': 'datetime',
        'used': 'datetime',
        'value': 'str'
    }

    attribute_map = {
        'arguments': 'arguments',
        'created': 'created',
        'error': 'error',
        'field': 'field',
        'function_key': 'functionKey',
        'function_name': 'functionName',
        'id': 'id',
        'operator': 'operator',
        'updated': 'updated',
        'used': 'used',
        'value': 'value'
    }

    def __init__(self, arguments=None, created=None, error=None, field=None, function_key=None, function_name=None, id=None, operator=None, updated=None, used=None, value=None):  # noqa: E501
        """JqlFunctionPrecomputationBean - a model defined in Swagger"""  # noqa: E501
        self._arguments = None
        self._created = None
        self._error = None
        self._field = None
        self._function_key = None
        self._function_name = None
        self._id = None
        self._operator = None
        self._updated = None
        self._used = None
        self._value = None
        self.discriminator = None
        if arguments is not None:
            self.arguments = arguments
        if created is not None:
            self.created = created
        if error is not None:
            self.error = error
        if field is not None:
            self.field = field
        if function_key is not None:
            self.function_key = function_key
        if function_name is not None:
            self.function_name = function_name
        if id is not None:
            self.id = id
        if operator is not None:
            self.operator = operator
        if updated is not None:
            self.updated = updated
        if used is not None:
            self.used = used
        if value is not None:
            self.value = value

    @property
    def arguments(self):
        """Gets the arguments of this JqlFunctionPrecomputationBean.  # noqa: E501

        The list of arguments function was invoked with.  # noqa: E501

        :return: The arguments of this JqlFunctionPrecomputationBean.  # noqa: E501
        :rtype: list[str]
        """
        return self._arguments

    @arguments.setter
    def arguments(self, arguments):
        """Sets the arguments of this JqlFunctionPrecomputationBean.

        The list of arguments function was invoked with.  # noqa: E501

        :param arguments: The arguments of this JqlFunctionPrecomputationBean.  # noqa: E501
        :type: list[str]
        """

        self._arguments = arguments

    @property
    def created(self):
        """Gets the created of this JqlFunctionPrecomputationBean.  # noqa: E501

        The timestamp of the precomputation creation.  # noqa: E501

        :return: The created of this JqlFunctionPrecomputationBean.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this JqlFunctionPrecomputationBean.

        The timestamp of the precomputation creation.  # noqa: E501

        :param created: The created of this JqlFunctionPrecomputationBean.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def error(self):
        """Gets the error of this JqlFunctionPrecomputationBean.  # noqa: E501

        The error message to be displayed to the user.  # noqa: E501

        :return: The error of this JqlFunctionPrecomputationBean.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this JqlFunctionPrecomputationBean.

        The error message to be displayed to the user.  # noqa: E501

        :param error: The error of this JqlFunctionPrecomputationBean.  # noqa: E501
        :type: str
        """

        self._error = error

    @property
    def field(self):
        """Gets the field of this JqlFunctionPrecomputationBean.  # noqa: E501

        The field the function was executed against.  # noqa: E501

        :return: The field of this JqlFunctionPrecomputationBean.  # noqa: E501
        :rtype: str
        """
        return self._field

    @field.setter
    def field(self, field):
        """Sets the field of this JqlFunctionPrecomputationBean.

        The field the function was executed against.  # noqa: E501

        :param field: The field of this JqlFunctionPrecomputationBean.  # noqa: E501
        :type: str
        """

        self._field = field

    @property
    def function_key(self):
        """Gets the function_key of this JqlFunctionPrecomputationBean.  # noqa: E501

        The function key.  # noqa: E501

        :return: The function_key of this JqlFunctionPrecomputationBean.  # noqa: E501
        :rtype: str
        """
        return self._function_key

    @function_key.setter
    def function_key(self, function_key):
        """Sets the function_key of this JqlFunctionPrecomputationBean.

        The function key.  # noqa: E501

        :param function_key: The function_key of this JqlFunctionPrecomputationBean.  # noqa: E501
        :type: str
        """

        self._function_key = function_key

    @property
    def function_name(self):
        """Gets the function_name of this JqlFunctionPrecomputationBean.  # noqa: E501

        The name of the function.  # noqa: E501

        :return: The function_name of this JqlFunctionPrecomputationBean.  # noqa: E501
        :rtype: str
        """
        return self._function_name

    @function_name.setter
    def function_name(self, function_name):
        """Sets the function_name of this JqlFunctionPrecomputationBean.

        The name of the function.  # noqa: E501

        :param function_name: The function_name of this JqlFunctionPrecomputationBean.  # noqa: E501
        :type: str
        """

        self._function_name = function_name

    @property
    def id(self):
        """Gets the id of this JqlFunctionPrecomputationBean.  # noqa: E501

        The id of the precomputation.  # noqa: E501

        :return: The id of this JqlFunctionPrecomputationBean.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this JqlFunctionPrecomputationBean.

        The id of the precomputation.  # noqa: E501

        :param id: The id of this JqlFunctionPrecomputationBean.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def operator(self):
        """Gets the operator of this JqlFunctionPrecomputationBean.  # noqa: E501

        The operator in context of which function was executed.  # noqa: E501

        :return: The operator of this JqlFunctionPrecomputationBean.  # noqa: E501
        :rtype: str
        """
        return self._operator

    @operator.setter
    def operator(self, operator):
        """Sets the operator of this JqlFunctionPrecomputationBean.

        The operator in context of which function was executed.  # noqa: E501

        :param operator: The operator of this JqlFunctionPrecomputationBean.  # noqa: E501
        :type: str
        """

        self._operator = operator

    @property
    def updated(self):
        """Gets the updated of this JqlFunctionPrecomputationBean.  # noqa: E501

        The timestamp of the precomputation last update.  # noqa: E501

        :return: The updated of this JqlFunctionPrecomputationBean.  # noqa: E501
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this JqlFunctionPrecomputationBean.

        The timestamp of the precomputation last update.  # noqa: E501

        :param updated: The updated of this JqlFunctionPrecomputationBean.  # noqa: E501
        :type: datetime
        """

        self._updated = updated

    @property
    def used(self):
        """Gets the used of this JqlFunctionPrecomputationBean.  # noqa: E501

        The timestamp of the precomputation last usage.  # noqa: E501

        :return: The used of this JqlFunctionPrecomputationBean.  # noqa: E501
        :rtype: datetime
        """
        return self._used

    @used.setter
    def used(self, used):
        """Sets the used of this JqlFunctionPrecomputationBean.

        The timestamp of the precomputation last usage.  # noqa: E501

        :param used: The used of this JqlFunctionPrecomputationBean.  # noqa: E501
        :type: datetime
        """

        self._used = used

    @property
    def value(self):
        """Gets the value of this JqlFunctionPrecomputationBean.  # noqa: E501

        The JQL fragment stored as the precomputation.  # noqa: E501

        :return: The value of this JqlFunctionPrecomputationBean.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this JqlFunctionPrecomputationBean.

        The JQL fragment stored as the precomputation.  # noqa: E501

        :param value: The value of this JqlFunctionPrecomputationBean.  # noqa: E501
        :type: str
        """

        self._value = value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JqlFunctionPrecomputationBean, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JqlFunctionPrecomputationBean):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
