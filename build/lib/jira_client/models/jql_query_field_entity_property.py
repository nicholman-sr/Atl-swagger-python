# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class JqlQueryFieldEntityProperty(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'entity': 'str',
        'key': 'str',
        'path': 'str',
        'type': 'str'
    }

    attribute_map = {
        'entity': 'entity',
        'key': 'key',
        'path': 'path',
        'type': 'type'
    }

    def __init__(self, entity=None, key=None, path=None, type=None):  # noqa: E501
        """JqlQueryFieldEntityProperty - a model defined in Swagger"""  # noqa: E501
        self._entity = None
        self._key = None
        self._path = None
        self._type = None
        self.discriminator = None
        self.entity = entity
        self.key = key
        self.path = path
        if type is not None:
            self.type = type

    @property
    def entity(self):
        """Gets the entity of this JqlQueryFieldEntityProperty.  # noqa: E501

        The object on which the property is set.  # noqa: E501

        :return: The entity of this JqlQueryFieldEntityProperty.  # noqa: E501
        :rtype: str
        """
        return self._entity

    @entity.setter
    def entity(self, entity):
        """Sets the entity of this JqlQueryFieldEntityProperty.

        The object on which the property is set.  # noqa: E501

        :param entity: The entity of this JqlQueryFieldEntityProperty.  # noqa: E501
        :type: str
        """
        if entity is None:
            raise ValueError("Invalid value for `entity`, must not be `None`")  # noqa: E501

        self._entity = entity

    @property
    def key(self):
        """Gets the key of this JqlQueryFieldEntityProperty.  # noqa: E501

        The key of the property.  # noqa: E501

        :return: The key of this JqlQueryFieldEntityProperty.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this JqlQueryFieldEntityProperty.

        The key of the property.  # noqa: E501

        :param key: The key of this JqlQueryFieldEntityProperty.  # noqa: E501
        :type: str
        """
        if key is None:
            raise ValueError("Invalid value for `key`, must not be `None`")  # noqa: E501

        self._key = key

    @property
    def path(self):
        """Gets the path of this JqlQueryFieldEntityProperty.  # noqa: E501

        The path in the property value to query.  # noqa: E501

        :return: The path of this JqlQueryFieldEntityProperty.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this JqlQueryFieldEntityProperty.

        The path in the property value to query.  # noqa: E501

        :param path: The path of this JqlQueryFieldEntityProperty.  # noqa: E501
        :type: str
        """
        if path is None:
            raise ValueError("Invalid value for `path`, must not be `None`")  # noqa: E501

        self._path = path

    @property
    def type(self):
        """Gets the type of this JqlQueryFieldEntityProperty.  # noqa: E501

        The type of the property value extraction. Not available if the extraction for the property is not registered on the instance with the [Entity property](https://developer.atlassian.com/cloud/jira/platform/modules/entity-property/) module.  # noqa: E501

        :return: The type of this JqlQueryFieldEntityProperty.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this JqlQueryFieldEntityProperty.

        The type of the property value extraction. Not available if the extraction for the property is not registered on the instance with the [Entity property](https://developer.atlassian.com/cloud/jira/platform/modules/entity-property/) module.  # noqa: E501

        :param type: The type of this JqlQueryFieldEntityProperty.  # noqa: E501
        :type: str
        """
        allowed_values = ["number", "string", "text", "date", "user"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JqlQueryFieldEntityProperty, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JqlQueryFieldEntityProperty):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
