# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MappingsByWorkflow(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'new_workflow_id': 'str',
        'old_workflow_id': 'str',
        'status_mappings': 'list[WorkflowAssociationStatusMapping]'
    }

    attribute_map = {
        'new_workflow_id': 'newWorkflowId',
        'old_workflow_id': 'oldWorkflowId',
        'status_mappings': 'statusMappings'
    }

    def __init__(self, new_workflow_id=None, old_workflow_id=None, status_mappings=None):  # noqa: E501
        """MappingsByWorkflow - a model defined in Swagger"""  # noqa: E501
        self._new_workflow_id = None
        self._old_workflow_id = None
        self._status_mappings = None
        self.discriminator = None
        self.new_workflow_id = new_workflow_id
        self.old_workflow_id = old_workflow_id
        self.status_mappings = status_mappings

    @property
    def new_workflow_id(self):
        """Gets the new_workflow_id of this MappingsByWorkflow.  # noqa: E501

        The ID of the new workflow.  # noqa: E501

        :return: The new_workflow_id of this MappingsByWorkflow.  # noqa: E501
        :rtype: str
        """
        return self._new_workflow_id

    @new_workflow_id.setter
    def new_workflow_id(self, new_workflow_id):
        """Sets the new_workflow_id of this MappingsByWorkflow.

        The ID of the new workflow.  # noqa: E501

        :param new_workflow_id: The new_workflow_id of this MappingsByWorkflow.  # noqa: E501
        :type: str
        """
        if new_workflow_id is None:
            raise ValueError("Invalid value for `new_workflow_id`, must not be `None`")  # noqa: E501

        self._new_workflow_id = new_workflow_id

    @property
    def old_workflow_id(self):
        """Gets the old_workflow_id of this MappingsByWorkflow.  # noqa: E501

        The ID of the old workflow.  # noqa: E501

        :return: The old_workflow_id of this MappingsByWorkflow.  # noqa: E501
        :rtype: str
        """
        return self._old_workflow_id

    @old_workflow_id.setter
    def old_workflow_id(self, old_workflow_id):
        """Sets the old_workflow_id of this MappingsByWorkflow.

        The ID of the old workflow.  # noqa: E501

        :param old_workflow_id: The old_workflow_id of this MappingsByWorkflow.  # noqa: E501
        :type: str
        """
        if old_workflow_id is None:
            raise ValueError("Invalid value for `old_workflow_id`, must not be `None`")  # noqa: E501

        self._old_workflow_id = old_workflow_id

    @property
    def status_mappings(self):
        """Gets the status_mappings of this MappingsByWorkflow.  # noqa: E501

        The list of status mappings.  # noqa: E501

        :return: The status_mappings of this MappingsByWorkflow.  # noqa: E501
        :rtype: list[WorkflowAssociationStatusMapping]
        """
        return self._status_mappings

    @status_mappings.setter
    def status_mappings(self, status_mappings):
        """Sets the status_mappings of this MappingsByWorkflow.

        The list of status mappings.  # noqa: E501

        :param status_mappings: The status_mappings of this MappingsByWorkflow.  # noqa: E501
        :type: list[WorkflowAssociationStatusMapping]
        """
        if status_mappings is None:
            raise ValueError("Invalid value for `status_mappings`, must not be `None`")  # noqa: E501

        self._status_mappings = status_mappings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MappingsByWorkflow, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MappingsByWorkflow):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
