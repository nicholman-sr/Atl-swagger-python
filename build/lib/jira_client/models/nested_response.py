# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NestedResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'error_collection': 'ErrorCollection',
        'status': 'int',
        'warning_collection': 'WarningCollection'
    }

    attribute_map = {
        'error_collection': 'errorCollection',
        'status': 'status',
        'warning_collection': 'warningCollection'
    }

    def __init__(self, error_collection=None, status=None, warning_collection=None):  # noqa: E501
        """NestedResponse - a model defined in Swagger"""  # noqa: E501
        self._error_collection = None
        self._status = None
        self._warning_collection = None
        self.discriminator = None
        if error_collection is not None:
            self.error_collection = error_collection
        if status is not None:
            self.status = status
        if warning_collection is not None:
            self.warning_collection = warning_collection

    @property
    def error_collection(self):
        """Gets the error_collection of this NestedResponse.  # noqa: E501


        :return: The error_collection of this NestedResponse.  # noqa: E501
        :rtype: ErrorCollection
        """
        return self._error_collection

    @error_collection.setter
    def error_collection(self, error_collection):
        """Sets the error_collection of this NestedResponse.


        :param error_collection: The error_collection of this NestedResponse.  # noqa: E501
        :type: ErrorCollection
        """

        self._error_collection = error_collection

    @property
    def status(self):
        """Gets the status of this NestedResponse.  # noqa: E501


        :return: The status of this NestedResponse.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this NestedResponse.


        :param status: The status of this NestedResponse.  # noqa: E501
        :type: int
        """

        self._status = status

    @property
    def warning_collection(self):
        """Gets the warning_collection of this NestedResponse.  # noqa: E501


        :return: The warning_collection of this NestedResponse.  # noqa: E501
        :rtype: WarningCollection
        """
        return self._warning_collection

    @warning_collection.setter
    def warning_collection(self, warning_collection):
        """Sets the warning_collection of this NestedResponse.


        :param warning_collection: The warning_collection of this NestedResponse.  # noqa: E501
        :type: WarningCollection
        """

        self._warning_collection = warning_collection

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NestedResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NestedResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
