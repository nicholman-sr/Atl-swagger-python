# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Project(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'archived': 'bool',
        'archived_by': 'AllOfProjectArchivedBy',
        'archived_date': 'datetime',
        'assignee_type': 'str',
        'avatar_urls': 'AllOfProjectAvatarUrls',
        'components': 'list[ProjectComponent]',
        'deleted': 'bool',
        'deleted_by': 'AllOfProjectDeletedBy',
        'deleted_date': 'datetime',
        'description': 'str',
        'email': 'str',
        'expand': 'str',
        'favourite': 'bool',
        'id': 'str',
        'insight': 'AllOfProjectInsight',
        'is_private': 'bool',
        'issue_type_hierarchy': 'AllOfProjectIssueTypeHierarchy',
        'issue_types': 'list[IssueTypeDetails]',
        'key': 'str',
        'landing_page_info': 'AllOfProjectLandingPageInfo',
        'lead': 'AllOfProjectLead',
        'name': 'str',
        'permissions': 'AllOfProjectPermissions',
        'project_category': 'AllOfProjectProjectCategory',
        'project_type_key': 'str',
        'properties': 'dict(str, object)',
        'retention_till_date': 'datetime',
        'roles': 'dict(str, str)',
        '_self': 'str',
        'simplified': 'bool',
        'style': 'str',
        'url': 'str',
        'uuid': 'str',
        'versions': 'list[Version]'
    }

    attribute_map = {
        'archived': 'archived',
        'archived_by': 'archivedBy',
        'archived_date': 'archivedDate',
        'assignee_type': 'assigneeType',
        'avatar_urls': 'avatarUrls',
        'components': 'components',
        'deleted': 'deleted',
        'deleted_by': 'deletedBy',
        'deleted_date': 'deletedDate',
        'description': 'description',
        'email': 'email',
        'expand': 'expand',
        'favourite': 'favourite',
        'id': 'id',
        'insight': 'insight',
        'is_private': 'isPrivate',
        'issue_type_hierarchy': 'issueTypeHierarchy',
        'issue_types': 'issueTypes',
        'key': 'key',
        'landing_page_info': 'landingPageInfo',
        'lead': 'lead',
        'name': 'name',
        'permissions': 'permissions',
        'project_category': 'projectCategory',
        'project_type_key': 'projectTypeKey',
        'properties': 'properties',
        'retention_till_date': 'retentionTillDate',
        'roles': 'roles',
        '_self': 'self',
        'simplified': 'simplified',
        'style': 'style',
        'url': 'url',
        'uuid': 'uuid',
        'versions': 'versions'
    }

    def __init__(self, archived=None, archived_by=None, archived_date=None, assignee_type=None, avatar_urls=None, components=None, deleted=None, deleted_by=None, deleted_date=None, description=None, email=None, expand=None, favourite=None, id=None, insight=None, is_private=None, issue_type_hierarchy=None, issue_types=None, key=None, landing_page_info=None, lead=None, name=None, permissions=None, project_category=None, project_type_key=None, properties=None, retention_till_date=None, roles=None, _self=None, simplified=None, style=None, url=None, uuid=None, versions=None):  # noqa: E501
        """Project - a model defined in Swagger"""  # noqa: E501
        self._archived = None
        self._archived_by = None
        self._archived_date = None
        self._assignee_type = None
        self._avatar_urls = None
        self._components = None
        self._deleted = None
        self._deleted_by = None
        self._deleted_date = None
        self._description = None
        self._email = None
        self._expand = None
        self._favourite = None
        self._id = None
        self._insight = None
        self._is_private = None
        self._issue_type_hierarchy = None
        self._issue_types = None
        self._key = None
        self._landing_page_info = None
        self._lead = None
        self._name = None
        self._permissions = None
        self._project_category = None
        self._project_type_key = None
        self._properties = None
        self._retention_till_date = None
        self._roles = None
        self.__self = None
        self._simplified = None
        self._style = None
        self._url = None
        self._uuid = None
        self._versions = None
        self.discriminator = None
        if archived is not None:
            self.archived = archived
        if archived_by is not None:
            self.archived_by = archived_by
        if archived_date is not None:
            self.archived_date = archived_date
        if assignee_type is not None:
            self.assignee_type = assignee_type
        if avatar_urls is not None:
            self.avatar_urls = avatar_urls
        if components is not None:
            self.components = components
        if deleted is not None:
            self.deleted = deleted
        if deleted_by is not None:
            self.deleted_by = deleted_by
        if deleted_date is not None:
            self.deleted_date = deleted_date
        if description is not None:
            self.description = description
        if email is not None:
            self.email = email
        if expand is not None:
            self.expand = expand
        if favourite is not None:
            self.favourite = favourite
        if id is not None:
            self.id = id
        if insight is not None:
            self.insight = insight
        if is_private is not None:
            self.is_private = is_private
        if issue_type_hierarchy is not None:
            self.issue_type_hierarchy = issue_type_hierarchy
        if issue_types is not None:
            self.issue_types = issue_types
        if key is not None:
            self.key = key
        if landing_page_info is not None:
            self.landing_page_info = landing_page_info
        if lead is not None:
            self.lead = lead
        if name is not None:
            self.name = name
        if permissions is not None:
            self.permissions = permissions
        if project_category is not None:
            self.project_category = project_category
        if project_type_key is not None:
            self.project_type_key = project_type_key
        if properties is not None:
            self.properties = properties
        if retention_till_date is not None:
            self.retention_till_date = retention_till_date
        if roles is not None:
            self.roles = roles
        if _self is not None:
            self._self = _self
        if simplified is not None:
            self.simplified = simplified
        if style is not None:
            self.style = style
        if url is not None:
            self.url = url
        if uuid is not None:
            self.uuid = uuid
        if versions is not None:
            self.versions = versions

    @property
    def archived(self):
        """Gets the archived of this Project.  # noqa: E501

        Whether the project is archived.  # noqa: E501

        :return: The archived of this Project.  # noqa: E501
        :rtype: bool
        """
        return self._archived

    @archived.setter
    def archived(self, archived):
        """Sets the archived of this Project.

        Whether the project is archived.  # noqa: E501

        :param archived: The archived of this Project.  # noqa: E501
        :type: bool
        """

        self._archived = archived

    @property
    def archived_by(self):
        """Gets the archived_by of this Project.  # noqa: E501

        The user who archived the project.  # noqa: E501

        :return: The archived_by of this Project.  # noqa: E501
        :rtype: AllOfProjectArchivedBy
        """
        return self._archived_by

    @archived_by.setter
    def archived_by(self, archived_by):
        """Sets the archived_by of this Project.

        The user who archived the project.  # noqa: E501

        :param archived_by: The archived_by of this Project.  # noqa: E501
        :type: AllOfProjectArchivedBy
        """

        self._archived_by = archived_by

    @property
    def archived_date(self):
        """Gets the archived_date of this Project.  # noqa: E501

        The date when the project was archived.  # noqa: E501

        :return: The archived_date of this Project.  # noqa: E501
        :rtype: datetime
        """
        return self._archived_date

    @archived_date.setter
    def archived_date(self, archived_date):
        """Sets the archived_date of this Project.

        The date when the project was archived.  # noqa: E501

        :param archived_date: The archived_date of this Project.  # noqa: E501
        :type: datetime
        """

        self._archived_date = archived_date

    @property
    def assignee_type(self):
        """Gets the assignee_type of this Project.  # noqa: E501

        The default assignee when creating issues for this project.  # noqa: E501

        :return: The assignee_type of this Project.  # noqa: E501
        :rtype: str
        """
        return self._assignee_type

    @assignee_type.setter
    def assignee_type(self, assignee_type):
        """Sets the assignee_type of this Project.

        The default assignee when creating issues for this project.  # noqa: E501

        :param assignee_type: The assignee_type of this Project.  # noqa: E501
        :type: str
        """
        allowed_values = ["PROJECT_LEAD", "UNASSIGNED"]  # noqa: E501
        if assignee_type not in allowed_values:
            raise ValueError(
                "Invalid value for `assignee_type` ({0}), must be one of {1}"  # noqa: E501
                .format(assignee_type, allowed_values)
            )

        self._assignee_type = assignee_type

    @property
    def avatar_urls(self):
        """Gets the avatar_urls of this Project.  # noqa: E501

        The URLs of the project's avatars.  # noqa: E501

        :return: The avatar_urls of this Project.  # noqa: E501
        :rtype: AllOfProjectAvatarUrls
        """
        return self._avatar_urls

    @avatar_urls.setter
    def avatar_urls(self, avatar_urls):
        """Sets the avatar_urls of this Project.

        The URLs of the project's avatars.  # noqa: E501

        :param avatar_urls: The avatar_urls of this Project.  # noqa: E501
        :type: AllOfProjectAvatarUrls
        """

        self._avatar_urls = avatar_urls

    @property
    def components(self):
        """Gets the components of this Project.  # noqa: E501

        List of the components contained in the project.  # noqa: E501

        :return: The components of this Project.  # noqa: E501
        :rtype: list[ProjectComponent]
        """
        return self._components

    @components.setter
    def components(self, components):
        """Sets the components of this Project.

        List of the components contained in the project.  # noqa: E501

        :param components: The components of this Project.  # noqa: E501
        :type: list[ProjectComponent]
        """

        self._components = components

    @property
    def deleted(self):
        """Gets the deleted of this Project.  # noqa: E501

        Whether the project is marked as deleted.  # noqa: E501

        :return: The deleted of this Project.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this Project.

        Whether the project is marked as deleted.  # noqa: E501

        :param deleted: The deleted of this Project.  # noqa: E501
        :type: bool
        """

        self._deleted = deleted

    @property
    def deleted_by(self):
        """Gets the deleted_by of this Project.  # noqa: E501

        The user who marked the project as deleted.  # noqa: E501

        :return: The deleted_by of this Project.  # noqa: E501
        :rtype: AllOfProjectDeletedBy
        """
        return self._deleted_by

    @deleted_by.setter
    def deleted_by(self, deleted_by):
        """Sets the deleted_by of this Project.

        The user who marked the project as deleted.  # noqa: E501

        :param deleted_by: The deleted_by of this Project.  # noqa: E501
        :type: AllOfProjectDeletedBy
        """

        self._deleted_by = deleted_by

    @property
    def deleted_date(self):
        """Gets the deleted_date of this Project.  # noqa: E501

        The date when the project was marked as deleted.  # noqa: E501

        :return: The deleted_date of this Project.  # noqa: E501
        :rtype: datetime
        """
        return self._deleted_date

    @deleted_date.setter
    def deleted_date(self, deleted_date):
        """Sets the deleted_date of this Project.

        The date when the project was marked as deleted.  # noqa: E501

        :param deleted_date: The deleted_date of this Project.  # noqa: E501
        :type: datetime
        """

        self._deleted_date = deleted_date

    @property
    def description(self):
        """Gets the description of this Project.  # noqa: E501

        A brief description of the project.  # noqa: E501

        :return: The description of this Project.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Project.

        A brief description of the project.  # noqa: E501

        :param description: The description of this Project.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def email(self):
        """Gets the email of this Project.  # noqa: E501

        An email address associated with the project.  # noqa: E501

        :return: The email of this Project.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Project.

        An email address associated with the project.  # noqa: E501

        :param email: The email of this Project.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def expand(self):
        """Gets the expand of this Project.  # noqa: E501

        Expand options that include additional project details in the response.  # noqa: E501

        :return: The expand of this Project.  # noqa: E501
        :rtype: str
        """
        return self._expand

    @expand.setter
    def expand(self, expand):
        """Sets the expand of this Project.

        Expand options that include additional project details in the response.  # noqa: E501

        :param expand: The expand of this Project.  # noqa: E501
        :type: str
        """

        self._expand = expand

    @property
    def favourite(self):
        """Gets the favourite of this Project.  # noqa: E501

        Whether the project is selected as a favorite.  # noqa: E501

        :return: The favourite of this Project.  # noqa: E501
        :rtype: bool
        """
        return self._favourite

    @favourite.setter
    def favourite(self, favourite):
        """Sets the favourite of this Project.

        Whether the project is selected as a favorite.  # noqa: E501

        :param favourite: The favourite of this Project.  # noqa: E501
        :type: bool
        """

        self._favourite = favourite

    @property
    def id(self):
        """Gets the id of this Project.  # noqa: E501

        The ID of the project.  # noqa: E501

        :return: The id of this Project.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Project.

        The ID of the project.  # noqa: E501

        :param id: The id of this Project.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def insight(self):
        """Gets the insight of this Project.  # noqa: E501

        Insights about the project.  # noqa: E501

        :return: The insight of this Project.  # noqa: E501
        :rtype: AllOfProjectInsight
        """
        return self._insight

    @insight.setter
    def insight(self, insight):
        """Sets the insight of this Project.

        Insights about the project.  # noqa: E501

        :param insight: The insight of this Project.  # noqa: E501
        :type: AllOfProjectInsight
        """

        self._insight = insight

    @property
    def is_private(self):
        """Gets the is_private of this Project.  # noqa: E501

        Whether the project is private from the user's perspective. This means the user can't see the project or any associated issues.  # noqa: E501

        :return: The is_private of this Project.  # noqa: E501
        :rtype: bool
        """
        return self._is_private

    @is_private.setter
    def is_private(self, is_private):
        """Sets the is_private of this Project.

        Whether the project is private from the user's perspective. This means the user can't see the project or any associated issues.  # noqa: E501

        :param is_private: The is_private of this Project.  # noqa: E501
        :type: bool
        """

        self._is_private = is_private

    @property
    def issue_type_hierarchy(self):
        """Gets the issue_type_hierarchy of this Project.  # noqa: E501

        The issue type hierarchy for the project.  # noqa: E501

        :return: The issue_type_hierarchy of this Project.  # noqa: E501
        :rtype: AllOfProjectIssueTypeHierarchy
        """
        return self._issue_type_hierarchy

    @issue_type_hierarchy.setter
    def issue_type_hierarchy(self, issue_type_hierarchy):
        """Sets the issue_type_hierarchy of this Project.

        The issue type hierarchy for the project.  # noqa: E501

        :param issue_type_hierarchy: The issue_type_hierarchy of this Project.  # noqa: E501
        :type: AllOfProjectIssueTypeHierarchy
        """

        self._issue_type_hierarchy = issue_type_hierarchy

    @property
    def issue_types(self):
        """Gets the issue_types of this Project.  # noqa: E501

        List of the issue types available in the project.  # noqa: E501

        :return: The issue_types of this Project.  # noqa: E501
        :rtype: list[IssueTypeDetails]
        """
        return self._issue_types

    @issue_types.setter
    def issue_types(self, issue_types):
        """Sets the issue_types of this Project.

        List of the issue types available in the project.  # noqa: E501

        :param issue_types: The issue_types of this Project.  # noqa: E501
        :type: list[IssueTypeDetails]
        """

        self._issue_types = issue_types

    @property
    def key(self):
        """Gets the key of this Project.  # noqa: E501

        The key of the project.  # noqa: E501

        :return: The key of this Project.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this Project.

        The key of the project.  # noqa: E501

        :param key: The key of this Project.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def landing_page_info(self):
        """Gets the landing_page_info of this Project.  # noqa: E501

        The project landing page info.  # noqa: E501

        :return: The landing_page_info of this Project.  # noqa: E501
        :rtype: AllOfProjectLandingPageInfo
        """
        return self._landing_page_info

    @landing_page_info.setter
    def landing_page_info(self, landing_page_info):
        """Sets the landing_page_info of this Project.

        The project landing page info.  # noqa: E501

        :param landing_page_info: The landing_page_info of this Project.  # noqa: E501
        :type: AllOfProjectLandingPageInfo
        """

        self._landing_page_info = landing_page_info

    @property
    def lead(self):
        """Gets the lead of this Project.  # noqa: E501

        The username of the project lead.  # noqa: E501

        :return: The lead of this Project.  # noqa: E501
        :rtype: AllOfProjectLead
        """
        return self._lead

    @lead.setter
    def lead(self, lead):
        """Sets the lead of this Project.

        The username of the project lead.  # noqa: E501

        :param lead: The lead of this Project.  # noqa: E501
        :type: AllOfProjectLead
        """

        self._lead = lead

    @property
    def name(self):
        """Gets the name of this Project.  # noqa: E501

        The name of the project.  # noqa: E501

        :return: The name of this Project.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Project.

        The name of the project.  # noqa: E501

        :param name: The name of this Project.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def permissions(self):
        """Gets the permissions of this Project.  # noqa: E501

        User permissions on the project  # noqa: E501

        :return: The permissions of this Project.  # noqa: E501
        :rtype: AllOfProjectPermissions
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this Project.

        User permissions on the project  # noqa: E501

        :param permissions: The permissions of this Project.  # noqa: E501
        :type: AllOfProjectPermissions
        """

        self._permissions = permissions

    @property
    def project_category(self):
        """Gets the project_category of this Project.  # noqa: E501

        The category the project belongs to.  # noqa: E501

        :return: The project_category of this Project.  # noqa: E501
        :rtype: AllOfProjectProjectCategory
        """
        return self._project_category

    @project_category.setter
    def project_category(self, project_category):
        """Sets the project_category of this Project.

        The category the project belongs to.  # noqa: E501

        :param project_category: The project_category of this Project.  # noqa: E501
        :type: AllOfProjectProjectCategory
        """

        self._project_category = project_category

    @property
    def project_type_key(self):
        """Gets the project_type_key of this Project.  # noqa: E501

        The [project type](https://confluence.atlassian.com/x/GwiiLQ#Jiraapplicationsoverview-Productfeaturesandprojecttypes) of the project.  # noqa: E501

        :return: The project_type_key of this Project.  # noqa: E501
        :rtype: str
        """
        return self._project_type_key

    @project_type_key.setter
    def project_type_key(self, project_type_key):
        """Sets the project_type_key of this Project.

        The [project type](https://confluence.atlassian.com/x/GwiiLQ#Jiraapplicationsoverview-Productfeaturesandprojecttypes) of the project.  # noqa: E501

        :param project_type_key: The project_type_key of this Project.  # noqa: E501
        :type: str
        """
        allowed_values = ["software", "service_desk", "business"]  # noqa: E501
        if project_type_key not in allowed_values:
            raise ValueError(
                "Invalid value for `project_type_key` ({0}), must be one of {1}"  # noqa: E501
                .format(project_type_key, allowed_values)
            )

        self._project_type_key = project_type_key

    @property
    def properties(self):
        """Gets the properties of this Project.  # noqa: E501

        Map of project properties  # noqa: E501

        :return: The properties of this Project.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this Project.

        Map of project properties  # noqa: E501

        :param properties: The properties of this Project.  # noqa: E501
        :type: dict(str, object)
        """

        self._properties = properties

    @property
    def retention_till_date(self):
        """Gets the retention_till_date of this Project.  # noqa: E501

        The date when the project is deleted permanently.  # noqa: E501

        :return: The retention_till_date of this Project.  # noqa: E501
        :rtype: datetime
        """
        return self._retention_till_date

    @retention_till_date.setter
    def retention_till_date(self, retention_till_date):
        """Sets the retention_till_date of this Project.

        The date when the project is deleted permanently.  # noqa: E501

        :param retention_till_date: The retention_till_date of this Project.  # noqa: E501
        :type: datetime
        """

        self._retention_till_date = retention_till_date

    @property
    def roles(self):
        """Gets the roles of this Project.  # noqa: E501

        The name and self URL for each role defined in the project. For more information, see [Create project role](#api-rest-api-3-role-post).  # noqa: E501

        :return: The roles of this Project.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this Project.

        The name and self URL for each role defined in the project. For more information, see [Create project role](#api-rest-api-3-role-post).  # noqa: E501

        :param roles: The roles of this Project.  # noqa: E501
        :type: dict(str, str)
        """

        self._roles = roles

    @property
    def _self(self):
        """Gets the _self of this Project.  # noqa: E501

        The URL of the project details.  # noqa: E501

        :return: The _self of this Project.  # noqa: E501
        :rtype: str
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this Project.

        The URL of the project details.  # noqa: E501

        :param _self: The _self of this Project.  # noqa: E501
        :type: str
        """

        self.__self = _self

    @property
    def simplified(self):
        """Gets the simplified of this Project.  # noqa: E501

        Whether the project is simplified.  # noqa: E501

        :return: The simplified of this Project.  # noqa: E501
        :rtype: bool
        """
        return self._simplified

    @simplified.setter
    def simplified(self, simplified):
        """Sets the simplified of this Project.

        Whether the project is simplified.  # noqa: E501

        :param simplified: The simplified of this Project.  # noqa: E501
        :type: bool
        """

        self._simplified = simplified

    @property
    def style(self):
        """Gets the style of this Project.  # noqa: E501

        The type of the project.  # noqa: E501

        :return: The style of this Project.  # noqa: E501
        :rtype: str
        """
        return self._style

    @style.setter
    def style(self, style):
        """Sets the style of this Project.

        The type of the project.  # noqa: E501

        :param style: The style of this Project.  # noqa: E501
        :type: str
        """
        allowed_values = ["classic", "next-gen"]  # noqa: E501
        if style not in allowed_values:
            raise ValueError(
                "Invalid value for `style` ({0}), must be one of {1}"  # noqa: E501
                .format(style, allowed_values)
            )

        self._style = style

    @property
    def url(self):
        """Gets the url of this Project.  # noqa: E501

        A link to information about this project, such as project documentation.  # noqa: E501

        :return: The url of this Project.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Project.

        A link to information about this project, such as project documentation.  # noqa: E501

        :param url: The url of this Project.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def uuid(self):
        """Gets the uuid of this Project.  # noqa: E501

        Unique ID for next-gen projects.  # noqa: E501

        :return: The uuid of this Project.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this Project.

        Unique ID for next-gen projects.  # noqa: E501

        :param uuid: The uuid of this Project.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def versions(self):
        """Gets the versions of this Project.  # noqa: E501

        The versions defined in the project. For more information, see [Create version](#api-rest-api-3-version-post).  # noqa: E501

        :return: The versions of this Project.  # noqa: E501
        :rtype: list[Version]
        """
        return self._versions

    @versions.setter
    def versions(self, versions):
        """Sets the versions of this Project.

        The versions defined in the project. For more information, see [Create version](#api-rest-api-3-version-post).  # noqa: E501

        :param versions: The versions of this Project.  # noqa: E501
        :type: list[Version]
        """

        self._versions = versions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Project, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Project):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
