# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProjectLandingPageInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'attributes': 'dict(str, str)',
        'board_id': 'int',
        'board_name': 'str',
        'project_key': 'str',
        'project_type': 'str',
        'queue_category': 'str',
        'queue_id': 'int',
        'queue_name': 'str',
        'simple_board': 'bool',
        'simplified': 'bool',
        'url': 'str'
    }

    attribute_map = {
        'attributes': 'attributes',
        'board_id': 'boardId',
        'board_name': 'boardName',
        'project_key': 'projectKey',
        'project_type': 'projectType',
        'queue_category': 'queueCategory',
        'queue_id': 'queueId',
        'queue_name': 'queueName',
        'simple_board': 'simpleBoard',
        'simplified': 'simplified',
        'url': 'url'
    }

    def __init__(self, attributes=None, board_id=None, board_name=None, project_key=None, project_type=None, queue_category=None, queue_id=None, queue_name=None, simple_board=None, simplified=None, url=None):  # noqa: E501
        """ProjectLandingPageInfo - a model defined in Swagger"""  # noqa: E501
        self._attributes = None
        self._board_id = None
        self._board_name = None
        self._project_key = None
        self._project_type = None
        self._queue_category = None
        self._queue_id = None
        self._queue_name = None
        self._simple_board = None
        self._simplified = None
        self._url = None
        self.discriminator = None
        if attributes is not None:
            self.attributes = attributes
        if board_id is not None:
            self.board_id = board_id
        if board_name is not None:
            self.board_name = board_name
        if project_key is not None:
            self.project_key = project_key
        if project_type is not None:
            self.project_type = project_type
        if queue_category is not None:
            self.queue_category = queue_category
        if queue_id is not None:
            self.queue_id = queue_id
        if queue_name is not None:
            self.queue_name = queue_name
        if simple_board is not None:
            self.simple_board = simple_board
        if simplified is not None:
            self.simplified = simplified
        if url is not None:
            self.url = url

    @property
    def attributes(self):
        """Gets the attributes of this ProjectLandingPageInfo.  # noqa: E501


        :return: The attributes of this ProjectLandingPageInfo.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this ProjectLandingPageInfo.


        :param attributes: The attributes of this ProjectLandingPageInfo.  # noqa: E501
        :type: dict(str, str)
        """

        self._attributes = attributes

    @property
    def board_id(self):
        """Gets the board_id of this ProjectLandingPageInfo.  # noqa: E501


        :return: The board_id of this ProjectLandingPageInfo.  # noqa: E501
        :rtype: int
        """
        return self._board_id

    @board_id.setter
    def board_id(self, board_id):
        """Sets the board_id of this ProjectLandingPageInfo.


        :param board_id: The board_id of this ProjectLandingPageInfo.  # noqa: E501
        :type: int
        """

        self._board_id = board_id

    @property
    def board_name(self):
        """Gets the board_name of this ProjectLandingPageInfo.  # noqa: E501


        :return: The board_name of this ProjectLandingPageInfo.  # noqa: E501
        :rtype: str
        """
        return self._board_name

    @board_name.setter
    def board_name(self, board_name):
        """Sets the board_name of this ProjectLandingPageInfo.


        :param board_name: The board_name of this ProjectLandingPageInfo.  # noqa: E501
        :type: str
        """

        self._board_name = board_name

    @property
    def project_key(self):
        """Gets the project_key of this ProjectLandingPageInfo.  # noqa: E501


        :return: The project_key of this ProjectLandingPageInfo.  # noqa: E501
        :rtype: str
        """
        return self._project_key

    @project_key.setter
    def project_key(self, project_key):
        """Sets the project_key of this ProjectLandingPageInfo.


        :param project_key: The project_key of this ProjectLandingPageInfo.  # noqa: E501
        :type: str
        """

        self._project_key = project_key

    @property
    def project_type(self):
        """Gets the project_type of this ProjectLandingPageInfo.  # noqa: E501


        :return: The project_type of this ProjectLandingPageInfo.  # noqa: E501
        :rtype: str
        """
        return self._project_type

    @project_type.setter
    def project_type(self, project_type):
        """Sets the project_type of this ProjectLandingPageInfo.


        :param project_type: The project_type of this ProjectLandingPageInfo.  # noqa: E501
        :type: str
        """

        self._project_type = project_type

    @property
    def queue_category(self):
        """Gets the queue_category of this ProjectLandingPageInfo.  # noqa: E501


        :return: The queue_category of this ProjectLandingPageInfo.  # noqa: E501
        :rtype: str
        """
        return self._queue_category

    @queue_category.setter
    def queue_category(self, queue_category):
        """Sets the queue_category of this ProjectLandingPageInfo.


        :param queue_category: The queue_category of this ProjectLandingPageInfo.  # noqa: E501
        :type: str
        """

        self._queue_category = queue_category

    @property
    def queue_id(self):
        """Gets the queue_id of this ProjectLandingPageInfo.  # noqa: E501


        :return: The queue_id of this ProjectLandingPageInfo.  # noqa: E501
        :rtype: int
        """
        return self._queue_id

    @queue_id.setter
    def queue_id(self, queue_id):
        """Sets the queue_id of this ProjectLandingPageInfo.


        :param queue_id: The queue_id of this ProjectLandingPageInfo.  # noqa: E501
        :type: int
        """

        self._queue_id = queue_id

    @property
    def queue_name(self):
        """Gets the queue_name of this ProjectLandingPageInfo.  # noqa: E501


        :return: The queue_name of this ProjectLandingPageInfo.  # noqa: E501
        :rtype: str
        """
        return self._queue_name

    @queue_name.setter
    def queue_name(self, queue_name):
        """Sets the queue_name of this ProjectLandingPageInfo.


        :param queue_name: The queue_name of this ProjectLandingPageInfo.  # noqa: E501
        :type: str
        """

        self._queue_name = queue_name

    @property
    def simple_board(self):
        """Gets the simple_board of this ProjectLandingPageInfo.  # noqa: E501


        :return: The simple_board of this ProjectLandingPageInfo.  # noqa: E501
        :rtype: bool
        """
        return self._simple_board

    @simple_board.setter
    def simple_board(self, simple_board):
        """Sets the simple_board of this ProjectLandingPageInfo.


        :param simple_board: The simple_board of this ProjectLandingPageInfo.  # noqa: E501
        :type: bool
        """

        self._simple_board = simple_board

    @property
    def simplified(self):
        """Gets the simplified of this ProjectLandingPageInfo.  # noqa: E501


        :return: The simplified of this ProjectLandingPageInfo.  # noqa: E501
        :rtype: bool
        """
        return self._simplified

    @simplified.setter
    def simplified(self, simplified):
        """Sets the simplified of this ProjectLandingPageInfo.


        :param simplified: The simplified of this ProjectLandingPageInfo.  # noqa: E501
        :type: bool
        """

        self._simplified = simplified

    @property
    def url(self):
        """Gets the url of this ProjectLandingPageInfo.  # noqa: E501


        :return: The url of this ProjectLandingPageInfo.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ProjectLandingPageInfo.


        :param url: The url of this ProjectLandingPageInfo.  # noqa: E501
        :type: str
        """

        self._url = url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProjectLandingPageInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProjectLandingPageInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
