# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RoleActor(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'actor_group': 'AllOfRoleActorActorGroup',
        'actor_user': 'AllOfRoleActorActorUser',
        'avatar_url': 'str',
        'display_name': 'str',
        'id': 'int',
        'name': 'str',
        'type': 'str'
    }

    attribute_map = {
        'actor_group': 'actorGroup',
        'actor_user': 'actorUser',
        'avatar_url': 'avatarUrl',
        'display_name': 'displayName',
        'id': 'id',
        'name': 'name',
        'type': 'type'
    }

    def __init__(self, actor_group=None, actor_user=None, avatar_url=None, display_name=None, id=None, name=None, type=None):  # noqa: E501
        """RoleActor - a model defined in Swagger"""  # noqa: E501
        self._actor_group = None
        self._actor_user = None
        self._avatar_url = None
        self._display_name = None
        self._id = None
        self._name = None
        self._type = None
        self.discriminator = None
        if actor_group is not None:
            self.actor_group = actor_group
        if actor_user is not None:
            self.actor_user = actor_user
        if avatar_url is not None:
            self.avatar_url = avatar_url
        if display_name is not None:
            self.display_name = display_name
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if type is not None:
            self.type = type

    @property
    def actor_group(self):
        """Gets the actor_group of this RoleActor.  # noqa: E501


        :return: The actor_group of this RoleActor.  # noqa: E501
        :rtype: AllOfRoleActorActorGroup
        """
        return self._actor_group

    @actor_group.setter
    def actor_group(self, actor_group):
        """Sets the actor_group of this RoleActor.


        :param actor_group: The actor_group of this RoleActor.  # noqa: E501
        :type: AllOfRoleActorActorGroup
        """

        self._actor_group = actor_group

    @property
    def actor_user(self):
        """Gets the actor_user of this RoleActor.  # noqa: E501


        :return: The actor_user of this RoleActor.  # noqa: E501
        :rtype: AllOfRoleActorActorUser
        """
        return self._actor_user

    @actor_user.setter
    def actor_user(self, actor_user):
        """Sets the actor_user of this RoleActor.


        :param actor_user: The actor_user of this RoleActor.  # noqa: E501
        :type: AllOfRoleActorActorUser
        """

        self._actor_user = actor_user

    @property
    def avatar_url(self):
        """Gets the avatar_url of this RoleActor.  # noqa: E501

        The avatar of the role actor.  # noqa: E501

        :return: The avatar_url of this RoleActor.  # noqa: E501
        :rtype: str
        """
        return self._avatar_url

    @avatar_url.setter
    def avatar_url(self, avatar_url):
        """Sets the avatar_url of this RoleActor.

        The avatar of the role actor.  # noqa: E501

        :param avatar_url: The avatar_url of this RoleActor.  # noqa: E501
        :type: str
        """

        self._avatar_url = avatar_url

    @property
    def display_name(self):
        """Gets the display_name of this RoleActor.  # noqa: E501

        The display name of the role actor. For users, depending on the user’s privacy setting, this may return an alternative value for the user's name.  # noqa: E501

        :return: The display_name of this RoleActor.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this RoleActor.

        The display name of the role actor. For users, depending on the user’s privacy setting, this may return an alternative value for the user's name.  # noqa: E501

        :param display_name: The display_name of this RoleActor.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def id(self):
        """Gets the id of this RoleActor.  # noqa: E501

        The ID of the role actor.  # noqa: E501

        :return: The id of this RoleActor.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RoleActor.

        The ID of the role actor.  # noqa: E501

        :param id: The id of this RoleActor.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this RoleActor.  # noqa: E501

        This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.  # noqa: E501

        :return: The name of this RoleActor.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RoleActor.

        This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.  # noqa: E501

        :param name: The name of this RoleActor.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this RoleActor.  # noqa: E501

        The type of role actor.  # noqa: E501

        :return: The type of this RoleActor.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RoleActor.

        The type of role actor.  # noqa: E501

        :param type: The type of this RoleActor.  # noqa: E501
        :type: str
        """
        allowed_values = ["atlassian-group-role-actor", "atlassian-user-role-actor"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RoleActor, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RoleActor):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
