# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SimplifiedIssueTransition(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'to': 'AllOfSimplifiedIssueTransitionTo',
        'transition_id': 'int',
        'transition_name': 'str'
    }

    attribute_map = {
        'to': 'to',
        'transition_id': 'transitionId',
        'transition_name': 'transitionName'
    }

    def __init__(self, to=None, transition_id=None, transition_name=None):  # noqa: E501
        """SimplifiedIssueTransition - a model defined in Swagger"""  # noqa: E501
        self._to = None
        self._transition_id = None
        self._transition_name = None
        self.discriminator = None
        if to is not None:
            self.to = to
        if transition_id is not None:
            self.transition_id = transition_id
        if transition_name is not None:
            self.transition_name = transition_name

    @property
    def to(self):
        """Gets the to of this SimplifiedIssueTransition.  # noqa: E501

        The issue status change of the transition.  # noqa: E501

        :return: The to of this SimplifiedIssueTransition.  # noqa: E501
        :rtype: AllOfSimplifiedIssueTransitionTo
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this SimplifiedIssueTransition.

        The issue status change of the transition.  # noqa: E501

        :param to: The to of this SimplifiedIssueTransition.  # noqa: E501
        :type: AllOfSimplifiedIssueTransitionTo
        """

        self._to = to

    @property
    def transition_id(self):
        """Gets the transition_id of this SimplifiedIssueTransition.  # noqa: E501

        The unique ID of the transition.  # noqa: E501

        :return: The transition_id of this SimplifiedIssueTransition.  # noqa: E501
        :rtype: int
        """
        return self._transition_id

    @transition_id.setter
    def transition_id(self, transition_id):
        """Sets the transition_id of this SimplifiedIssueTransition.

        The unique ID of the transition.  # noqa: E501

        :param transition_id: The transition_id of this SimplifiedIssueTransition.  # noqa: E501
        :type: int
        """

        self._transition_id = transition_id

    @property
    def transition_name(self):
        """Gets the transition_name of this SimplifiedIssueTransition.  # noqa: E501

        The name of the transition.  # noqa: E501

        :return: The transition_name of this SimplifiedIssueTransition.  # noqa: E501
        :rtype: str
        """
        return self._transition_name

    @transition_name.setter
    def transition_name(self, transition_name):
        """Sets the transition_name of this SimplifiedIssueTransition.

        The name of the transition.  # noqa: E501

        :param transition_name: The transition_name of this SimplifiedIssueTransition.  # noqa: E501
        :type: str
        """

        self._transition_name = transition_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SimplifiedIssueTransition, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SimplifiedIssueTransition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
