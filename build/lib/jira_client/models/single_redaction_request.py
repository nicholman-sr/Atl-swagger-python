# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SingleRedactionRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'content_item': 'ContentItem',
        'external_id': 'str',
        'reason': 'str',
        'redaction_position': 'RedactionPosition'
    }

    attribute_map = {
        'content_item': 'contentItem',
        'external_id': 'externalId',
        'reason': 'reason',
        'redaction_position': 'redactionPosition'
    }

    def __init__(self, content_item=None, external_id=None, reason=None, redaction_position=None):  # noqa: E501
        """SingleRedactionRequest - a model defined in Swagger"""  # noqa: E501
        self._content_item = None
        self._external_id = None
        self._reason = None
        self._redaction_position = None
        self.discriminator = None
        self.content_item = content_item
        self.external_id = external_id
        self.reason = reason
        self.redaction_position = redaction_position

    @property
    def content_item(self):
        """Gets the content_item of this SingleRedactionRequest.  # noqa: E501


        :return: The content_item of this SingleRedactionRequest.  # noqa: E501
        :rtype: ContentItem
        """
        return self._content_item

    @content_item.setter
    def content_item(self, content_item):
        """Sets the content_item of this SingleRedactionRequest.


        :param content_item: The content_item of this SingleRedactionRequest.  # noqa: E501
        :type: ContentItem
        """
        if content_item is None:
            raise ValueError("Invalid value for `content_item`, must not be `None`")  # noqa: E501

        self._content_item = content_item

    @property
    def external_id(self):
        """Gets the external_id of this SingleRedactionRequest.  # noqa: E501

        Unique id for the redaction request; ID format should be of UUID  # noqa: E501

        :return: The external_id of this SingleRedactionRequest.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this SingleRedactionRequest.

        Unique id for the redaction request; ID format should be of UUID  # noqa: E501

        :param external_id: The external_id of this SingleRedactionRequest.  # noqa: E501
        :type: str
        """
        if external_id is None:
            raise ValueError("Invalid value for `external_id`, must not be `None`")  # noqa: E501

        self._external_id = external_id

    @property
    def reason(self):
        """Gets the reason of this SingleRedactionRequest.  # noqa: E501

        The reason why the content is being redacted  # noqa: E501

        :return: The reason of this SingleRedactionRequest.  # noqa: E501
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this SingleRedactionRequest.

        The reason why the content is being redacted  # noqa: E501

        :param reason: The reason of this SingleRedactionRequest.  # noqa: E501
        :type: str
        """
        if reason is None:
            raise ValueError("Invalid value for `reason`, must not be `None`")  # noqa: E501

        self._reason = reason

    @property
    def redaction_position(self):
        """Gets the redaction_position of this SingleRedactionRequest.  # noqa: E501


        :return: The redaction_position of this SingleRedactionRequest.  # noqa: E501
        :rtype: RedactionPosition
        """
        return self._redaction_position

    @redaction_position.setter
    def redaction_position(self, redaction_position):
        """Sets the redaction_position of this SingleRedactionRequest.


        :param redaction_position: The redaction_position of this SingleRedactionRequest.  # noqa: E501
        :type: RedactionPosition
        """
        if redaction_position is None:
            raise ValueError("Invalid value for `redaction_position`, must not be `None`")  # noqa: E501

        self._redaction_position = redaction_position

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SingleRedactionRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SingleRedactionRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
