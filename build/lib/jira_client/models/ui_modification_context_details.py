# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UiModificationContextDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'is_available': 'bool',
        'issue_type_id': 'str',
        'project_id': 'str',
        'view_type': 'str'
    }

    attribute_map = {
        'id': 'id',
        'is_available': 'isAvailable',
        'issue_type_id': 'issueTypeId',
        'project_id': 'projectId',
        'view_type': 'viewType'
    }

    def __init__(self, id=None, is_available=None, issue_type_id=None, project_id=None, view_type=None):  # noqa: E501
        """UiModificationContextDetails - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._is_available = None
        self._issue_type_id = None
        self._project_id = None
        self._view_type = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if is_available is not None:
            self.is_available = is_available
        if issue_type_id is not None:
            self.issue_type_id = issue_type_id
        if project_id is not None:
            self.project_id = project_id
        if view_type is not None:
            self.view_type = view_type

    @property
    def id(self):
        """Gets the id of this UiModificationContextDetails.  # noqa: E501

        The ID of the UI modification context.  # noqa: E501

        :return: The id of this UiModificationContextDetails.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UiModificationContextDetails.

        The ID of the UI modification context.  # noqa: E501

        :param id: The id of this UiModificationContextDetails.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def is_available(self):
        """Gets the is_available of this UiModificationContextDetails.  # noqa: E501

        Whether a context is available. For example, when a project is deleted the context becomes unavailable.  # noqa: E501

        :return: The is_available of this UiModificationContextDetails.  # noqa: E501
        :rtype: bool
        """
        return self._is_available

    @is_available.setter
    def is_available(self, is_available):
        """Sets the is_available of this UiModificationContextDetails.

        Whether a context is available. For example, when a project is deleted the context becomes unavailable.  # noqa: E501

        :param is_available: The is_available of this UiModificationContextDetails.  # noqa: E501
        :type: bool
        """

        self._is_available = is_available

    @property
    def issue_type_id(self):
        """Gets the issue_type_id of this UiModificationContextDetails.  # noqa: E501

        The issue type ID of the context. Null is treated as a wildcard, meaning the UI modification will be applied to all issue types. Each UI modification context can have a maximum of one wildcard.  # noqa: E501

        :return: The issue_type_id of this UiModificationContextDetails.  # noqa: E501
        :rtype: str
        """
        return self._issue_type_id

    @issue_type_id.setter
    def issue_type_id(self, issue_type_id):
        """Sets the issue_type_id of this UiModificationContextDetails.

        The issue type ID of the context. Null is treated as a wildcard, meaning the UI modification will be applied to all issue types. Each UI modification context can have a maximum of one wildcard.  # noqa: E501

        :param issue_type_id: The issue_type_id of this UiModificationContextDetails.  # noqa: E501
        :type: str
        """

        self._issue_type_id = issue_type_id

    @property
    def project_id(self):
        """Gets the project_id of this UiModificationContextDetails.  # noqa: E501

        The project ID of the context. Null is treated as a wildcard, meaning the UI modification will be applied to all projects. Each UI modification context can have a maximum of one wildcard.  # noqa: E501

        :return: The project_id of this UiModificationContextDetails.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this UiModificationContextDetails.

        The project ID of the context. Null is treated as a wildcard, meaning the UI modification will be applied to all projects. Each UI modification context can have a maximum of one wildcard.  # noqa: E501

        :param project_id: The project_id of this UiModificationContextDetails.  # noqa: E501
        :type: str
        """

        self._project_id = project_id

    @property
    def view_type(self):
        """Gets the view_type of this UiModificationContextDetails.  # noqa: E501

        The view type of the context. Only `GIC`(Global Issue Create), `IssueView` and `IssueTransition` are supported. Null is treated as a wildcard, meaning the UI modification will be applied to all view types. Each UI modification context can have a maximum of one wildcard.  # noqa: E501

        :return: The view_type of this UiModificationContextDetails.  # noqa: E501
        :rtype: str
        """
        return self._view_type

    @view_type.setter
    def view_type(self, view_type):
        """Sets the view_type of this UiModificationContextDetails.

        The view type of the context. Only `GIC`(Global Issue Create), `IssueView` and `IssueTransition` are supported. Null is treated as a wildcard, meaning the UI modification will be applied to all view types. Each UI modification context can have a maximum of one wildcard.  # noqa: E501

        :param view_type: The view_type of this UiModificationContextDetails.  # noqa: E501
        :type: str
        """
        allowed_values = ["GIC", "IssueView", "IssueTransition"]  # noqa: E501
        if view_type not in allowed_values:
            raise ValueError(
                "Invalid value for `view_type` ({0}), must be one of {1}"  # noqa: E501
                .format(view_type, allowed_values)
            )

        self._view_type = view_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UiModificationContextDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UiModificationContextDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
