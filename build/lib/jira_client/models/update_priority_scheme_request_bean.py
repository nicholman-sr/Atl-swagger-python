# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UpdatePrioritySchemeRequestBean(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'default_priority_id': 'int',
        'description': 'str',
        'mappings': 'AllOfUpdatePrioritySchemeRequestBeanMappings',
        'name': 'str',
        'priorities': 'AllOfUpdatePrioritySchemeRequestBeanPriorities',
        'projects': 'AllOfUpdatePrioritySchemeRequestBeanProjects'
    }

    attribute_map = {
        'default_priority_id': 'defaultPriorityId',
        'description': 'description',
        'mappings': 'mappings',
        'name': 'name',
        'priorities': 'priorities',
        'projects': 'projects'
    }

    def __init__(self, default_priority_id=None, description=None, mappings=None, name=None, priorities=None, projects=None):  # noqa: E501
        """UpdatePrioritySchemeRequestBean - a model defined in Swagger"""  # noqa: E501
        self._default_priority_id = None
        self._description = None
        self._mappings = None
        self._name = None
        self._priorities = None
        self._projects = None
        self.discriminator = None
        if default_priority_id is not None:
            self.default_priority_id = default_priority_id
        if description is not None:
            self.description = description
        if mappings is not None:
            self.mappings = mappings
        if name is not None:
            self.name = name
        if priorities is not None:
            self.priorities = priorities
        if projects is not None:
            self.projects = projects

    @property
    def default_priority_id(self):
        """Gets the default_priority_id of this UpdatePrioritySchemeRequestBean.  # noqa: E501

        The default priority of the scheme.  # noqa: E501

        :return: The default_priority_id of this UpdatePrioritySchemeRequestBean.  # noqa: E501
        :rtype: int
        """
        return self._default_priority_id

    @default_priority_id.setter
    def default_priority_id(self, default_priority_id):
        """Sets the default_priority_id of this UpdatePrioritySchemeRequestBean.

        The default priority of the scheme.  # noqa: E501

        :param default_priority_id: The default_priority_id of this UpdatePrioritySchemeRequestBean.  # noqa: E501
        :type: int
        """

        self._default_priority_id = default_priority_id

    @property
    def description(self):
        """Gets the description of this UpdatePrioritySchemeRequestBean.  # noqa: E501

        The description of the priority scheme.  # noqa: E501

        :return: The description of this UpdatePrioritySchemeRequestBean.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdatePrioritySchemeRequestBean.

        The description of the priority scheme.  # noqa: E501

        :param description: The description of this UpdatePrioritySchemeRequestBean.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def mappings(self):
        """Gets the mappings of this UpdatePrioritySchemeRequestBean.  # noqa: E501

        Instructions to migrate the priorities of issues.  `in` mappings are used to migrate the priorities of issues to priorities used within the priority scheme.  `out` mappings are used to migrate the priorities of issues to priorities not used within the priority scheme.   *  When **priorities** are **added** to the priority scheme, no mapping needs to be provided as the new priorities are not used by any issues.  *  When **priorities** are **removed** from the priority scheme, issues that are using those priorities must be migrated to new priorities used by the priority scheme.           *  An `in` mapping must be provided for each of these priorities.  *  When **projects** are **added** to the priority scheme, the priorities of issues in those projects might need to be migrated to new priorities used by the priority scheme. This can occur when the current scheme does not use all the priorities in the project(s)' priority scheme(s).           *  An `in` mapping must be provided for each of these priorities.  *  When **projects** are **removed** from the priority scheme, the priorities of issues in those projects might need to be migrated to new priorities within the **Default Priority Scheme** that are not used by the priority scheme. This can occur when the **Default Priority Scheme** does not use all the priorities within the current scheme.           *  An `out` mapping must be provided for each of these priorities.  For more information on `in` and `out` mappings, see the child properties documentation for the `PriorityMapping` object below.  # noqa: E501

        :return: The mappings of this UpdatePrioritySchemeRequestBean.  # noqa: E501
        :rtype: AllOfUpdatePrioritySchemeRequestBeanMappings
        """
        return self._mappings

    @mappings.setter
    def mappings(self, mappings):
        """Sets the mappings of this UpdatePrioritySchemeRequestBean.

        Instructions to migrate the priorities of issues.  `in` mappings are used to migrate the priorities of issues to priorities used within the priority scheme.  `out` mappings are used to migrate the priorities of issues to priorities not used within the priority scheme.   *  When **priorities** are **added** to the priority scheme, no mapping needs to be provided as the new priorities are not used by any issues.  *  When **priorities** are **removed** from the priority scheme, issues that are using those priorities must be migrated to new priorities used by the priority scheme.           *  An `in` mapping must be provided for each of these priorities.  *  When **projects** are **added** to the priority scheme, the priorities of issues in those projects might need to be migrated to new priorities used by the priority scheme. This can occur when the current scheme does not use all the priorities in the project(s)' priority scheme(s).           *  An `in` mapping must be provided for each of these priorities.  *  When **projects** are **removed** from the priority scheme, the priorities of issues in those projects might need to be migrated to new priorities within the **Default Priority Scheme** that are not used by the priority scheme. This can occur when the **Default Priority Scheme** does not use all the priorities within the current scheme.           *  An `out` mapping must be provided for each of these priorities.  For more information on `in` and `out` mappings, see the child properties documentation for the `PriorityMapping` object below.  # noqa: E501

        :param mappings: The mappings of this UpdatePrioritySchemeRequestBean.  # noqa: E501
        :type: AllOfUpdatePrioritySchemeRequestBeanMappings
        """

        self._mappings = mappings

    @property
    def name(self):
        """Gets the name of this UpdatePrioritySchemeRequestBean.  # noqa: E501

        The name of the priority scheme. Must be unique.  # noqa: E501

        :return: The name of this UpdatePrioritySchemeRequestBean.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdatePrioritySchemeRequestBean.

        The name of the priority scheme. Must be unique.  # noqa: E501

        :param name: The name of this UpdatePrioritySchemeRequestBean.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def priorities(self):
        """Gets the priorities of this UpdatePrioritySchemeRequestBean.  # noqa: E501

        The priorities in the scheme.  # noqa: E501

        :return: The priorities of this UpdatePrioritySchemeRequestBean.  # noqa: E501
        :rtype: AllOfUpdatePrioritySchemeRequestBeanPriorities
        """
        return self._priorities

    @priorities.setter
    def priorities(self, priorities):
        """Sets the priorities of this UpdatePrioritySchemeRequestBean.

        The priorities in the scheme.  # noqa: E501

        :param priorities: The priorities of this UpdatePrioritySchemeRequestBean.  # noqa: E501
        :type: AllOfUpdatePrioritySchemeRequestBeanPriorities
        """

        self._priorities = priorities

    @property
    def projects(self):
        """Gets the projects of this UpdatePrioritySchemeRequestBean.  # noqa: E501

        The projects in the scheme.  # noqa: E501

        :return: The projects of this UpdatePrioritySchemeRequestBean.  # noqa: E501
        :rtype: AllOfUpdatePrioritySchemeRequestBeanProjects
        """
        return self._projects

    @projects.setter
    def projects(self, projects):
        """Sets the projects of this UpdatePrioritySchemeRequestBean.

        The projects in the scheme.  # noqa: E501

        :param projects: The projects of this UpdatePrioritySchemeRequestBean.  # noqa: E501
        :type: AllOfUpdatePrioritySchemeRequestBeanProjects
        """

        self._projects = projects

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdatePrioritySchemeRequestBean, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdatePrioritySchemeRequestBean):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
