# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UpdateProjectDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'assignee_type': 'str',
        'avatar_id': 'int',
        'category_id': 'int',
        'description': 'str',
        'issue_security_scheme': 'int',
        'key': 'str',
        'lead': 'str',
        'lead_account_id': 'str',
        'name': 'str',
        'notification_scheme': 'int',
        'permission_scheme': 'int',
        'released_project_keys': 'list[str]',
        'url': 'str'
    }

    attribute_map = {
        'assignee_type': 'assigneeType',
        'avatar_id': 'avatarId',
        'category_id': 'categoryId',
        'description': 'description',
        'issue_security_scheme': 'issueSecurityScheme',
        'key': 'key',
        'lead': 'lead',
        'lead_account_id': 'leadAccountId',
        'name': 'name',
        'notification_scheme': 'notificationScheme',
        'permission_scheme': 'permissionScheme',
        'released_project_keys': 'releasedProjectKeys',
        'url': 'url'
    }

    def __init__(self, assignee_type=None, avatar_id=None, category_id=None, description=None, issue_security_scheme=None, key=None, lead=None, lead_account_id=None, name=None, notification_scheme=None, permission_scheme=None, released_project_keys=None, url=None):  # noqa: E501
        """UpdateProjectDetails - a model defined in Swagger"""  # noqa: E501
        self._assignee_type = None
        self._avatar_id = None
        self._category_id = None
        self._description = None
        self._issue_security_scheme = None
        self._key = None
        self._lead = None
        self._lead_account_id = None
        self._name = None
        self._notification_scheme = None
        self._permission_scheme = None
        self._released_project_keys = None
        self._url = None
        self.discriminator = None
        if assignee_type is not None:
            self.assignee_type = assignee_type
        if avatar_id is not None:
            self.avatar_id = avatar_id
        if category_id is not None:
            self.category_id = category_id
        if description is not None:
            self.description = description
        if issue_security_scheme is not None:
            self.issue_security_scheme = issue_security_scheme
        if key is not None:
            self.key = key
        if lead is not None:
            self.lead = lead
        if lead_account_id is not None:
            self.lead_account_id = lead_account_id
        if name is not None:
            self.name = name
        if notification_scheme is not None:
            self.notification_scheme = notification_scheme
        if permission_scheme is not None:
            self.permission_scheme = permission_scheme
        if released_project_keys is not None:
            self.released_project_keys = released_project_keys
        if url is not None:
            self.url = url

    @property
    def assignee_type(self):
        """Gets the assignee_type of this UpdateProjectDetails.  # noqa: E501

        The default assignee when creating issues for this project.  # noqa: E501

        :return: The assignee_type of this UpdateProjectDetails.  # noqa: E501
        :rtype: str
        """
        return self._assignee_type

    @assignee_type.setter
    def assignee_type(self, assignee_type):
        """Sets the assignee_type of this UpdateProjectDetails.

        The default assignee when creating issues for this project.  # noqa: E501

        :param assignee_type: The assignee_type of this UpdateProjectDetails.  # noqa: E501
        :type: str
        """
        allowed_values = ["PROJECT_LEAD", "UNASSIGNED"]  # noqa: E501
        if assignee_type not in allowed_values:
            raise ValueError(
                "Invalid value for `assignee_type` ({0}), must be one of {1}"  # noqa: E501
                .format(assignee_type, allowed_values)
            )

        self._assignee_type = assignee_type

    @property
    def avatar_id(self):
        """Gets the avatar_id of this UpdateProjectDetails.  # noqa: E501

        An integer value for the project's avatar.  # noqa: E501

        :return: The avatar_id of this UpdateProjectDetails.  # noqa: E501
        :rtype: int
        """
        return self._avatar_id

    @avatar_id.setter
    def avatar_id(self, avatar_id):
        """Sets the avatar_id of this UpdateProjectDetails.

        An integer value for the project's avatar.  # noqa: E501

        :param avatar_id: The avatar_id of this UpdateProjectDetails.  # noqa: E501
        :type: int
        """

        self._avatar_id = avatar_id

    @property
    def category_id(self):
        """Gets the category_id of this UpdateProjectDetails.  # noqa: E501

        The ID of the project's category. A complete list of category IDs is found using the [Get all project categories](#api-rest-api-3-projectCategory-get) operation. To remove the project category from the project, set the value to `-1.`  # noqa: E501

        :return: The category_id of this UpdateProjectDetails.  # noqa: E501
        :rtype: int
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """Sets the category_id of this UpdateProjectDetails.

        The ID of the project's category. A complete list of category IDs is found using the [Get all project categories](#api-rest-api-3-projectCategory-get) operation. To remove the project category from the project, set the value to `-1.`  # noqa: E501

        :param category_id: The category_id of this UpdateProjectDetails.  # noqa: E501
        :type: int
        """

        self._category_id = category_id

    @property
    def description(self):
        """Gets the description of this UpdateProjectDetails.  # noqa: E501

        A brief description of the project.  # noqa: E501

        :return: The description of this UpdateProjectDetails.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdateProjectDetails.

        A brief description of the project.  # noqa: E501

        :param description: The description of this UpdateProjectDetails.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def issue_security_scheme(self):
        """Gets the issue_security_scheme of this UpdateProjectDetails.  # noqa: E501

        The ID of the issue security scheme for the project, which enables you to control who can and cannot view issues. Use the [Get issue security schemes](#api-rest-api-3-issuesecurityschemes-get) resource to get all issue security scheme IDs.  # noqa: E501

        :return: The issue_security_scheme of this UpdateProjectDetails.  # noqa: E501
        :rtype: int
        """
        return self._issue_security_scheme

    @issue_security_scheme.setter
    def issue_security_scheme(self, issue_security_scheme):
        """Sets the issue_security_scheme of this UpdateProjectDetails.

        The ID of the issue security scheme for the project, which enables you to control who can and cannot view issues. Use the [Get issue security schemes](#api-rest-api-3-issuesecurityschemes-get) resource to get all issue security scheme IDs.  # noqa: E501

        :param issue_security_scheme: The issue_security_scheme of this UpdateProjectDetails.  # noqa: E501
        :type: int
        """

        self._issue_security_scheme = issue_security_scheme

    @property
    def key(self):
        """Gets the key of this UpdateProjectDetails.  # noqa: E501

        Project keys must be unique and start with an uppercase letter followed by one or more uppercase alphanumeric characters. The maximum length is 10 characters.  # noqa: E501

        :return: The key of this UpdateProjectDetails.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this UpdateProjectDetails.

        Project keys must be unique and start with an uppercase letter followed by one or more uppercase alphanumeric characters. The maximum length is 10 characters.  # noqa: E501

        :param key: The key of this UpdateProjectDetails.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def lead(self):
        """Gets the lead of this UpdateProjectDetails.  # noqa: E501

        This parameter is deprecated because of privacy changes. Use `leadAccountId` instead. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. The user name of the project lead. Cannot be provided with `leadAccountId`.  # noqa: E501

        :return: The lead of this UpdateProjectDetails.  # noqa: E501
        :rtype: str
        """
        return self._lead

    @lead.setter
    def lead(self, lead):
        """Sets the lead of this UpdateProjectDetails.

        This parameter is deprecated because of privacy changes. Use `leadAccountId` instead. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. The user name of the project lead. Cannot be provided with `leadAccountId`.  # noqa: E501

        :param lead: The lead of this UpdateProjectDetails.  # noqa: E501
        :type: str
        """

        self._lead = lead

    @property
    def lead_account_id(self):
        """Gets the lead_account_id of this UpdateProjectDetails.  # noqa: E501

        The account ID of the project lead. Cannot be provided with `lead`.  # noqa: E501

        :return: The lead_account_id of this UpdateProjectDetails.  # noqa: E501
        :rtype: str
        """
        return self._lead_account_id

    @lead_account_id.setter
    def lead_account_id(self, lead_account_id):
        """Sets the lead_account_id of this UpdateProjectDetails.

        The account ID of the project lead. Cannot be provided with `lead`.  # noqa: E501

        :param lead_account_id: The lead_account_id of this UpdateProjectDetails.  # noqa: E501
        :type: str
        """

        self._lead_account_id = lead_account_id

    @property
    def name(self):
        """Gets the name of this UpdateProjectDetails.  # noqa: E501

        The name of the project.  # noqa: E501

        :return: The name of this UpdateProjectDetails.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateProjectDetails.

        The name of the project.  # noqa: E501

        :param name: The name of this UpdateProjectDetails.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def notification_scheme(self):
        """Gets the notification_scheme of this UpdateProjectDetails.  # noqa: E501

        The ID of the notification scheme for the project. Use the [Get notification schemes](#api-rest-api-3-notificationscheme-get) resource to get a list of notification scheme IDs.  # noqa: E501

        :return: The notification_scheme of this UpdateProjectDetails.  # noqa: E501
        :rtype: int
        """
        return self._notification_scheme

    @notification_scheme.setter
    def notification_scheme(self, notification_scheme):
        """Sets the notification_scheme of this UpdateProjectDetails.

        The ID of the notification scheme for the project. Use the [Get notification schemes](#api-rest-api-3-notificationscheme-get) resource to get a list of notification scheme IDs.  # noqa: E501

        :param notification_scheme: The notification_scheme of this UpdateProjectDetails.  # noqa: E501
        :type: int
        """

        self._notification_scheme = notification_scheme

    @property
    def permission_scheme(self):
        """Gets the permission_scheme of this UpdateProjectDetails.  # noqa: E501

        The ID of the permission scheme for the project. Use the [Get all permission schemes](#api-rest-api-3-permissionscheme-get) resource to see a list of all permission scheme IDs.  # noqa: E501

        :return: The permission_scheme of this UpdateProjectDetails.  # noqa: E501
        :rtype: int
        """
        return self._permission_scheme

    @permission_scheme.setter
    def permission_scheme(self, permission_scheme):
        """Sets the permission_scheme of this UpdateProjectDetails.

        The ID of the permission scheme for the project. Use the [Get all permission schemes](#api-rest-api-3-permissionscheme-get) resource to see a list of all permission scheme IDs.  # noqa: E501

        :param permission_scheme: The permission_scheme of this UpdateProjectDetails.  # noqa: E501
        :type: int
        """

        self._permission_scheme = permission_scheme

    @property
    def released_project_keys(self):
        """Gets the released_project_keys of this UpdateProjectDetails.  # noqa: E501

        Previous project keys to be released from the current project. Released keys must belong to the current project and not contain the current project key  # noqa: E501

        :return: The released_project_keys of this UpdateProjectDetails.  # noqa: E501
        :rtype: list[str]
        """
        return self._released_project_keys

    @released_project_keys.setter
    def released_project_keys(self, released_project_keys):
        """Sets the released_project_keys of this UpdateProjectDetails.

        Previous project keys to be released from the current project. Released keys must belong to the current project and not contain the current project key  # noqa: E501

        :param released_project_keys: The released_project_keys of this UpdateProjectDetails.  # noqa: E501
        :type: list[str]
        """

        self._released_project_keys = released_project_keys

    @property
    def url(self):
        """Gets the url of this UpdateProjectDetails.  # noqa: E501

        A link to information about this project, such as project documentation  # noqa: E501

        :return: The url of this UpdateProjectDetails.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this UpdateProjectDetails.

        A link to information about this project, such as project documentation  # noqa: E501

        :param url: The url of this UpdateProjectDetails.  # noqa: E501
        :type: str
        """

        self._url = url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateProjectDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateProjectDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
