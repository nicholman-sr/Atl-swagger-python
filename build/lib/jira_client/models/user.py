# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class User(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'str',
        'account_type': 'str',
        'active': 'bool',
        'application_roles': 'AllOfUserApplicationRoles',
        'avatar_urls': 'AllOfUserAvatarUrls',
        'display_name': 'str',
        'email_address': 'str',
        'expand': 'str',
        'groups': 'AllOfUserGroups',
        'key': 'str',
        'locale': 'str',
        'name': 'str',
        '_self': 'str',
        'time_zone': 'str'
    }

    attribute_map = {
        'account_id': 'accountId',
        'account_type': 'accountType',
        'active': 'active',
        'application_roles': 'applicationRoles',
        'avatar_urls': 'avatarUrls',
        'display_name': 'displayName',
        'email_address': 'emailAddress',
        'expand': 'expand',
        'groups': 'groups',
        'key': 'key',
        'locale': 'locale',
        'name': 'name',
        '_self': 'self',
        'time_zone': 'timeZone'
    }

    def __init__(self, account_id=None, account_type=None, active=None, application_roles=None, avatar_urls=None, display_name=None, email_address=None, expand=None, groups=None, key=None, locale=None, name=None, _self=None, time_zone=None):  # noqa: E501
        """User - a model defined in Swagger"""  # noqa: E501
        self._account_id = None
        self._account_type = None
        self._active = None
        self._application_roles = None
        self._avatar_urls = None
        self._display_name = None
        self._email_address = None
        self._expand = None
        self._groups = None
        self._key = None
        self._locale = None
        self._name = None
        self.__self = None
        self._time_zone = None
        self.discriminator = None
        if account_id is not None:
            self.account_id = account_id
        if account_type is not None:
            self.account_type = account_type
        if active is not None:
            self.active = active
        if application_roles is not None:
            self.application_roles = application_roles
        if avatar_urls is not None:
            self.avatar_urls = avatar_urls
        if display_name is not None:
            self.display_name = display_name
        if email_address is not None:
            self.email_address = email_address
        if expand is not None:
            self.expand = expand
        if groups is not None:
            self.groups = groups
        if key is not None:
            self.key = key
        if locale is not None:
            self.locale = locale
        if name is not None:
            self.name = name
        if _self is not None:
            self._self = _self
        if time_zone is not None:
            self.time_zone = time_zone

    @property
    def account_id(self):
        """Gets the account_id of this User.  # noqa: E501

        The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. Required in requests.  # noqa: E501

        :return: The account_id of this User.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this User.

        The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. Required in requests.  # noqa: E501

        :param account_id: The account_id of this User.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def account_type(self):
        """Gets the account_type of this User.  # noqa: E501

        The user account type. Can take the following values:   *  `atlassian` regular Atlassian user account  *  `app` system account used for Connect applications and OAuth to represent external systems  *  `customer` Jira Service Desk account representing an external service desk  # noqa: E501

        :return: The account_type of this User.  # noqa: E501
        :rtype: str
        """
        return self._account_type

    @account_type.setter
    def account_type(self, account_type):
        """Sets the account_type of this User.

        The user account type. Can take the following values:   *  `atlassian` regular Atlassian user account  *  `app` system account used for Connect applications and OAuth to represent external systems  *  `customer` Jira Service Desk account representing an external service desk  # noqa: E501

        :param account_type: The account_type of this User.  # noqa: E501
        :type: str
        """
        allowed_values = ["atlassian", "app", "customer", "unknown"]  # noqa: E501
        if account_type not in allowed_values:
            raise ValueError(
                "Invalid value for `account_type` ({0}), must be one of {1}"  # noqa: E501
                .format(account_type, allowed_values)
            )

        self._account_type = account_type

    @property
    def active(self):
        """Gets the active of this User.  # noqa: E501

        Whether the user is active.  # noqa: E501

        :return: The active of this User.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this User.

        Whether the user is active.  # noqa: E501

        :param active: The active of this User.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def application_roles(self):
        """Gets the application_roles of this User.  # noqa: E501

        The application roles the user is assigned to.  # noqa: E501

        :return: The application_roles of this User.  # noqa: E501
        :rtype: AllOfUserApplicationRoles
        """
        return self._application_roles

    @application_roles.setter
    def application_roles(self, application_roles):
        """Sets the application_roles of this User.

        The application roles the user is assigned to.  # noqa: E501

        :param application_roles: The application_roles of this User.  # noqa: E501
        :type: AllOfUserApplicationRoles
        """

        self._application_roles = application_roles

    @property
    def avatar_urls(self):
        """Gets the avatar_urls of this User.  # noqa: E501

        The avatars of the user.  # noqa: E501

        :return: The avatar_urls of this User.  # noqa: E501
        :rtype: AllOfUserAvatarUrls
        """
        return self._avatar_urls

    @avatar_urls.setter
    def avatar_urls(self, avatar_urls):
        """Sets the avatar_urls of this User.

        The avatars of the user.  # noqa: E501

        :param avatar_urls: The avatar_urls of this User.  # noqa: E501
        :type: AllOfUserAvatarUrls
        """

        self._avatar_urls = avatar_urls

    @property
    def display_name(self):
        """Gets the display_name of this User.  # noqa: E501

        The display name of the user. Depending on the user’s privacy setting, this may return an alternative value.  # noqa: E501

        :return: The display_name of this User.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this User.

        The display name of the user. Depending on the user’s privacy setting, this may return an alternative value.  # noqa: E501

        :param display_name: The display_name of this User.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def email_address(self):
        """Gets the email_address of this User.  # noqa: E501

        The email address of the user. Depending on the user’s privacy setting, this may be returned as null.  # noqa: E501

        :return: The email_address of this User.  # noqa: E501
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """Sets the email_address of this User.

        The email address of the user. Depending on the user’s privacy setting, this may be returned as null.  # noqa: E501

        :param email_address: The email_address of this User.  # noqa: E501
        :type: str
        """

        self._email_address = email_address

    @property
    def expand(self):
        """Gets the expand of this User.  # noqa: E501

        Expand options that include additional user details in the response.  # noqa: E501

        :return: The expand of this User.  # noqa: E501
        :rtype: str
        """
        return self._expand

    @expand.setter
    def expand(self, expand):
        """Sets the expand of this User.

        Expand options that include additional user details in the response.  # noqa: E501

        :param expand: The expand of this User.  # noqa: E501
        :type: str
        """

        self._expand = expand

    @property
    def groups(self):
        """Gets the groups of this User.  # noqa: E501

        The groups that the user belongs to.  # noqa: E501

        :return: The groups of this User.  # noqa: E501
        :rtype: AllOfUserGroups
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this User.

        The groups that the user belongs to.  # noqa: E501

        :param groups: The groups of this User.  # noqa: E501
        :type: AllOfUserGroups
        """

        self._groups = groups

    @property
    def key(self):
        """Gets the key of this User.  # noqa: E501

        This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.  # noqa: E501

        :return: The key of this User.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this User.

        This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.  # noqa: E501

        :param key: The key of this User.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def locale(self):
        """Gets the locale of this User.  # noqa: E501

        The locale of the user. Depending on the user’s privacy setting, this may be returned as null.  # noqa: E501

        :return: The locale of this User.  # noqa: E501
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this User.

        The locale of the user. Depending on the user’s privacy setting, this may be returned as null.  # noqa: E501

        :param locale: The locale of this User.  # noqa: E501
        :type: str
        """

        self._locale = locale

    @property
    def name(self):
        """Gets the name of this User.  # noqa: E501

        This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.  # noqa: E501

        :return: The name of this User.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this User.

        This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.  # noqa: E501

        :param name: The name of this User.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def _self(self):
        """Gets the _self of this User.  # noqa: E501

        The URL of the user.  # noqa: E501

        :return: The _self of this User.  # noqa: E501
        :rtype: str
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this User.

        The URL of the user.  # noqa: E501

        :param _self: The _self of this User.  # noqa: E501
        :type: str
        """

        self.__self = _self

    @property
    def time_zone(self):
        """Gets the time_zone of this User.  # noqa: E501

        The time zone specified in the user's profile. If the user's time zone is not visible to the current user (due to user's profile setting), or if a time zone has not been set, the instance's default time zone will be returned.  # noqa: E501

        :return: The time_zone of this User.  # noqa: E501
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this User.

        The time zone specified in the user's profile. If the user's time zone is not visible to the current user (due to user's profile setting), or if a time zone has not been set, the instance's default time zone will be returned.  # noqa: E501

        :param time_zone: The time_zone of this User.  # noqa: E501
        :type: str
        """

        self._time_zone = time_zone

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(User, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, User):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
