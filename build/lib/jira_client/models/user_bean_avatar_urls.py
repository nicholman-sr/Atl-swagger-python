# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UserBeanAvatarUrls(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_16x16': 'str',
        '_24x24': 'str',
        '_32x32': 'str',
        '_48x48': 'str'
    }

    attribute_map = {
        '_16x16': '16x16',
        '_24x24': '24x24',
        '_32x32': '32x32',
        '_48x48': '48x48'
    }

    def __init__(self, _16x16=None, _24x24=None, _32x32=None, _48x48=None):  # noqa: E501
        """UserBeanAvatarUrls - a model defined in Swagger"""  # noqa: E501
        self.__16x16 = None
        self.__24x24 = None
        self.__32x32 = None
        self.__48x48 = None
        self.discriminator = None
        if _16x16 is not None:
            self._16x16 = _16x16
        if _24x24 is not None:
            self._24x24 = _24x24
        if _32x32 is not None:
            self._32x32 = _32x32
        if _48x48 is not None:
            self._48x48 = _48x48

    @property
    def _16x16(self):
        """Gets the _16x16 of this UserBeanAvatarUrls.  # noqa: E501

        The URL of the user's 16x16 pixel avatar.  # noqa: E501

        :return: The _16x16 of this UserBeanAvatarUrls.  # noqa: E501
        :rtype: str
        """
        return self.__16x16

    @_16x16.setter
    def _16x16(self, _16x16):
        """Sets the _16x16 of this UserBeanAvatarUrls.

        The URL of the user's 16x16 pixel avatar.  # noqa: E501

        :param _16x16: The _16x16 of this UserBeanAvatarUrls.  # noqa: E501
        :type: str
        """

        self.__16x16 = _16x16

    @property
    def _24x24(self):
        """Gets the _24x24 of this UserBeanAvatarUrls.  # noqa: E501

        The URL of the user's 24x24 pixel avatar.  # noqa: E501

        :return: The _24x24 of this UserBeanAvatarUrls.  # noqa: E501
        :rtype: str
        """
        return self.__24x24

    @_24x24.setter
    def _24x24(self, _24x24):
        """Sets the _24x24 of this UserBeanAvatarUrls.

        The URL of the user's 24x24 pixel avatar.  # noqa: E501

        :param _24x24: The _24x24 of this UserBeanAvatarUrls.  # noqa: E501
        :type: str
        """

        self.__24x24 = _24x24

    @property
    def _32x32(self):
        """Gets the _32x32 of this UserBeanAvatarUrls.  # noqa: E501

        The URL of the user's 32x32 pixel avatar.  # noqa: E501

        :return: The _32x32 of this UserBeanAvatarUrls.  # noqa: E501
        :rtype: str
        """
        return self.__32x32

    @_32x32.setter
    def _32x32(self, _32x32):
        """Sets the _32x32 of this UserBeanAvatarUrls.

        The URL of the user's 32x32 pixel avatar.  # noqa: E501

        :param _32x32: The _32x32 of this UserBeanAvatarUrls.  # noqa: E501
        :type: str
        """

        self.__32x32 = _32x32

    @property
    def _48x48(self):
        """Gets the _48x48 of this UserBeanAvatarUrls.  # noqa: E501

        The URL of the user's 48x48 pixel avatar.  # noqa: E501

        :return: The _48x48 of this UserBeanAvatarUrls.  # noqa: E501
        :rtype: str
        """
        return self.__48x48

    @_48x48.setter
    def _48x48(self, _48x48):
        """Sets the _48x48 of this UserBeanAvatarUrls.

        The URL of the user's 48x48 pixel avatar.  # noqa: E501

        :param _48x48: The _48x48 of this UserBeanAvatarUrls.  # noqa: E501
        :type: str
        """

        self.__48x48 = _48x48

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserBeanAvatarUrls, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserBeanAvatarUrls):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
