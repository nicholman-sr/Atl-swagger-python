# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Watchers(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'is_watching': 'bool',
        '_self': 'str',
        'watch_count': 'int',
        'watchers': 'list[UserDetails]'
    }

    attribute_map = {
        'is_watching': 'isWatching',
        '_self': 'self',
        'watch_count': 'watchCount',
        'watchers': 'watchers'
    }

    def __init__(self, is_watching=None, _self=None, watch_count=None, watchers=None):  # noqa: E501
        """Watchers - a model defined in Swagger"""  # noqa: E501
        self._is_watching = None
        self.__self = None
        self._watch_count = None
        self._watchers = None
        self.discriminator = None
        if is_watching is not None:
            self.is_watching = is_watching
        if _self is not None:
            self._self = _self
        if watch_count is not None:
            self.watch_count = watch_count
        if watchers is not None:
            self.watchers = watchers

    @property
    def is_watching(self):
        """Gets the is_watching of this Watchers.  # noqa: E501

        Whether the calling user is watching this issue.  # noqa: E501

        :return: The is_watching of this Watchers.  # noqa: E501
        :rtype: bool
        """
        return self._is_watching

    @is_watching.setter
    def is_watching(self, is_watching):
        """Sets the is_watching of this Watchers.

        Whether the calling user is watching this issue.  # noqa: E501

        :param is_watching: The is_watching of this Watchers.  # noqa: E501
        :type: bool
        """

        self._is_watching = is_watching

    @property
    def _self(self):
        """Gets the _self of this Watchers.  # noqa: E501

        The URL of these issue watcher details.  # noqa: E501

        :return: The _self of this Watchers.  # noqa: E501
        :rtype: str
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this Watchers.

        The URL of these issue watcher details.  # noqa: E501

        :param _self: The _self of this Watchers.  # noqa: E501
        :type: str
        """

        self.__self = _self

    @property
    def watch_count(self):
        """Gets the watch_count of this Watchers.  # noqa: E501

        The number of users watching this issue.  # noqa: E501

        :return: The watch_count of this Watchers.  # noqa: E501
        :rtype: int
        """
        return self._watch_count

    @watch_count.setter
    def watch_count(self, watch_count):
        """Sets the watch_count of this Watchers.

        The number of users watching this issue.  # noqa: E501

        :param watch_count: The watch_count of this Watchers.  # noqa: E501
        :type: int
        """

        self._watch_count = watch_count

    @property
    def watchers(self):
        """Gets the watchers of this Watchers.  # noqa: E501

        Details of the users watching this issue.  # noqa: E501

        :return: The watchers of this Watchers.  # noqa: E501
        :rtype: list[UserDetails]
        """
        return self._watchers

    @watchers.setter
    def watchers(self, watchers):
        """Sets the watchers of this Watchers.

        Details of the users watching this issue.  # noqa: E501

        :param watchers: The watchers of this Watchers.  # noqa: E501
        :type: list[UserDetails]
        """

        self._watchers = watchers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Watchers, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Watchers):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
