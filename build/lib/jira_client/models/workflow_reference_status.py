# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WorkflowReferenceStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'approval_configuration': 'ApprovalConfiguration',
        'deprecated': 'bool',
        'layout': 'WorkflowStatusLayout',
        'properties': 'dict(str, str)',
        'status_reference': 'str'
    }

    attribute_map = {
        'approval_configuration': 'approvalConfiguration',
        'deprecated': 'deprecated',
        'layout': 'layout',
        'properties': 'properties',
        'status_reference': 'statusReference'
    }

    def __init__(self, approval_configuration=None, deprecated=None, layout=None, properties=None, status_reference=None):  # noqa: E501
        """WorkflowReferenceStatus - a model defined in Swagger"""  # noqa: E501
        self._approval_configuration = None
        self._deprecated = None
        self._layout = None
        self._properties = None
        self._status_reference = None
        self.discriminator = None
        if approval_configuration is not None:
            self.approval_configuration = approval_configuration
        if deprecated is not None:
            self.deprecated = deprecated
        if layout is not None:
            self.layout = layout
        if properties is not None:
            self.properties = properties
        if status_reference is not None:
            self.status_reference = status_reference

    @property
    def approval_configuration(self):
        """Gets the approval_configuration of this WorkflowReferenceStatus.  # noqa: E501


        :return: The approval_configuration of this WorkflowReferenceStatus.  # noqa: E501
        :rtype: ApprovalConfiguration
        """
        return self._approval_configuration

    @approval_configuration.setter
    def approval_configuration(self, approval_configuration):
        """Sets the approval_configuration of this WorkflowReferenceStatus.


        :param approval_configuration: The approval_configuration of this WorkflowReferenceStatus.  # noqa: E501
        :type: ApprovalConfiguration
        """

        self._approval_configuration = approval_configuration

    @property
    def deprecated(self):
        """Gets the deprecated of this WorkflowReferenceStatus.  # noqa: E501

        Indicates if the status is deprecated.  # noqa: E501

        :return: The deprecated of this WorkflowReferenceStatus.  # noqa: E501
        :rtype: bool
        """
        return self._deprecated

    @deprecated.setter
    def deprecated(self, deprecated):
        """Sets the deprecated of this WorkflowReferenceStatus.

        Indicates if the status is deprecated.  # noqa: E501

        :param deprecated: The deprecated of this WorkflowReferenceStatus.  # noqa: E501
        :type: bool
        """

        self._deprecated = deprecated

    @property
    def layout(self):
        """Gets the layout of this WorkflowReferenceStatus.  # noqa: E501


        :return: The layout of this WorkflowReferenceStatus.  # noqa: E501
        :rtype: WorkflowStatusLayout
        """
        return self._layout

    @layout.setter
    def layout(self, layout):
        """Sets the layout of this WorkflowReferenceStatus.


        :param layout: The layout of this WorkflowReferenceStatus.  # noqa: E501
        :type: WorkflowStatusLayout
        """

        self._layout = layout

    @property
    def properties(self):
        """Gets the properties of this WorkflowReferenceStatus.  # noqa: E501

        The properties associated with the status.  # noqa: E501

        :return: The properties of this WorkflowReferenceStatus.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this WorkflowReferenceStatus.

        The properties associated with the status.  # noqa: E501

        :param properties: The properties of this WorkflowReferenceStatus.  # noqa: E501
        :type: dict(str, str)
        """

        self._properties = properties

    @property
    def status_reference(self):
        """Gets the status_reference of this WorkflowReferenceStatus.  # noqa: E501

        The reference of the status.  # noqa: E501

        :return: The status_reference of this WorkflowReferenceStatus.  # noqa: E501
        :rtype: str
        """
        return self._status_reference

    @status_reference.setter
    def status_reference(self, status_reference):
        """Sets the status_reference of this WorkflowReferenceStatus.

        The reference of the status.  # noqa: E501

        :param status_reference: The status_reference of this WorkflowReferenceStatus.  # noqa: E501
        :type: str
        """

        self._status_reference = status_reference

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WorkflowReferenceStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorkflowReferenceStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
