# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WorkflowRules(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'conditions_tree': 'WorkflowCondition',
        'post_functions': 'list[WorkflowTransitionRule]',
        'validators': 'list[WorkflowTransitionRule]'
    }

    attribute_map = {
        'conditions_tree': 'conditionsTree',
        'post_functions': 'postFunctions',
        'validators': 'validators'
    }

    def __init__(self, conditions_tree=None, post_functions=None, validators=None):  # noqa: E501
        """WorkflowRules - a model defined in Swagger"""  # noqa: E501
        self._conditions_tree = None
        self._post_functions = None
        self._validators = None
        self.discriminator = None
        if conditions_tree is not None:
            self.conditions_tree = conditions_tree
        if post_functions is not None:
            self.post_functions = post_functions
        if validators is not None:
            self.validators = validators

    @property
    def conditions_tree(self):
        """Gets the conditions_tree of this WorkflowRules.  # noqa: E501


        :return: The conditions_tree of this WorkflowRules.  # noqa: E501
        :rtype: WorkflowCondition
        """
        return self._conditions_tree

    @conditions_tree.setter
    def conditions_tree(self, conditions_tree):
        """Sets the conditions_tree of this WorkflowRules.


        :param conditions_tree: The conditions_tree of this WorkflowRules.  # noqa: E501
        :type: WorkflowCondition
        """

        self._conditions_tree = conditions_tree

    @property
    def post_functions(self):
        """Gets the post_functions of this WorkflowRules.  # noqa: E501

        The workflow post functions.  # noqa: E501

        :return: The post_functions of this WorkflowRules.  # noqa: E501
        :rtype: list[WorkflowTransitionRule]
        """
        return self._post_functions

    @post_functions.setter
    def post_functions(self, post_functions):
        """Sets the post_functions of this WorkflowRules.

        The workflow post functions.  # noqa: E501

        :param post_functions: The post_functions of this WorkflowRules.  # noqa: E501
        :type: list[WorkflowTransitionRule]
        """

        self._post_functions = post_functions

    @property
    def validators(self):
        """Gets the validators of this WorkflowRules.  # noqa: E501

        The workflow validators.  # noqa: E501

        :return: The validators of this WorkflowRules.  # noqa: E501
        :rtype: list[WorkflowTransitionRule]
        """
        return self._validators

    @validators.setter
    def validators(self, validators):
        """Sets the validators of this WorkflowRules.

        The workflow validators.  # noqa: E501

        :param validators: The validators of this WorkflowRules.  # noqa: E501
        :type: list[WorkflowTransitionRule]
        """

        self._validators = validators

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WorkflowRules, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorkflowRules):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
