# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WorkflowScheme(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'default_workflow': 'str',
        'description': 'str',
        'draft': 'bool',
        'id': 'int',
        'issue_type_mappings': 'dict(str, str)',
        'issue_types': 'dict(str, IssueTypeDetails)',
        'last_modified': 'str',
        'last_modified_user': 'AllOfWorkflowSchemeLastModifiedUser',
        'name': 'str',
        'original_default_workflow': 'str',
        'original_issue_type_mappings': 'dict(str, str)',
        '_self': 'str',
        'update_draft_if_needed': 'bool'
    }

    attribute_map = {
        'default_workflow': 'defaultWorkflow',
        'description': 'description',
        'draft': 'draft',
        'id': 'id',
        'issue_type_mappings': 'issueTypeMappings',
        'issue_types': 'issueTypes',
        'last_modified': 'lastModified',
        'last_modified_user': 'lastModifiedUser',
        'name': 'name',
        'original_default_workflow': 'originalDefaultWorkflow',
        'original_issue_type_mappings': 'originalIssueTypeMappings',
        '_self': 'self',
        'update_draft_if_needed': 'updateDraftIfNeeded'
    }

    def __init__(self, default_workflow=None, description=None, draft=None, id=None, issue_type_mappings=None, issue_types=None, last_modified=None, last_modified_user=None, name=None, original_default_workflow=None, original_issue_type_mappings=None, _self=None, update_draft_if_needed=None):  # noqa: E501
        """WorkflowScheme - a model defined in Swagger"""  # noqa: E501
        self._default_workflow = None
        self._description = None
        self._draft = None
        self._id = None
        self._issue_type_mappings = None
        self._issue_types = None
        self._last_modified = None
        self._last_modified_user = None
        self._name = None
        self._original_default_workflow = None
        self._original_issue_type_mappings = None
        self.__self = None
        self._update_draft_if_needed = None
        self.discriminator = None
        if default_workflow is not None:
            self.default_workflow = default_workflow
        if description is not None:
            self.description = description
        if draft is not None:
            self.draft = draft
        if id is not None:
            self.id = id
        if issue_type_mappings is not None:
            self.issue_type_mappings = issue_type_mappings
        if issue_types is not None:
            self.issue_types = issue_types
        if last_modified is not None:
            self.last_modified = last_modified
        if last_modified_user is not None:
            self.last_modified_user = last_modified_user
        if name is not None:
            self.name = name
        if original_default_workflow is not None:
            self.original_default_workflow = original_default_workflow
        if original_issue_type_mappings is not None:
            self.original_issue_type_mappings = original_issue_type_mappings
        if _self is not None:
            self._self = _self
        if update_draft_if_needed is not None:
            self.update_draft_if_needed = update_draft_if_needed

    @property
    def default_workflow(self):
        """Gets the default_workflow of this WorkflowScheme.  # noqa: E501

        The name of the default workflow for the workflow scheme. The default workflow has *All Unassigned Issue Types* assigned to it in Jira. If `defaultWorkflow` is not specified when creating a workflow scheme, it is set to *Jira Workflow (jira)*.  # noqa: E501

        :return: The default_workflow of this WorkflowScheme.  # noqa: E501
        :rtype: str
        """
        return self._default_workflow

    @default_workflow.setter
    def default_workflow(self, default_workflow):
        """Sets the default_workflow of this WorkflowScheme.

        The name of the default workflow for the workflow scheme. The default workflow has *All Unassigned Issue Types* assigned to it in Jira. If `defaultWorkflow` is not specified when creating a workflow scheme, it is set to *Jira Workflow (jira)*.  # noqa: E501

        :param default_workflow: The default_workflow of this WorkflowScheme.  # noqa: E501
        :type: str
        """

        self._default_workflow = default_workflow

    @property
    def description(self):
        """Gets the description of this WorkflowScheme.  # noqa: E501

        The description of the workflow scheme.  # noqa: E501

        :return: The description of this WorkflowScheme.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this WorkflowScheme.

        The description of the workflow scheme.  # noqa: E501

        :param description: The description of this WorkflowScheme.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def draft(self):
        """Gets the draft of this WorkflowScheme.  # noqa: E501

        Whether the workflow scheme is a draft or not.  # noqa: E501

        :return: The draft of this WorkflowScheme.  # noqa: E501
        :rtype: bool
        """
        return self._draft

    @draft.setter
    def draft(self, draft):
        """Sets the draft of this WorkflowScheme.

        Whether the workflow scheme is a draft or not.  # noqa: E501

        :param draft: The draft of this WorkflowScheme.  # noqa: E501
        :type: bool
        """

        self._draft = draft

    @property
    def id(self):
        """Gets the id of this WorkflowScheme.  # noqa: E501

        The ID of the workflow scheme.  # noqa: E501

        :return: The id of this WorkflowScheme.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this WorkflowScheme.

        The ID of the workflow scheme.  # noqa: E501

        :param id: The id of this WorkflowScheme.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def issue_type_mappings(self):
        """Gets the issue_type_mappings of this WorkflowScheme.  # noqa: E501

        The issue type to workflow mappings, where each mapping is an issue type ID and workflow name pair. Note that an issue type can only be mapped to one workflow in a workflow scheme.  # noqa: E501

        :return: The issue_type_mappings of this WorkflowScheme.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._issue_type_mappings

    @issue_type_mappings.setter
    def issue_type_mappings(self, issue_type_mappings):
        """Sets the issue_type_mappings of this WorkflowScheme.

        The issue type to workflow mappings, where each mapping is an issue type ID and workflow name pair. Note that an issue type can only be mapped to one workflow in a workflow scheme.  # noqa: E501

        :param issue_type_mappings: The issue_type_mappings of this WorkflowScheme.  # noqa: E501
        :type: dict(str, str)
        """

        self._issue_type_mappings = issue_type_mappings

    @property
    def issue_types(self):
        """Gets the issue_types of this WorkflowScheme.  # noqa: E501

        The issue types available in Jira.  # noqa: E501

        :return: The issue_types of this WorkflowScheme.  # noqa: E501
        :rtype: dict(str, IssueTypeDetails)
        """
        return self._issue_types

    @issue_types.setter
    def issue_types(self, issue_types):
        """Sets the issue_types of this WorkflowScheme.

        The issue types available in Jira.  # noqa: E501

        :param issue_types: The issue_types of this WorkflowScheme.  # noqa: E501
        :type: dict(str, IssueTypeDetails)
        """

        self._issue_types = issue_types

    @property
    def last_modified(self):
        """Gets the last_modified of this WorkflowScheme.  # noqa: E501

        The date-time that the draft workflow scheme was last modified. A modification is a change to the issue type-project mappings only. This property does not apply to non-draft workflows.  # noqa: E501

        :return: The last_modified of this WorkflowScheme.  # noqa: E501
        :rtype: str
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """Sets the last_modified of this WorkflowScheme.

        The date-time that the draft workflow scheme was last modified. A modification is a change to the issue type-project mappings only. This property does not apply to non-draft workflows.  # noqa: E501

        :param last_modified: The last_modified of this WorkflowScheme.  # noqa: E501
        :type: str
        """

        self._last_modified = last_modified

    @property
    def last_modified_user(self):
        """Gets the last_modified_user of this WorkflowScheme.  # noqa: E501

        The user that last modified the draft workflow scheme. A modification is a change to the issue type-project mappings only. This property does not apply to non-draft workflows.  # noqa: E501

        :return: The last_modified_user of this WorkflowScheme.  # noqa: E501
        :rtype: AllOfWorkflowSchemeLastModifiedUser
        """
        return self._last_modified_user

    @last_modified_user.setter
    def last_modified_user(self, last_modified_user):
        """Sets the last_modified_user of this WorkflowScheme.

        The user that last modified the draft workflow scheme. A modification is a change to the issue type-project mappings only. This property does not apply to non-draft workflows.  # noqa: E501

        :param last_modified_user: The last_modified_user of this WorkflowScheme.  # noqa: E501
        :type: AllOfWorkflowSchemeLastModifiedUser
        """

        self._last_modified_user = last_modified_user

    @property
    def name(self):
        """Gets the name of this WorkflowScheme.  # noqa: E501

        The name of the workflow scheme. The name must be unique. The maximum length is 255 characters. Required when creating a workflow scheme.  # noqa: E501

        :return: The name of this WorkflowScheme.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WorkflowScheme.

        The name of the workflow scheme. The name must be unique. The maximum length is 255 characters. Required when creating a workflow scheme.  # noqa: E501

        :param name: The name of this WorkflowScheme.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def original_default_workflow(self):
        """Gets the original_default_workflow of this WorkflowScheme.  # noqa: E501

        For draft workflow schemes, this property is the name of the default workflow for the original workflow scheme. The default workflow has *All Unassigned Issue Types* assigned to it in Jira.  # noqa: E501

        :return: The original_default_workflow of this WorkflowScheme.  # noqa: E501
        :rtype: str
        """
        return self._original_default_workflow

    @original_default_workflow.setter
    def original_default_workflow(self, original_default_workflow):
        """Sets the original_default_workflow of this WorkflowScheme.

        For draft workflow schemes, this property is the name of the default workflow for the original workflow scheme. The default workflow has *All Unassigned Issue Types* assigned to it in Jira.  # noqa: E501

        :param original_default_workflow: The original_default_workflow of this WorkflowScheme.  # noqa: E501
        :type: str
        """

        self._original_default_workflow = original_default_workflow

    @property
    def original_issue_type_mappings(self):
        """Gets the original_issue_type_mappings of this WorkflowScheme.  # noqa: E501

        For draft workflow schemes, this property is the issue type to workflow mappings for the original workflow scheme, where each mapping is an issue type ID and workflow name pair. Note that an issue type can only be mapped to one workflow in a workflow scheme.  # noqa: E501

        :return: The original_issue_type_mappings of this WorkflowScheme.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._original_issue_type_mappings

    @original_issue_type_mappings.setter
    def original_issue_type_mappings(self, original_issue_type_mappings):
        """Sets the original_issue_type_mappings of this WorkflowScheme.

        For draft workflow schemes, this property is the issue type to workflow mappings for the original workflow scheme, where each mapping is an issue type ID and workflow name pair. Note that an issue type can only be mapped to one workflow in a workflow scheme.  # noqa: E501

        :param original_issue_type_mappings: The original_issue_type_mappings of this WorkflowScheme.  # noqa: E501
        :type: dict(str, str)
        """

        self._original_issue_type_mappings = original_issue_type_mappings

    @property
    def _self(self):
        """Gets the _self of this WorkflowScheme.  # noqa: E501


        :return: The _self of this WorkflowScheme.  # noqa: E501
        :rtype: str
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this WorkflowScheme.


        :param _self: The _self of this WorkflowScheme.  # noqa: E501
        :type: str
        """

        self.__self = _self

    @property
    def update_draft_if_needed(self):
        """Gets the update_draft_if_needed of this WorkflowScheme.  # noqa: E501

        Whether to create or update a draft workflow scheme when updating an active workflow scheme. An active workflow scheme is a workflow scheme that is used by at least one project. The following examples show how this property works:   *  Update an active workflow scheme with `updateDraftIfNeeded` set to `true`: If a draft workflow scheme exists, it is updated. Otherwise, a draft workflow scheme is created.  *  Update an active workflow scheme with `updateDraftIfNeeded` set to `false`: An error is returned, as active workflow schemes cannot be updated.  *  Update an inactive workflow scheme with `updateDraftIfNeeded` set to `true`: The workflow scheme is updated, as inactive workflow schemes do not require drafts to update.  Defaults to `false`.  # noqa: E501

        :return: The update_draft_if_needed of this WorkflowScheme.  # noqa: E501
        :rtype: bool
        """
        return self._update_draft_if_needed

    @update_draft_if_needed.setter
    def update_draft_if_needed(self, update_draft_if_needed):
        """Sets the update_draft_if_needed of this WorkflowScheme.

        Whether to create or update a draft workflow scheme when updating an active workflow scheme. An active workflow scheme is a workflow scheme that is used by at least one project. The following examples show how this property works:   *  Update an active workflow scheme with `updateDraftIfNeeded` set to `true`: If a draft workflow scheme exists, it is updated. Otherwise, a draft workflow scheme is created.  *  Update an active workflow scheme with `updateDraftIfNeeded` set to `false`: An error is returned, as active workflow schemes cannot be updated.  *  Update an inactive workflow scheme with `updateDraftIfNeeded` set to `true`: The workflow scheme is updated, as inactive workflow schemes do not require drafts to update.  Defaults to `false`.  # noqa: E501

        :param update_draft_if_needed: The update_draft_if_needed of this WorkflowScheme.  # noqa: E501
        :type: bool
        """

        self._update_draft_if_needed = update_draft_if_needed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WorkflowScheme, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorkflowScheme):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
