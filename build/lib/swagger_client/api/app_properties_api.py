# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class AppPropertiesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def addon_properties_resource_delete_addon_property_delete(self, addon_key, property_key, **kwargs):  # noqa: E501
        """Delete app property  # noqa: E501

        Deletes an app's property.  **[Permissions](#permissions) required:** Only a Connect app whose key matches `addonKey` can make this request. Additionally, Forge apps can access Connect app properties (stored against the same `app.connect.key`).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.addon_properties_resource_delete_addon_property_delete(addon_key, property_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str addon_key: The key of the app, as defined in its descriptor. (required)
        :param str property_key: The key of the property. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.addon_properties_resource_delete_addon_property_delete_with_http_info(addon_key, property_key, **kwargs)  # noqa: E501
        else:
            (data) = self.addon_properties_resource_delete_addon_property_delete_with_http_info(addon_key, property_key, **kwargs)  # noqa: E501
            return data

    def addon_properties_resource_delete_addon_property_delete_with_http_info(self, addon_key, property_key, **kwargs):  # noqa: E501
        """Delete app property  # noqa: E501

        Deletes an app's property.  **[Permissions](#permissions) required:** Only a Connect app whose key matches `addonKey` can make this request. Additionally, Forge apps can access Connect app properties (stored against the same `app.connect.key`).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.addon_properties_resource_delete_addon_property_delete_with_http_info(addon_key, property_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str addon_key: The key of the app, as defined in its descriptor. (required)
        :param str property_key: The key of the property. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['addon_key', 'property_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method addon_properties_resource_delete_addon_property_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'addon_key' is set
        if ('addon_key' not in params or
                params['addon_key'] is None):
            raise ValueError("Missing the required parameter `addon_key` when calling `addon_properties_resource_delete_addon_property_delete`")  # noqa: E501
        # verify the required parameter 'property_key' is set
        if ('property_key' not in params or
                params['property_key'] is None):
            raise ValueError("Missing the required parameter `property_key` when calling `addon_properties_resource_delete_addon_property_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'addon_key' in params:
            path_params['addonKey'] = params['addon_key']  # noqa: E501
        if 'property_key' in params:
            path_params['propertyKey'] = params['property_key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rest/atlassian-connect/1/addons/{addonKey}/properties/{propertyKey}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def addon_properties_resource_get_addon_properties_get(self, addon_key, **kwargs):  # noqa: E501
        """Get app properties  # noqa: E501

        Gets all the properties of an app.  **[Permissions](#permissions) required:** Only a Connect app whose key matches `addonKey` can make this request. Additionally, Forge apps can access Connect app properties (stored against the same `app.connect.key`).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.addon_properties_resource_get_addon_properties_get(addon_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str addon_key: The key of the app, as defined in its descriptor. (required)
        :return: PropertyKeys
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.addon_properties_resource_get_addon_properties_get_with_http_info(addon_key, **kwargs)  # noqa: E501
        else:
            (data) = self.addon_properties_resource_get_addon_properties_get_with_http_info(addon_key, **kwargs)  # noqa: E501
            return data

    def addon_properties_resource_get_addon_properties_get_with_http_info(self, addon_key, **kwargs):  # noqa: E501
        """Get app properties  # noqa: E501

        Gets all the properties of an app.  **[Permissions](#permissions) required:** Only a Connect app whose key matches `addonKey` can make this request. Additionally, Forge apps can access Connect app properties (stored against the same `app.connect.key`).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.addon_properties_resource_get_addon_properties_get_with_http_info(addon_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str addon_key: The key of the app, as defined in its descriptor. (required)
        :return: PropertyKeys
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['addon_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method addon_properties_resource_get_addon_properties_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'addon_key' is set
        if ('addon_key' not in params or
                params['addon_key'] is None):
            raise ValueError("Missing the required parameter `addon_key` when calling `addon_properties_resource_get_addon_properties_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'addon_key' in params:
            path_params['addonKey'] = params['addon_key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rest/atlassian-connect/1/addons/{addonKey}/properties', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PropertyKeys',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def addon_properties_resource_get_addon_property_get(self, addon_key, property_key, **kwargs):  # noqa: E501
        """Get app property  # noqa: E501

        Returns the key and value of an app's property.  **[Permissions](#permissions) required:** Only a Connect app whose key matches `addonKey` can make this request. Additionally, Forge apps can access Connect app properties (stored against the same `app.connect.key`).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.addon_properties_resource_get_addon_property_get(addon_key, property_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str addon_key: The key of the app, as defined in its descriptor. (required)
        :param str property_key: The key of the property. (required)
        :return: EntityProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.addon_properties_resource_get_addon_property_get_with_http_info(addon_key, property_key, **kwargs)  # noqa: E501
        else:
            (data) = self.addon_properties_resource_get_addon_property_get_with_http_info(addon_key, property_key, **kwargs)  # noqa: E501
            return data

    def addon_properties_resource_get_addon_property_get_with_http_info(self, addon_key, property_key, **kwargs):  # noqa: E501
        """Get app property  # noqa: E501

        Returns the key and value of an app's property.  **[Permissions](#permissions) required:** Only a Connect app whose key matches `addonKey` can make this request. Additionally, Forge apps can access Connect app properties (stored against the same `app.connect.key`).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.addon_properties_resource_get_addon_property_get_with_http_info(addon_key, property_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str addon_key: The key of the app, as defined in its descriptor. (required)
        :param str property_key: The key of the property. (required)
        :return: EntityProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['addon_key', 'property_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method addon_properties_resource_get_addon_property_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'addon_key' is set
        if ('addon_key' not in params or
                params['addon_key'] is None):
            raise ValueError("Missing the required parameter `addon_key` when calling `addon_properties_resource_get_addon_property_get`")  # noqa: E501
        # verify the required parameter 'property_key' is set
        if ('property_key' not in params or
                params['property_key'] is None):
            raise ValueError("Missing the required parameter `property_key` when calling `addon_properties_resource_get_addon_property_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'addon_key' in params:
            path_params['addonKey'] = params['addon_key']  # noqa: E501
        if 'property_key' in params:
            path_params['propertyKey'] = params['property_key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rest/atlassian-connect/1/addons/{addonKey}/properties/{propertyKey}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EntityProperty',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def addon_properties_resource_put_addon_property_put(self, body, addon_key, property_key, **kwargs):  # noqa: E501
        """Set app property  # noqa: E501

        Sets the value of an app's property. Use this resource to store custom data for your app.  The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.  **[Permissions](#permissions) required:** Only a Connect app whose key matches `addonKey` can make this request. Additionally, Forge apps can access Connect app properties (stored against the same `app.connect.key`).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.addon_properties_resource_put_addon_property_put(body, addon_key, property_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body: (required)
        :param str addon_key: The key of the app, as defined in its descriptor. (required)
        :param str property_key: The key of the property. (required)
        :return: OperationMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.addon_properties_resource_put_addon_property_put_with_http_info(body, addon_key, property_key, **kwargs)  # noqa: E501
        else:
            (data) = self.addon_properties_resource_put_addon_property_put_with_http_info(body, addon_key, property_key, **kwargs)  # noqa: E501
            return data

    def addon_properties_resource_put_addon_property_put_with_http_info(self, body, addon_key, property_key, **kwargs):  # noqa: E501
        """Set app property  # noqa: E501

        Sets the value of an app's property. Use this resource to store custom data for your app.  The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.  **[Permissions](#permissions) required:** Only a Connect app whose key matches `addonKey` can make this request. Additionally, Forge apps can access Connect app properties (stored against the same `app.connect.key`).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.addon_properties_resource_put_addon_property_put_with_http_info(body, addon_key, property_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body: (required)
        :param str addon_key: The key of the app, as defined in its descriptor. (required)
        :param str property_key: The key of the property. (required)
        :return: OperationMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'addon_key', 'property_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method addon_properties_resource_put_addon_property_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `addon_properties_resource_put_addon_property_put`")  # noqa: E501
        # verify the required parameter 'addon_key' is set
        if ('addon_key' not in params or
                params['addon_key'] is None):
            raise ValueError("Missing the required parameter `addon_key` when calling `addon_properties_resource_put_addon_property_put`")  # noqa: E501
        # verify the required parameter 'property_key' is set
        if ('property_key' not in params or
                params['property_key'] is None):
            raise ValueError("Missing the required parameter `property_key` when calling `addon_properties_resource_put_addon_property_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'addon_key' in params:
            path_params['addonKey'] = params['addon_key']  # noqa: E501
        if 'property_key' in params:
            path_params['propertyKey'] = params['property_key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rest/atlassian-connect/1/addons/{addonKey}/properties/{propertyKey}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OperationMessage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_forge_app_property(self, property_key, **kwargs):  # noqa: E501
        """Delete app property (Forge)  # noqa: E501

        Deletes a Forge app's property.  **[Permissions](#permissions) required:** Only Forge apps can make this request.  The new `write:app-data:jira` OAuth scope is 100% optional now, and not using it won't break your app. However, we recommend adding it to your app's scope list because we will eventually make it mandatory.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_forge_app_property(property_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str property_key: The key of the property. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_forge_app_property_with_http_info(property_key, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_forge_app_property_with_http_info(property_key, **kwargs)  # noqa: E501
            return data

    def delete_forge_app_property_with_http_info(self, property_key, **kwargs):  # noqa: E501
        """Delete app property (Forge)  # noqa: E501

        Deletes a Forge app's property.  **[Permissions](#permissions) required:** Only Forge apps can make this request.  The new `write:app-data:jira` OAuth scope is 100% optional now, and not using it won't break your app. However, we recommend adding it to your app's scope list because we will eventually make it mandatory.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_forge_app_property_with_http_info(property_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str property_key: The key of the property. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['property_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_forge_app_property" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'property_key' is set
        if ('property_key' not in params or
                params['property_key'] is None):
            raise ValueError("Missing the required parameter `property_key` when calling `delete_forge_app_property`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'property_key' in params:
            path_params['propertyKey'] = params['property_key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rest/forge/1/app/properties/{propertyKey}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_forge_app_property(self, body, property_key, **kwargs):  # noqa: E501
        """Set app property (Forge)  # noqa: E501

        Sets the value of a Forge app's property. These values can be retrieved in [Jira expressions](/cloud/jira/platform/jira-expressions/) through the `app` [context variable](/cloud/jira/platform/jira-expressions/#context-variables). They are also available in [entity property display conditions](/platform/forge/manifest-reference/display-conditions/entity-property-conditions/).  For other use cases, use the [Storage API](/platform/forge/runtime-reference/storage-api/).  The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.  **[Permissions](#permissions) required:** Only Forge apps can make this request.  The new `write:app-data:jira` OAuth scope is 100% optional now, and not using it won't break your app. However, we recommend adding it to your app's scope list because we will eventually make it mandatory.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_forge_app_property(body, property_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body: (required)
        :param str property_key: The key of the property. (required)
        :return: OperationMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_forge_app_property_with_http_info(body, property_key, **kwargs)  # noqa: E501
        else:
            (data) = self.put_forge_app_property_with_http_info(body, property_key, **kwargs)  # noqa: E501
            return data

    def put_forge_app_property_with_http_info(self, body, property_key, **kwargs):  # noqa: E501
        """Set app property (Forge)  # noqa: E501

        Sets the value of a Forge app's property. These values can be retrieved in [Jira expressions](/cloud/jira/platform/jira-expressions/) through the `app` [context variable](/cloud/jira/platform/jira-expressions/#context-variables). They are also available in [entity property display conditions](/platform/forge/manifest-reference/display-conditions/entity-property-conditions/).  For other use cases, use the [Storage API](/platform/forge/runtime-reference/storage-api/).  The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.  **[Permissions](#permissions) required:** Only Forge apps can make this request.  The new `write:app-data:jira` OAuth scope is 100% optional now, and not using it won't break your app. However, we recommend adding it to your app's scope list because we will eventually make it mandatory.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_forge_app_property_with_http_info(body, property_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body: (required)
        :param str property_key: The key of the property. (required)
        :return: OperationMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'property_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_forge_app_property" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_forge_app_property`")  # noqa: E501
        # verify the required parameter 'property_key' is set
        if ('property_key' not in params or
                params['property_key'] is None):
            raise ValueError("Missing the required parameter `property_key` when calling `put_forge_app_property`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'property_key' in params:
            path_params['propertyKey'] = params['property_key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rest/forge/1/app/properties/{propertyKey}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OperationMessage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
