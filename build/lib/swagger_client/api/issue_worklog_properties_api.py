# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class IssueWorklogPropertiesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_worklog_property(self, issue_id_or_key, worklog_id, property_key, **kwargs):  # noqa: E501
        """Delete worklog property  # noqa: E501

        Deletes a worklog property.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.  *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_worklog_property(issue_id_or_key, worklog_id, property_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str issue_id_or_key: The ID or key of the issue. (required)
        :param str worklog_id: The ID of the worklog. (required)
        :param str property_key: The key of the property. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_worklog_property_with_http_info(issue_id_or_key, worklog_id, property_key, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_worklog_property_with_http_info(issue_id_or_key, worklog_id, property_key, **kwargs)  # noqa: E501
            return data

    def delete_worklog_property_with_http_info(self, issue_id_or_key, worklog_id, property_key, **kwargs):  # noqa: E501
        """Delete worklog property  # noqa: E501

        Deletes a worklog property.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.  *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_worklog_property_with_http_info(issue_id_or_key, worklog_id, property_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str issue_id_or_key: The ID or key of the issue. (required)
        :param str worklog_id: The ID of the worklog. (required)
        :param str property_key: The key of the property. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['issue_id_or_key', 'worklog_id', 'property_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_worklog_property" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'issue_id_or_key' is set
        if ('issue_id_or_key' not in params or
                params['issue_id_or_key'] is None):
            raise ValueError("Missing the required parameter `issue_id_or_key` when calling `delete_worklog_property`")  # noqa: E501
        # verify the required parameter 'worklog_id' is set
        if ('worklog_id' not in params or
                params['worklog_id'] is None):
            raise ValueError("Missing the required parameter `worklog_id` when calling `delete_worklog_property`")  # noqa: E501
        # verify the required parameter 'property_key' is set
        if ('property_key' not in params or
                params['property_key'] is None):
            raise ValueError("Missing the required parameter `property_key` when calling `delete_worklog_property`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'issue_id_or_key' in params:
            path_params['issueIdOrKey'] = params['issue_id_or_key']  # noqa: E501
        if 'worklog_id' in params:
            path_params['worklogId'] = params['worklog_id']  # noqa: E501
        if 'property_key' in params:
            path_params['propertyKey'] = params['property_key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['OAuth2', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rest/api/3/issue/{issueIdOrKey}/worklog/{worklogId}/properties/{propertyKey}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_worklog_property(self, issue_id_or_key, worklog_id, property_key, **kwargs):  # noqa: E501
        """Get worklog property  # noqa: E501

        Returns the value of a worklog property.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.  *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_worklog_property(issue_id_or_key, worklog_id, property_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str issue_id_or_key: The ID or key of the issue. (required)
        :param str worklog_id: The ID of the worklog. (required)
        :param str property_key: The key of the property. (required)
        :return: EntityProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_worklog_property_with_http_info(issue_id_or_key, worklog_id, property_key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_worklog_property_with_http_info(issue_id_or_key, worklog_id, property_key, **kwargs)  # noqa: E501
            return data

    def get_worklog_property_with_http_info(self, issue_id_or_key, worklog_id, property_key, **kwargs):  # noqa: E501
        """Get worklog property  # noqa: E501

        Returns the value of a worklog property.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.  *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_worklog_property_with_http_info(issue_id_or_key, worklog_id, property_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str issue_id_or_key: The ID or key of the issue. (required)
        :param str worklog_id: The ID of the worklog. (required)
        :param str property_key: The key of the property. (required)
        :return: EntityProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['issue_id_or_key', 'worklog_id', 'property_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_worklog_property" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'issue_id_or_key' is set
        if ('issue_id_or_key' not in params or
                params['issue_id_or_key'] is None):
            raise ValueError("Missing the required parameter `issue_id_or_key` when calling `get_worklog_property`")  # noqa: E501
        # verify the required parameter 'worklog_id' is set
        if ('worklog_id' not in params or
                params['worklog_id'] is None):
            raise ValueError("Missing the required parameter `worklog_id` when calling `get_worklog_property`")  # noqa: E501
        # verify the required parameter 'property_key' is set
        if ('property_key' not in params or
                params['property_key'] is None):
            raise ValueError("Missing the required parameter `property_key` when calling `get_worklog_property`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'issue_id_or_key' in params:
            path_params['issueIdOrKey'] = params['issue_id_or_key']  # noqa: E501
        if 'worklog_id' in params:
            path_params['worklogId'] = params['worklog_id']  # noqa: E501
        if 'property_key' in params:
            path_params['propertyKey'] = params['property_key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rest/api/3/issue/{issueIdOrKey}/worklog/{worklogId}/properties/{propertyKey}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EntityProperty',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_worklog_property_keys(self, issue_id_or_key, worklog_id, **kwargs):  # noqa: E501
        """Get worklog property keys  # noqa: E501

        Returns the keys of all properties for a worklog.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.  *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_worklog_property_keys(issue_id_or_key, worklog_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str issue_id_or_key: The ID or key of the issue. (required)
        :param str worklog_id: The ID of the worklog. (required)
        :return: PropertyKeys
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_worklog_property_keys_with_http_info(issue_id_or_key, worklog_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_worklog_property_keys_with_http_info(issue_id_or_key, worklog_id, **kwargs)  # noqa: E501
            return data

    def get_worklog_property_keys_with_http_info(self, issue_id_or_key, worklog_id, **kwargs):  # noqa: E501
        """Get worklog property keys  # noqa: E501

        Returns the keys of all properties for a worklog.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.  *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_worklog_property_keys_with_http_info(issue_id_or_key, worklog_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str issue_id_or_key: The ID or key of the issue. (required)
        :param str worklog_id: The ID of the worklog. (required)
        :return: PropertyKeys
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['issue_id_or_key', 'worklog_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_worklog_property_keys" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'issue_id_or_key' is set
        if ('issue_id_or_key' not in params or
                params['issue_id_or_key'] is None):
            raise ValueError("Missing the required parameter `issue_id_or_key` when calling `get_worklog_property_keys`")  # noqa: E501
        # verify the required parameter 'worklog_id' is set
        if ('worklog_id' not in params or
                params['worklog_id'] is None):
            raise ValueError("Missing the required parameter `worklog_id` when calling `get_worklog_property_keys`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'issue_id_or_key' in params:
            path_params['issueIdOrKey'] = params['issue_id_or_key']  # noqa: E501
        if 'worklog_id' in params:
            path_params['worklogId'] = params['worklog_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rest/api/3/issue/{issueIdOrKey}/worklog/{worklogId}/properties', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PropertyKeys',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_worklog_property(self, body, issue_id_or_key, worklog_id, property_key, **kwargs):  # noqa: E501
        """Set worklog property  # noqa: E501

        Sets the value of a worklog property. Use this operation to store custom data against the worklog.  The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.  *  *Edit all worklogs*[ project permission](https://confluence.atlassian.com/x/yodKLg) to update any worklog or *Edit own worklogs* to update worklogs created by the user.  *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_worklog_property(body, issue_id_or_key, worklog_id, property_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body: The value of the property. The value has to be a valid, non-empty [JSON](https://tools.ietf.org/html/rfc4627) value. The maximum length of the property value is 32768 bytes. (required)
        :param str issue_id_or_key: The ID or key of the issue. (required)
        :param str worklog_id: The ID of the worklog. (required)
        :param str property_key: The key of the issue property. The maximum length is 255 characters. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.set_worklog_property_with_http_info(body, issue_id_or_key, worklog_id, property_key, **kwargs)  # noqa: E501
        else:
            (data) = self.set_worklog_property_with_http_info(body, issue_id_or_key, worklog_id, property_key, **kwargs)  # noqa: E501
            return data

    def set_worklog_property_with_http_info(self, body, issue_id_or_key, worklog_id, property_key, **kwargs):  # noqa: E501
        """Set worklog property  # noqa: E501

        Sets the value of a worklog property. Use this operation to store custom data against the worklog.  The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.  *  *Edit all worklogs*[ project permission](https://confluence.atlassian.com/x/yodKLg) to update any worklog or *Edit own worklogs* to update worklogs created by the user.  *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_worklog_property_with_http_info(body, issue_id_or_key, worklog_id, property_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body: The value of the property. The value has to be a valid, non-empty [JSON](https://tools.ietf.org/html/rfc4627) value. The maximum length of the property value is 32768 bytes. (required)
        :param str issue_id_or_key: The ID or key of the issue. (required)
        :param str worklog_id: The ID of the worklog. (required)
        :param str property_key: The key of the issue property. The maximum length is 255 characters. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'issue_id_or_key', 'worklog_id', 'property_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_worklog_property" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `set_worklog_property`")  # noqa: E501
        # verify the required parameter 'issue_id_or_key' is set
        if ('issue_id_or_key' not in params or
                params['issue_id_or_key'] is None):
            raise ValueError("Missing the required parameter `issue_id_or_key` when calling `set_worklog_property`")  # noqa: E501
        # verify the required parameter 'worklog_id' is set
        if ('worklog_id' not in params or
                params['worklog_id'] is None):
            raise ValueError("Missing the required parameter `worklog_id` when calling `set_worklog_property`")  # noqa: E501
        # verify the required parameter 'property_key' is set
        if ('property_key' not in params or
                params['property_key'] is None):
            raise ValueError("Missing the required parameter `property_key` when calling `set_worklog_property`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'issue_id_or_key' in params:
            path_params['issueIdOrKey'] = params['issue_id_or_key']  # noqa: E501
        if 'worklog_id' in params:
            path_params['worklogId'] = params['worklog_id']  # noqa: E501
        if 'property_key' in params:
            path_params['propertyKey'] = params['property_key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rest/api/3/issue/{issueIdOrKey}/worklog/{worklogId}/properties/{propertyKey}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
