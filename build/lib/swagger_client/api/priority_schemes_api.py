# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class PrioritySchemesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_priority_scheme(self, body, **kwargs):  # noqa: E501
        """Create priority scheme  # noqa: E501

        Creates a new priority scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_priority_scheme(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreatePrioritySchemeDetails body: (required)
        :return: PrioritySchemeId
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_priority_scheme_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_priority_scheme_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_priority_scheme_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create priority scheme  # noqa: E501

        Creates a new priority scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_priority_scheme_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreatePrioritySchemeDetails body: (required)
        :return: PrioritySchemeId
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_priority_scheme" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_priority_scheme`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rest/api/3/priorityscheme', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PrioritySchemeId',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_priority_scheme(self, scheme_id, **kwargs):  # noqa: E501
        """Delete priority scheme  # noqa: E501

        Deletes a priority scheme.  This operation is only available for priority schemes without any associated projects. Any associated projects must be removed from the priority scheme before this operation can be performed.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_priority_scheme(scheme_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int scheme_id: The priority scheme ID. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_priority_scheme_with_http_info(scheme_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_priority_scheme_with_http_info(scheme_id, **kwargs)  # noqa: E501
            return data

    def delete_priority_scheme_with_http_info(self, scheme_id, **kwargs):  # noqa: E501
        """Delete priority scheme  # noqa: E501

        Deletes a priority scheme.  This operation is only available for priority schemes without any associated projects. Any associated projects must be removed from the priority scheme before this operation can be performed.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_priority_scheme_with_http_info(scheme_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int scheme_id: The priority scheme ID. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['scheme_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_priority_scheme" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'scheme_id' is set
        if ('scheme_id' not in params or
                params['scheme_id'] is None):
            raise ValueError("Missing the required parameter `scheme_id` when calling `delete_priority_scheme`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'scheme_id' in params:
            path_params['schemeId'] = params['scheme_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rest/api/3/priorityscheme/{schemeId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_available_priorities_by_priority_scheme(self, scheme_id, **kwargs):  # noqa: E501
        """Get available priorities by priority scheme  # noqa: E501

        Returns a [paginated](#pagination) list of priorities available for adding to a priority scheme.  **[Permissions](#permissions) required:** Permission to access Jira.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_available_priorities_by_priority_scheme(scheme_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scheme_id: The priority scheme ID. (required)
        :param str start_at: The index of the first item to return in a page of results (page offset).
        :param str max_results: The maximum number of items to return per page.
        :param str query: The string to query priorities on by name.
        :param list[str] exclude: A list of priority IDs to exclude from the results.
        :return: PageBeanPriorityWithSequence
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_available_priorities_by_priority_scheme_with_http_info(scheme_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_available_priorities_by_priority_scheme_with_http_info(scheme_id, **kwargs)  # noqa: E501
            return data

    def get_available_priorities_by_priority_scheme_with_http_info(self, scheme_id, **kwargs):  # noqa: E501
        """Get available priorities by priority scheme  # noqa: E501

        Returns a [paginated](#pagination) list of priorities available for adding to a priority scheme.  **[Permissions](#permissions) required:** Permission to access Jira.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_available_priorities_by_priority_scheme_with_http_info(scheme_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scheme_id: The priority scheme ID. (required)
        :param str start_at: The index of the first item to return in a page of results (page offset).
        :param str max_results: The maximum number of items to return per page.
        :param str query: The string to query priorities on by name.
        :param list[str] exclude: A list of priority IDs to exclude from the results.
        :return: PageBeanPriorityWithSequence
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['scheme_id', 'start_at', 'max_results', 'query', 'exclude']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_available_priorities_by_priority_scheme" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'scheme_id' is set
        if ('scheme_id' not in params or
                params['scheme_id'] is None):
            raise ValueError("Missing the required parameter `scheme_id` when calling `get_available_priorities_by_priority_scheme`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_at' in params:
            query_params.append(('startAt', params['start_at']))  # noqa: E501
        if 'max_results' in params:
            query_params.append(('maxResults', params['max_results']))  # noqa: E501
        if 'query' in params:
            query_params.append(('query', params['query']))  # noqa: E501
        if 'scheme_id' in params:
            query_params.append(('schemeId', params['scheme_id']))  # noqa: E501
        if 'exclude' in params:
            query_params.append(('exclude', params['exclude']))  # noqa: E501
            collection_formats['exclude'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rest/api/3/priorityscheme/priorities/available', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PageBeanPriorityWithSequence',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_priorities_by_priority_scheme(self, scheme_id, **kwargs):  # noqa: E501
        """Get priorities by priority scheme  # noqa: E501

        Returns a [paginated](#pagination) list of priorities by scheme.  **[Permissions](#permissions) required:** Permission to access Jira.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_priorities_by_priority_scheme(scheme_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scheme_id: The priority scheme ID. (required)
        :param str start_at: The index of the first item to return in a page of results (page offset).
        :param str max_results: The maximum number of items to return per page.
        :return: PageBeanPriorityWithSequence
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_priorities_by_priority_scheme_with_http_info(scheme_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_priorities_by_priority_scheme_with_http_info(scheme_id, **kwargs)  # noqa: E501
            return data

    def get_priorities_by_priority_scheme_with_http_info(self, scheme_id, **kwargs):  # noqa: E501
        """Get priorities by priority scheme  # noqa: E501

        Returns a [paginated](#pagination) list of priorities by scheme.  **[Permissions](#permissions) required:** Permission to access Jira.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_priorities_by_priority_scheme_with_http_info(scheme_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scheme_id: The priority scheme ID. (required)
        :param str start_at: The index of the first item to return in a page of results (page offset).
        :param str max_results: The maximum number of items to return per page.
        :return: PageBeanPriorityWithSequence
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['scheme_id', 'start_at', 'max_results']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_priorities_by_priority_scheme" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'scheme_id' is set
        if ('scheme_id' not in params or
                params['scheme_id'] is None):
            raise ValueError("Missing the required parameter `scheme_id` when calling `get_priorities_by_priority_scheme`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'scheme_id' in params:
            path_params['schemeId'] = params['scheme_id']  # noqa: E501

        query_params = []
        if 'start_at' in params:
            query_params.append(('startAt', params['start_at']))  # noqa: E501
        if 'max_results' in params:
            query_params.append(('maxResults', params['max_results']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rest/api/3/priorityscheme/{schemeId}/priorities', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PageBeanPriorityWithSequence',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_priority_schemes(self, **kwargs):  # noqa: E501
        """Get priority schemes  # noqa: E501

        Returns a [paginated](#pagination) list of priority schemes.  **[Permissions](#permissions) required:** Permission to access Jira.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_priority_schemes(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_at: The index of the first item to return in a page of results (page offset).
        :param str max_results: The maximum number of items to return per page.
        :param list[int] priority_id: A set of priority IDs to filter by. To include multiple IDs, provide an ampersand-separated list. For example, `priorityId=10000&priorityId=10001`.
        :param list[int] scheme_id: A set of priority scheme IDs. To include multiple IDs, provide an ampersand-separated list. For example, `schemeId=10000&schemeId=10001`.
        :param str scheme_name: The name of scheme to search for.
        :param bool only_default: Whether only the default priority is returned.
        :param str order_by: The ordering to return the priority schemes by.
        :param str expand: A comma separated list of additional information to return. \"priorities\" will return priorities associated with the priority scheme. \"projects\" will return projects associated with the priority scheme. `expand=priorities,projects`.
        :return: PageBeanPrioritySchemeWithPaginatedPrioritiesAndProjects
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_priority_schemes_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_priority_schemes_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_priority_schemes_with_http_info(self, **kwargs):  # noqa: E501
        """Get priority schemes  # noqa: E501

        Returns a [paginated](#pagination) list of priority schemes.  **[Permissions](#permissions) required:** Permission to access Jira.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_priority_schemes_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_at: The index of the first item to return in a page of results (page offset).
        :param str max_results: The maximum number of items to return per page.
        :param list[int] priority_id: A set of priority IDs to filter by. To include multiple IDs, provide an ampersand-separated list. For example, `priorityId=10000&priorityId=10001`.
        :param list[int] scheme_id: A set of priority scheme IDs. To include multiple IDs, provide an ampersand-separated list. For example, `schemeId=10000&schemeId=10001`.
        :param str scheme_name: The name of scheme to search for.
        :param bool only_default: Whether only the default priority is returned.
        :param str order_by: The ordering to return the priority schemes by.
        :param str expand: A comma separated list of additional information to return. \"priorities\" will return priorities associated with the priority scheme. \"projects\" will return projects associated with the priority scheme. `expand=priorities,projects`.
        :return: PageBeanPrioritySchemeWithPaginatedPrioritiesAndProjects
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_at', 'max_results', 'priority_id', 'scheme_id', 'scheme_name', 'only_default', 'order_by', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_priority_schemes" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_at' in params:
            query_params.append(('startAt', params['start_at']))  # noqa: E501
        if 'max_results' in params:
            query_params.append(('maxResults', params['max_results']))  # noqa: E501
        if 'priority_id' in params:
            query_params.append(('priorityId', params['priority_id']))  # noqa: E501
            collection_formats['priorityId'] = 'multi'  # noqa: E501
        if 'scheme_id' in params:
            query_params.append(('schemeId', params['scheme_id']))  # noqa: E501
            collection_formats['schemeId'] = 'multi'  # noqa: E501
        if 'scheme_name' in params:
            query_params.append(('schemeName', params['scheme_name']))  # noqa: E501
        if 'only_default' in params:
            query_params.append(('onlyDefault', params['only_default']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('orderBy', params['order_by']))  # noqa: E501
        if 'expand' in params:
            query_params.append(('expand', params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rest/api/3/priorityscheme', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PageBeanPrioritySchemeWithPaginatedPrioritiesAndProjects',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_projects_by_priority_scheme(self, scheme_id, **kwargs):  # noqa: E501
        """Get projects by priority scheme  # noqa: E501

        Returns a [paginated](#pagination) list of projects by scheme.  **[Permissions](#permissions) required:** Permission to access Jira.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_projects_by_priority_scheme(scheme_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scheme_id: The priority scheme ID. (required)
        :param str start_at: The index of the first item to return in a page of results (page offset).
        :param str max_results: The maximum number of items to return per page.
        :param list[int] project_id: The project IDs to filter by. For example, `projectId=10000&projectId=10001`.
        :param str query: The string to query projects on by name.
        :return: PageBeanProject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_projects_by_priority_scheme_with_http_info(scheme_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_projects_by_priority_scheme_with_http_info(scheme_id, **kwargs)  # noqa: E501
            return data

    def get_projects_by_priority_scheme_with_http_info(self, scheme_id, **kwargs):  # noqa: E501
        """Get projects by priority scheme  # noqa: E501

        Returns a [paginated](#pagination) list of projects by scheme.  **[Permissions](#permissions) required:** Permission to access Jira.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_projects_by_priority_scheme_with_http_info(scheme_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scheme_id: The priority scheme ID. (required)
        :param str start_at: The index of the first item to return in a page of results (page offset).
        :param str max_results: The maximum number of items to return per page.
        :param list[int] project_id: The project IDs to filter by. For example, `projectId=10000&projectId=10001`.
        :param str query: The string to query projects on by name.
        :return: PageBeanProject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['scheme_id', 'start_at', 'max_results', 'project_id', 'query']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_projects_by_priority_scheme" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'scheme_id' is set
        if ('scheme_id' not in params or
                params['scheme_id'] is None):
            raise ValueError("Missing the required parameter `scheme_id` when calling `get_projects_by_priority_scheme`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'scheme_id' in params:
            path_params['schemeId'] = params['scheme_id']  # noqa: E501

        query_params = []
        if 'start_at' in params:
            query_params.append(('startAt', params['start_at']))  # noqa: E501
        if 'max_results' in params:
            query_params.append(('maxResults', params['max_results']))  # noqa: E501
        if 'project_id' in params:
            query_params.append(('projectId', params['project_id']))  # noqa: E501
            collection_formats['projectId'] = 'multi'  # noqa: E501
        if 'query' in params:
            query_params.append(('query', params['query']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rest/api/3/priorityscheme/{schemeId}/projects', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PageBeanProject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def suggested_priorities_for_mappings(self, body, **kwargs):  # noqa: E501
        """Suggested priorities for mappings  # noqa: E501

        Returns a [paginated](#pagination) list of priorities that would require mapping, given a change in priorities or projects associated with a priority scheme.  **[Permissions](#permissions) required:** Permission to access Jira.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.suggested_priorities_for_mappings(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SuggestedMappingsRequestBean body: (required)
        :return: PageBeanPriorityWithSequence
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.suggested_priorities_for_mappings_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.suggested_priorities_for_mappings_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def suggested_priorities_for_mappings_with_http_info(self, body, **kwargs):  # noqa: E501
        """Suggested priorities for mappings  # noqa: E501

        Returns a [paginated](#pagination) list of priorities that would require mapping, given a change in priorities or projects associated with a priority scheme.  **[Permissions](#permissions) required:** Permission to access Jira.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.suggested_priorities_for_mappings_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SuggestedMappingsRequestBean body: (required)
        :return: PageBeanPriorityWithSequence
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method suggested_priorities_for_mappings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `suggested_priorities_for_mappings`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rest/api/3/priorityscheme/mappings', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PageBeanPriorityWithSequence',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_priority_scheme(self, body, scheme_id, **kwargs):  # noqa: E501
        """Update priority scheme  # noqa: E501

        Updates a priority scheme. This includes its details, the lists of priorities and projects in it  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_priority_scheme(body, scheme_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdatePrioritySchemeRequestBean body: (required)
        :param int scheme_id: The ID of the priority scheme. (required)
        :return: UpdatePrioritySchemeResponseBean
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_priority_scheme_with_http_info(body, scheme_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_priority_scheme_with_http_info(body, scheme_id, **kwargs)  # noqa: E501
            return data

    def update_priority_scheme_with_http_info(self, body, scheme_id, **kwargs):  # noqa: E501
        """Update priority scheme  # noqa: E501

        Updates a priority scheme. This includes its details, the lists of priorities and projects in it  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_priority_scheme_with_http_info(body, scheme_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdatePrioritySchemeRequestBean body: (required)
        :param int scheme_id: The ID of the priority scheme. (required)
        :return: UpdatePrioritySchemeResponseBean
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'scheme_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_priority_scheme" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_priority_scheme`")  # noqa: E501
        # verify the required parameter 'scheme_id' is set
        if ('scheme_id' not in params or
                params['scheme_id'] is None):
            raise ValueError("Missing the required parameter `scheme_id` when calling `update_priority_scheme`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'scheme_id' in params:
            path_params['schemeId'] = params['scheme_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rest/api/3/priorityscheme/{schemeId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UpdatePrioritySchemeResponseBean',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
