# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ProjectPermissionSchemesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def assign_permission_scheme(self, body, project_key_or_id, **kwargs):  # noqa: E501
        """Assign permission scheme  # noqa: E501

        Assigns a permission scheme with a project. See [Managing project permissions](https://confluence.atlassian.com/x/yodKLg) for more information about permission schemes.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assign_permission_scheme(body, project_key_or_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IdBean body: (required)
        :param str project_key_or_id: The project ID or project key (case sensitive). (required)
        :param str expand: Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are included when you specify any value. Expand options include:   *  `all` Returns all expandable information.  *  `field` Returns information about the custom field granted the permission.  *  `group` Returns information about the group that is granted the permission.  *  `permissions` Returns all permission grants for each permission scheme.  *  `projectRole` Returns information about the project role granted the permission.  *  `user` Returns information about the user who is granted the permission.
        :return: PermissionScheme
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assign_permission_scheme_with_http_info(body, project_key_or_id, **kwargs)  # noqa: E501
        else:
            (data) = self.assign_permission_scheme_with_http_info(body, project_key_or_id, **kwargs)  # noqa: E501
            return data

    def assign_permission_scheme_with_http_info(self, body, project_key_or_id, **kwargs):  # noqa: E501
        """Assign permission scheme  # noqa: E501

        Assigns a permission scheme with a project. See [Managing project permissions](https://confluence.atlassian.com/x/yodKLg) for more information about permission schemes.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assign_permission_scheme_with_http_info(body, project_key_or_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IdBean body: (required)
        :param str project_key_or_id: The project ID or project key (case sensitive). (required)
        :param str expand: Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are included when you specify any value. Expand options include:   *  `all` Returns all expandable information.  *  `field` Returns information about the custom field granted the permission.  *  `group` Returns information about the group that is granted the permission.  *  `permissions` Returns all permission grants for each permission scheme.  *  `projectRole` Returns information about the project role granted the permission.  *  `user` Returns information about the user who is granted the permission.
        :return: PermissionScheme
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'project_key_or_id', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assign_permission_scheme" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `assign_permission_scheme`")  # noqa: E501
        # verify the required parameter 'project_key_or_id' is set
        if ('project_key_or_id' not in params or
                params['project_key_or_id'] is None):
            raise ValueError("Missing the required parameter `project_key_or_id` when calling `assign_permission_scheme`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_key_or_id' in params:
            path_params['projectKeyOrId'] = params['project_key_or_id']  # noqa: E501

        query_params = []
        if 'expand' in params:
            query_params.append(('expand', params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rest/api/3/project/{projectKeyOrId}/permissionscheme', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PermissionScheme',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_assigned_permission_scheme(self, project_key_or_id, **kwargs):  # noqa: E501
        """Get assigned permission scheme  # noqa: E501

        Gets the [permission scheme](https://confluence.atlassian.com/x/yodKLg) associated with the project.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_assigned_permission_scheme(project_key_or_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_key_or_id: The project ID or project key (case sensitive). (required)
        :param str expand: Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are included when you specify any value. Expand options include:   *  `all` Returns all expandable information.  *  `field` Returns information about the custom field granted the permission.  *  `group` Returns information about the group that is granted the permission.  *  `permissions` Returns all permission grants for each permission scheme.  *  `projectRole` Returns information about the project role granted the permission.  *  `user` Returns information about the user who is granted the permission.
        :return: PermissionScheme
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_assigned_permission_scheme_with_http_info(project_key_or_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_assigned_permission_scheme_with_http_info(project_key_or_id, **kwargs)  # noqa: E501
            return data

    def get_assigned_permission_scheme_with_http_info(self, project_key_or_id, **kwargs):  # noqa: E501
        """Get assigned permission scheme  # noqa: E501

        Gets the [permission scheme](https://confluence.atlassian.com/x/yodKLg) associated with the project.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_assigned_permission_scheme_with_http_info(project_key_or_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_key_or_id: The project ID or project key (case sensitive). (required)
        :param str expand: Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are included when you specify any value. Expand options include:   *  `all` Returns all expandable information.  *  `field` Returns information about the custom field granted the permission.  *  `group` Returns information about the group that is granted the permission.  *  `permissions` Returns all permission grants for each permission scheme.  *  `projectRole` Returns information about the project role granted the permission.  *  `user` Returns information about the user who is granted the permission.
        :return: PermissionScheme
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_key_or_id', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_assigned_permission_scheme" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_key_or_id' is set
        if ('project_key_or_id' not in params or
                params['project_key_or_id'] is None):
            raise ValueError("Missing the required parameter `project_key_or_id` when calling `get_assigned_permission_scheme`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_key_or_id' in params:
            path_params['projectKeyOrId'] = params['project_key_or_id']  # noqa: E501

        query_params = []
        if 'expand' in params:
            query_params.append(('expand', params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rest/api/3/project/{projectKeyOrId}/permissionscheme', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PermissionScheme',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_project_issue_security_scheme(self, project_key_or_id, **kwargs):  # noqa: E501
        """Get project issue security scheme  # noqa: E501

        Returns the [issue security scheme](https://confluence.atlassian.com/x/J4lKLg) associated with the project.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or the *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_project_issue_security_scheme(project_key_or_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_key_or_id: The project ID or project key (case sensitive). (required)
        :return: SecurityScheme
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_project_issue_security_scheme_with_http_info(project_key_or_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_project_issue_security_scheme_with_http_info(project_key_or_id, **kwargs)  # noqa: E501
            return data

    def get_project_issue_security_scheme_with_http_info(self, project_key_or_id, **kwargs):  # noqa: E501
        """Get project issue security scheme  # noqa: E501

        Returns the [issue security scheme](https://confluence.atlassian.com/x/J4lKLg) associated with the project.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or the *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_project_issue_security_scheme_with_http_info(project_key_or_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_key_or_id: The project ID or project key (case sensitive). (required)
        :return: SecurityScheme
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_key_or_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_project_issue_security_scheme" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_key_or_id' is set
        if ('project_key_or_id' not in params or
                params['project_key_or_id'] is None):
            raise ValueError("Missing the required parameter `project_key_or_id` when calling `get_project_issue_security_scheme`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_key_or_id' in params:
            path_params['projectKeyOrId'] = params['project_key_or_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rest/api/3/project/{projectKeyOrId}/issuesecuritylevelscheme', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SecurityScheme',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_security_levels_for_project(self, project_key_or_id, **kwargs):  # noqa: E501
        """Get project issue security levels  # noqa: E501

        Returns all [issue security](https://confluence.atlassian.com/x/J4lKLg) levels for the project that the user has access to.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Browse projects* [global permission](https://confluence.atlassian.com/x/x4dKLg) for the project, however, issue security levels are only returned for authenticated user with *Set Issue Security* [global permission](https://confluence.atlassian.com/x/x4dKLg) for the project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_security_levels_for_project(project_key_or_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_key_or_id: The project ID or project key (case sensitive). (required)
        :return: ProjectIssueSecurityLevels
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_security_levels_for_project_with_http_info(project_key_or_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_security_levels_for_project_with_http_info(project_key_or_id, **kwargs)  # noqa: E501
            return data

    def get_security_levels_for_project_with_http_info(self, project_key_or_id, **kwargs):  # noqa: E501
        """Get project issue security levels  # noqa: E501

        Returns all [issue security](https://confluence.atlassian.com/x/J4lKLg) levels for the project that the user has access to.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Browse projects* [global permission](https://confluence.atlassian.com/x/x4dKLg) for the project, however, issue security levels are only returned for authenticated user with *Set Issue Security* [global permission](https://confluence.atlassian.com/x/x4dKLg) for the project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_security_levels_for_project_with_http_info(project_key_or_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_key_or_id: The project ID or project key (case sensitive). (required)
        :return: ProjectIssueSecurityLevels
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_key_or_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_security_levels_for_project" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_key_or_id' is set
        if ('project_key_or_id' not in params or
                params['project_key_or_id'] is None):
            raise ValueError("Missing the required parameter `project_key_or_id` when calling `get_security_levels_for_project`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_key_or_id' in params:
            path_params['projectKeyOrId'] = params['project_key_or_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rest/api/3/project/{projectKeyOrId}/securitylevel', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProjectIssueSecurityLevels',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
