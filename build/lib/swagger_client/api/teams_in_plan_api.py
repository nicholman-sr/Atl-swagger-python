# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class TeamsInPlanApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_atlassian_team(self, body, plan_id, **kwargs):  # noqa: E501
        """Add Atlassian team to plan  # noqa: E501

        Adds an existing Atlassian team to a plan and configures their plannning settings.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_atlassian_team(body, plan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddAtlassianTeamRequest body: (required)
        :param int plan_id: The ID of the plan. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_atlassian_team_with_http_info(body, plan_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_atlassian_team_with_http_info(body, plan_id, **kwargs)  # noqa: E501
            return data

    def add_atlassian_team_with_http_info(self, body, plan_id, **kwargs):  # noqa: E501
        """Add Atlassian team to plan  # noqa: E501

        Adds an existing Atlassian team to a plan and configures their plannning settings.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_atlassian_team_with_http_info(body, plan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddAtlassianTeamRequest body: (required)
        :param int plan_id: The ID of the plan. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'plan_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_atlassian_team" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_atlassian_team`")  # noqa: E501
        # verify the required parameter 'plan_id' is set
        if ('plan_id' not in params or
                params['plan_id'] is None):
            raise ValueError("Missing the required parameter `plan_id` when calling `add_atlassian_team`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'plan_id' in params:
            path_params['planId'] = params['plan_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rest/api/3/plans/plan/{planId}/team/atlassian', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_plan_only_team(self, body, plan_id, **kwargs):  # noqa: E501
        """Create plan-only team  # noqa: E501

        Creates a plan-only team and configures their planning settings.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_plan_only_team(body, plan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreatePlanOnlyTeamRequest body: (required)
        :param int plan_id: The ID of the plan. (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_plan_only_team_with_http_info(body, plan_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_plan_only_team_with_http_info(body, plan_id, **kwargs)  # noqa: E501
            return data

    def create_plan_only_team_with_http_info(self, body, plan_id, **kwargs):  # noqa: E501
        """Create plan-only team  # noqa: E501

        Creates a plan-only team and configures their planning settings.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_plan_only_team_with_http_info(body, plan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreatePlanOnlyTeamRequest body: (required)
        :param int plan_id: The ID of the plan. (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'plan_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_plan_only_team" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_plan_only_team`")  # noqa: E501
        # verify the required parameter 'plan_id' is set
        if ('plan_id' not in params or
                params['plan_id'] is None):
            raise ValueError("Missing the required parameter `plan_id` when calling `create_plan_only_team`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'plan_id' in params:
            path_params['planId'] = params['plan_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rest/api/3/plans/plan/{planId}/team/planonly', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_plan_only_team(self, plan_id, plan_only_team_id, **kwargs):  # noqa: E501
        """Delete plan-only team  # noqa: E501

        Deletes a plan-only team and their planning settings.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_plan_only_team(plan_id, plan_only_team_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int plan_id: The ID of the plan. (required)
        :param int plan_only_team_id: The ID of the plan-only team. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_plan_only_team_with_http_info(plan_id, plan_only_team_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_plan_only_team_with_http_info(plan_id, plan_only_team_id, **kwargs)  # noqa: E501
            return data

    def delete_plan_only_team_with_http_info(self, plan_id, plan_only_team_id, **kwargs):  # noqa: E501
        """Delete plan-only team  # noqa: E501

        Deletes a plan-only team and their planning settings.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_plan_only_team_with_http_info(plan_id, plan_only_team_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int plan_id: The ID of the plan. (required)
        :param int plan_only_team_id: The ID of the plan-only team. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['plan_id', 'plan_only_team_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_plan_only_team" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'plan_id' is set
        if ('plan_id' not in params or
                params['plan_id'] is None):
            raise ValueError("Missing the required parameter `plan_id` when calling `delete_plan_only_team`")  # noqa: E501
        # verify the required parameter 'plan_only_team_id' is set
        if ('plan_only_team_id' not in params or
                params['plan_only_team_id'] is None):
            raise ValueError("Missing the required parameter `plan_only_team_id` when calling `delete_plan_only_team`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'plan_id' in params:
            path_params['planId'] = params['plan_id']  # noqa: E501
        if 'plan_only_team_id' in params:
            path_params['planOnlyTeamId'] = params['plan_only_team_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rest/api/3/plans/plan/{planId}/team/planonly/{planOnlyTeamId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_atlassian_team(self, plan_id, atlassian_team_id, **kwargs):  # noqa: E501
        """Get Atlassian team in plan  # noqa: E501

        Returns planning settings for an Atlassian team in a plan.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_atlassian_team(plan_id, atlassian_team_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int plan_id: The ID of the plan. (required)
        :param str atlassian_team_id: The ID of the Atlassian team. (required)
        :return: GetAtlassianTeamResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_atlassian_team_with_http_info(plan_id, atlassian_team_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_atlassian_team_with_http_info(plan_id, atlassian_team_id, **kwargs)  # noqa: E501
            return data

    def get_atlassian_team_with_http_info(self, plan_id, atlassian_team_id, **kwargs):  # noqa: E501
        """Get Atlassian team in plan  # noqa: E501

        Returns planning settings for an Atlassian team in a plan.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_atlassian_team_with_http_info(plan_id, atlassian_team_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int plan_id: The ID of the plan. (required)
        :param str atlassian_team_id: The ID of the Atlassian team. (required)
        :return: GetAtlassianTeamResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['plan_id', 'atlassian_team_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_atlassian_team" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'plan_id' is set
        if ('plan_id' not in params or
                params['plan_id'] is None):
            raise ValueError("Missing the required parameter `plan_id` when calling `get_atlassian_team`")  # noqa: E501
        # verify the required parameter 'atlassian_team_id' is set
        if ('atlassian_team_id' not in params or
                params['atlassian_team_id'] is None):
            raise ValueError("Missing the required parameter `atlassian_team_id` when calling `get_atlassian_team`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'plan_id' in params:
            path_params['planId'] = params['plan_id']  # noqa: E501
        if 'atlassian_team_id' in params:
            path_params['atlassianTeamId'] = params['atlassian_team_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rest/api/3/plans/plan/{planId}/team/atlassian/{atlassianTeamId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetAtlassianTeamResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_plan_only_team(self, plan_id, plan_only_team_id, **kwargs):  # noqa: E501
        """Get plan-only team  # noqa: E501

        Returns planning settings for a plan-only team.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_plan_only_team(plan_id, plan_only_team_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int plan_id: The ID of the plan. (required)
        :param int plan_only_team_id: The ID of the plan-only team. (required)
        :return: GetPlanOnlyTeamResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_plan_only_team_with_http_info(plan_id, plan_only_team_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_plan_only_team_with_http_info(plan_id, plan_only_team_id, **kwargs)  # noqa: E501
            return data

    def get_plan_only_team_with_http_info(self, plan_id, plan_only_team_id, **kwargs):  # noqa: E501
        """Get plan-only team  # noqa: E501

        Returns planning settings for a plan-only team.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_plan_only_team_with_http_info(plan_id, plan_only_team_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int plan_id: The ID of the plan. (required)
        :param int plan_only_team_id: The ID of the plan-only team. (required)
        :return: GetPlanOnlyTeamResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['plan_id', 'plan_only_team_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_plan_only_team" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'plan_id' is set
        if ('plan_id' not in params or
                params['plan_id'] is None):
            raise ValueError("Missing the required parameter `plan_id` when calling `get_plan_only_team`")  # noqa: E501
        # verify the required parameter 'plan_only_team_id' is set
        if ('plan_only_team_id' not in params or
                params['plan_only_team_id'] is None):
            raise ValueError("Missing the required parameter `plan_only_team_id` when calling `get_plan_only_team`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'plan_id' in params:
            path_params['planId'] = params['plan_id']  # noqa: E501
        if 'plan_only_team_id' in params:
            path_params['planOnlyTeamId'] = params['plan_only_team_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rest/api/3/plans/plan/{planId}/team/planonly/{planOnlyTeamId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetPlanOnlyTeamResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_teams(self, plan_id, **kwargs):  # noqa: E501
        """Get teams in plan paginated  # noqa: E501

        Returns a [paginated](#pagination) list of plan-only and Atlassian teams in a plan.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_teams(plan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int plan_id: The ID of the plan. (required)
        :param str cursor: The cursor to start from. If not provided, the first page will be returned.
        :param int max_results: The maximum number of plan teams to return per page. The maximum value is 50. The default value is 50.
        :return: PageWithCursorGetTeamResponseForPage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_teams_with_http_info(plan_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_teams_with_http_info(plan_id, **kwargs)  # noqa: E501
            return data

    def get_teams_with_http_info(self, plan_id, **kwargs):  # noqa: E501
        """Get teams in plan paginated  # noqa: E501

        Returns a [paginated](#pagination) list of plan-only and Atlassian teams in a plan.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_teams_with_http_info(plan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int plan_id: The ID of the plan. (required)
        :param str cursor: The cursor to start from. If not provided, the first page will be returned.
        :param int max_results: The maximum number of plan teams to return per page. The maximum value is 50. The default value is 50.
        :return: PageWithCursorGetTeamResponseForPage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['plan_id', 'cursor', 'max_results']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_teams" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'plan_id' is set
        if ('plan_id' not in params or
                params['plan_id'] is None):
            raise ValueError("Missing the required parameter `plan_id` when calling `get_teams`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'plan_id' in params:
            path_params['planId'] = params['plan_id']  # noqa: E501

        query_params = []
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))  # noqa: E501
        if 'max_results' in params:
            query_params.append(('maxResults', params['max_results']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rest/api/3/plans/plan/{planId}/team', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PageWithCursorGetTeamResponseForPage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_atlassian_team(self, plan_id, atlassian_team_id, **kwargs):  # noqa: E501
        """Remove Atlassian team from plan  # noqa: E501

        Removes an Atlassian team from a plan and deletes their planning settings.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_atlassian_team(plan_id, atlassian_team_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int plan_id: The ID of the plan. (required)
        :param str atlassian_team_id: The ID of the Atlassian team. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.remove_atlassian_team_with_http_info(plan_id, atlassian_team_id, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_atlassian_team_with_http_info(plan_id, atlassian_team_id, **kwargs)  # noqa: E501
            return data

    def remove_atlassian_team_with_http_info(self, plan_id, atlassian_team_id, **kwargs):  # noqa: E501
        """Remove Atlassian team from plan  # noqa: E501

        Removes an Atlassian team from a plan and deletes their planning settings.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_atlassian_team_with_http_info(plan_id, atlassian_team_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int plan_id: The ID of the plan. (required)
        :param str atlassian_team_id: The ID of the Atlassian team. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['plan_id', 'atlassian_team_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_atlassian_team" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'plan_id' is set
        if ('plan_id' not in params or
                params['plan_id'] is None):
            raise ValueError("Missing the required parameter `plan_id` when calling `remove_atlassian_team`")  # noqa: E501
        # verify the required parameter 'atlassian_team_id' is set
        if ('atlassian_team_id' not in params or
                params['atlassian_team_id'] is None):
            raise ValueError("Missing the required parameter `atlassian_team_id` when calling `remove_atlassian_team`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'plan_id' in params:
            path_params['planId'] = params['plan_id']  # noqa: E501
        if 'atlassian_team_id' in params:
            path_params['atlassianTeamId'] = params['atlassian_team_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rest/api/3/plans/plan/{planId}/team/atlassian/{atlassianTeamId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_atlassian_team(self, body, plan_id, atlassian_team_id, **kwargs):  # noqa: E501
        """Update Atlassian team in plan  # noqa: E501

        Updates any of the following planning settings of an Atlassian team in a plan using [JSON Patch](https://datatracker.ietf.org/doc/html/rfc6902).   *  planningStyle  *  issueSourceId  *  sprintLength  *  capacity  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  *Note that \"add\" operations do not respect array indexes in target locations. Call the \"Get Atlassian team in plan\" endpoint to find out the order of array elements.*  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_atlassian_team(body, plan_id, atlassian_team_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body: (required)
        :param int plan_id: The ID of the plan. (required)
        :param str atlassian_team_id: The ID of the Atlassian team. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_atlassian_team_with_http_info(body, plan_id, atlassian_team_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_atlassian_team_with_http_info(body, plan_id, atlassian_team_id, **kwargs)  # noqa: E501
            return data

    def update_atlassian_team_with_http_info(self, body, plan_id, atlassian_team_id, **kwargs):  # noqa: E501
        """Update Atlassian team in plan  # noqa: E501

        Updates any of the following planning settings of an Atlassian team in a plan using [JSON Patch](https://datatracker.ietf.org/doc/html/rfc6902).   *  planningStyle  *  issueSourceId  *  sprintLength  *  capacity  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  *Note that \"add\" operations do not respect array indexes in target locations. Call the \"Get Atlassian team in plan\" endpoint to find out the order of array elements.*  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_atlassian_team_with_http_info(body, plan_id, atlassian_team_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body: (required)
        :param int plan_id: The ID of the plan. (required)
        :param str atlassian_team_id: The ID of the Atlassian team. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'plan_id', 'atlassian_team_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_atlassian_team" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_atlassian_team`")  # noqa: E501
        # verify the required parameter 'plan_id' is set
        if ('plan_id' not in params or
                params['plan_id'] is None):
            raise ValueError("Missing the required parameter `plan_id` when calling `update_atlassian_team`")  # noqa: E501
        # verify the required parameter 'atlassian_team_id' is set
        if ('atlassian_team_id' not in params or
                params['atlassian_team_id'] is None):
            raise ValueError("Missing the required parameter `atlassian_team_id` when calling `update_atlassian_team`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'plan_id' in params:
            path_params['planId'] = params['plan_id']  # noqa: E501
        if 'atlassian_team_id' in params:
            path_params['atlassianTeamId'] = params['atlassian_team_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rest/api/3/plans/plan/{planId}/team/atlassian/{atlassianTeamId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_plan_only_team(self, body, plan_id, plan_only_team_id, **kwargs):  # noqa: E501
        """Update plan-only team  # noqa: E501

        Updates any of the following planning settings of a plan-only team using [JSON Patch](https://datatracker.ietf.org/doc/html/rfc6902).   *  name  *  planningStyle  *  issueSourceId  *  sprintLength  *  capacity  *  memberAccountIds  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  *Note that \"add\" operations do not respect array indexes in target locations. Call the \"Get plan-only team\" endpoint to find out the order of array elements.*  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_plan_only_team(body, plan_id, plan_only_team_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body: (required)
        :param int plan_id: The ID of the plan. (required)
        :param int plan_only_team_id: The ID of the plan-only team. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_plan_only_team_with_http_info(body, plan_id, plan_only_team_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_plan_only_team_with_http_info(body, plan_id, plan_only_team_id, **kwargs)  # noqa: E501
            return data

    def update_plan_only_team_with_http_info(self, body, plan_id, plan_only_team_id, **kwargs):  # noqa: E501
        """Update plan-only team  # noqa: E501

        Updates any of the following planning settings of a plan-only team using [JSON Patch](https://datatracker.ietf.org/doc/html/rfc6902).   *  name  *  planningStyle  *  issueSourceId  *  sprintLength  *  capacity  *  memberAccountIds  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  *Note that \"add\" operations do not respect array indexes in target locations. Call the \"Get plan-only team\" endpoint to find out the order of array elements.*  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_plan_only_team_with_http_info(body, plan_id, plan_only_team_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body: (required)
        :param int plan_id: The ID of the plan. (required)
        :param int plan_only_team_id: The ID of the plan-only team. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'plan_id', 'plan_only_team_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_plan_only_team" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_plan_only_team`")  # noqa: E501
        # verify the required parameter 'plan_id' is set
        if ('plan_id' not in params or
                params['plan_id'] is None):
            raise ValueError("Missing the required parameter `plan_id` when calling `update_plan_only_team`")  # noqa: E501
        # verify the required parameter 'plan_only_team_id' is set
        if ('plan_only_team_id' not in params or
                params['plan_only_team_id'] is None):
            raise ValueError("Missing the required parameter `plan_only_team_id` when calling `update_plan_only_team`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'plan_id' in params:
            path_params['planId'] = params['plan_id']  # noqa: E501
        if 'plan_only_team_id' in params:
            path_params['planOnlyTeamId'] = params['plan_only_team_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rest/api/3/plans/plan/{planId}/team/planonly/{planOnlyTeamId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
