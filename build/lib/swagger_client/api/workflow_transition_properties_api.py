# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class WorkflowTransitionPropertiesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_workflow_transition_property(self, body, key, workflow_name, transition_id, **kwargs):  # noqa: E501
        """Create workflow transition property  # noqa: E501

        This will be removed on [June 1, 2026](https://developer.atlassian.com/cloud/jira/platform/changelog/#CHANGE-2570); add transition properties using [Bulk update workflows](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-workflows/#api-rest-api-3-workflows-update-post) instead.  Adds a property to a workflow transition. Transition properties are used to change the behavior of a transition. For more information, see [Transition properties](https://confluence.atlassian.com/x/zIhKLg#Advancedworkflowconfiguration-transitionproperties) and [Workflow properties](https://confluence.atlassian.com/x/JYlKLg).  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_workflow_transition_property(body, key, workflow_name, transition_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param dict(str, object) body: (required)
        :param str key: The key of the property being added, also known as the name of the property. Set this to the same value as the `key` defined in the request body. (required)
        :param str workflow_name: The name of the workflow that the transition belongs to. (required)
        :param int transition_id: The ID of the transition. To get the ID, view the workflow in text mode in the Jira admin settings. The ID is shown next to the transition. (required)
        :param str workflow_mode: The workflow status. Set to *live* for inactive workflows or *draft* for draft workflows. Active workflows cannot be edited.
        :return: WorkflowTransitionProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_workflow_transition_property_with_http_info(body, key, workflow_name, transition_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_workflow_transition_property_with_http_info(body, key, workflow_name, transition_id, **kwargs)  # noqa: E501
            return data

    def create_workflow_transition_property_with_http_info(self, body, key, workflow_name, transition_id, **kwargs):  # noqa: E501
        """Create workflow transition property  # noqa: E501

        This will be removed on [June 1, 2026](https://developer.atlassian.com/cloud/jira/platform/changelog/#CHANGE-2570); add transition properties using [Bulk update workflows](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-workflows/#api-rest-api-3-workflows-update-post) instead.  Adds a property to a workflow transition. Transition properties are used to change the behavior of a transition. For more information, see [Transition properties](https://confluence.atlassian.com/x/zIhKLg#Advancedworkflowconfiguration-transitionproperties) and [Workflow properties](https://confluence.atlassian.com/x/JYlKLg).  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_workflow_transition_property_with_http_info(body, key, workflow_name, transition_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param dict(str, object) body: (required)
        :param str key: The key of the property being added, also known as the name of the property. Set this to the same value as the `key` defined in the request body. (required)
        :param str workflow_name: The name of the workflow that the transition belongs to. (required)
        :param int transition_id: The ID of the transition. To get the ID, view the workflow in text mode in the Jira admin settings. The ID is shown next to the transition. (required)
        :param str workflow_mode: The workflow status. Set to *live* for inactive workflows or *draft* for draft workflows. Active workflows cannot be edited.
        :return: WorkflowTransitionProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'key', 'workflow_name', 'transition_id', 'workflow_mode']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_workflow_transition_property" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_workflow_transition_property`")  # noqa: E501
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `create_workflow_transition_property`")  # noqa: E501
        # verify the required parameter 'workflow_name' is set
        if ('workflow_name' not in params or
                params['workflow_name'] is None):
            raise ValueError("Missing the required parameter `workflow_name` when calling `create_workflow_transition_property`")  # noqa: E501
        # verify the required parameter 'transition_id' is set
        if ('transition_id' not in params or
                params['transition_id'] is None):
            raise ValueError("Missing the required parameter `transition_id` when calling `create_workflow_transition_property`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'transition_id' in params:
            path_params['transitionId'] = params['transition_id']  # noqa: E501

        query_params = []
        if 'key' in params:
            query_params.append(('key', params['key']))  # noqa: E501
        if 'workflow_name' in params:
            query_params.append(('workflowName', params['workflow_name']))  # noqa: E501
        if 'workflow_mode' in params:
            query_params.append(('workflowMode', params['workflow_mode']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rest/api/3/workflow/transitions/{transitionId}/properties', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WorkflowTransitionProperty',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_workflow_transition_property(self, transition_id, key, workflow_name, **kwargs):  # noqa: E501
        """Delete workflow transition property  # noqa: E501

        This will be removed on [June 1, 2026](https://developer.atlassian.com/cloud/jira/platform/changelog/#CHANGE-2570); delete transition properties using [Bulk update workflows](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-workflows/#api-rest-api-3-workflows-update-post) instead.  Deletes a property from a workflow transition. Transition properties are used to change the behavior of a transition. For more information, see [Transition properties](https://confluence.atlassian.com/x/zIhKLg#Advancedworkflowconfiguration-transitionproperties) and [Workflow properties](https://confluence.atlassian.com/x/JYlKLg).  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_workflow_transition_property(transition_id, key, workflow_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int transition_id: The ID of the transition. To get the ID, view the workflow in text mode in the Jira admin settings. The ID is shown next to the transition. (required)
        :param str key: The name of the transition property to delete, also known as the name of the property. (required)
        :param str workflow_name: The name of the workflow that the transition belongs to. (required)
        :param str workflow_mode: The workflow status. Set to `live` for inactive workflows or `draft` for draft workflows. Active workflows cannot be edited.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_workflow_transition_property_with_http_info(transition_id, key, workflow_name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_workflow_transition_property_with_http_info(transition_id, key, workflow_name, **kwargs)  # noqa: E501
            return data

    def delete_workflow_transition_property_with_http_info(self, transition_id, key, workflow_name, **kwargs):  # noqa: E501
        """Delete workflow transition property  # noqa: E501

        This will be removed on [June 1, 2026](https://developer.atlassian.com/cloud/jira/platform/changelog/#CHANGE-2570); delete transition properties using [Bulk update workflows](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-workflows/#api-rest-api-3-workflows-update-post) instead.  Deletes a property from a workflow transition. Transition properties are used to change the behavior of a transition. For more information, see [Transition properties](https://confluence.atlassian.com/x/zIhKLg#Advancedworkflowconfiguration-transitionproperties) and [Workflow properties](https://confluence.atlassian.com/x/JYlKLg).  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_workflow_transition_property_with_http_info(transition_id, key, workflow_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int transition_id: The ID of the transition. To get the ID, view the workflow in text mode in the Jira admin settings. The ID is shown next to the transition. (required)
        :param str key: The name of the transition property to delete, also known as the name of the property. (required)
        :param str workflow_name: The name of the workflow that the transition belongs to. (required)
        :param str workflow_mode: The workflow status. Set to `live` for inactive workflows or `draft` for draft workflows. Active workflows cannot be edited.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['transition_id', 'key', 'workflow_name', 'workflow_mode']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_workflow_transition_property" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'transition_id' is set
        if ('transition_id' not in params or
                params['transition_id'] is None):
            raise ValueError("Missing the required parameter `transition_id` when calling `delete_workflow_transition_property`")  # noqa: E501
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `delete_workflow_transition_property`")  # noqa: E501
        # verify the required parameter 'workflow_name' is set
        if ('workflow_name' not in params or
                params['workflow_name'] is None):
            raise ValueError("Missing the required parameter `workflow_name` when calling `delete_workflow_transition_property`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'transition_id' in params:
            path_params['transitionId'] = params['transition_id']  # noqa: E501

        query_params = []
        if 'key' in params:
            query_params.append(('key', params['key']))  # noqa: E501
        if 'workflow_name' in params:
            query_params.append(('workflowName', params['workflow_name']))  # noqa: E501
        if 'workflow_mode' in params:
            query_params.append(('workflowMode', params['workflow_mode']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['OAuth2', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rest/api/3/workflow/transitions/{transitionId}/properties', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_workflow_transition_properties(self, transition_id, workflow_name, **kwargs):  # noqa: E501
        """Get workflow transition properties  # noqa: E501

        This will be removed on [June 1, 2026](https://developer.atlassian.com/cloud/jira/platform/changelog/#CHANGE-2570); fetch transition properties from [Bulk get workflows](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-workflows/#api-rest-api-3-workflows-post) instead.  Returns the properties on a workflow transition. Transition properties are used to change the behavior of a transition. For more information, see [Transition properties](https://confluence.atlassian.com/x/zIhKLg#Advancedworkflowconfiguration-transitionproperties) and [Workflow properties](https://confluence.atlassian.com/x/JYlKLg).  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workflow_transition_properties(transition_id, workflow_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int transition_id: The ID of the transition. To get the ID, view the workflow in text mode in the Jira administration console. The ID is shown next to the transition. (required)
        :param str workflow_name: The name of the workflow that the transition belongs to. (required)
        :param bool include_reserved_keys: Some properties with keys that have the *jira.* prefix are reserved, which means they are not editable. To include these properties in the results, set this parameter to *true*.
        :param str key: The key of the property being returned, also known as the name of the property. If this parameter is not specified, all properties on the transition are returned.
        :param str workflow_mode: The workflow status. Set to *live* for active and inactive workflows, or *draft* for draft workflows.
        :return: WorkflowTransitionProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_workflow_transition_properties_with_http_info(transition_id, workflow_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workflow_transition_properties_with_http_info(transition_id, workflow_name, **kwargs)  # noqa: E501
            return data

    def get_workflow_transition_properties_with_http_info(self, transition_id, workflow_name, **kwargs):  # noqa: E501
        """Get workflow transition properties  # noqa: E501

        This will be removed on [June 1, 2026](https://developer.atlassian.com/cloud/jira/platform/changelog/#CHANGE-2570); fetch transition properties from [Bulk get workflows](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-workflows/#api-rest-api-3-workflows-post) instead.  Returns the properties on a workflow transition. Transition properties are used to change the behavior of a transition. For more information, see [Transition properties](https://confluence.atlassian.com/x/zIhKLg#Advancedworkflowconfiguration-transitionproperties) and [Workflow properties](https://confluence.atlassian.com/x/JYlKLg).  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workflow_transition_properties_with_http_info(transition_id, workflow_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int transition_id: The ID of the transition. To get the ID, view the workflow in text mode in the Jira administration console. The ID is shown next to the transition. (required)
        :param str workflow_name: The name of the workflow that the transition belongs to. (required)
        :param bool include_reserved_keys: Some properties with keys that have the *jira.* prefix are reserved, which means they are not editable. To include these properties in the results, set this parameter to *true*.
        :param str key: The key of the property being returned, also known as the name of the property. If this parameter is not specified, all properties on the transition are returned.
        :param str workflow_mode: The workflow status. Set to *live* for active and inactive workflows, or *draft* for draft workflows.
        :return: WorkflowTransitionProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['transition_id', 'workflow_name', 'include_reserved_keys', 'key', 'workflow_mode']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_workflow_transition_properties" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'transition_id' is set
        if ('transition_id' not in params or
                params['transition_id'] is None):
            raise ValueError("Missing the required parameter `transition_id` when calling `get_workflow_transition_properties`")  # noqa: E501
        # verify the required parameter 'workflow_name' is set
        if ('workflow_name' not in params or
                params['workflow_name'] is None):
            raise ValueError("Missing the required parameter `workflow_name` when calling `get_workflow_transition_properties`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'transition_id' in params:
            path_params['transitionId'] = params['transition_id']  # noqa: E501

        query_params = []
        if 'include_reserved_keys' in params:
            query_params.append(('includeReservedKeys', params['include_reserved_keys']))  # noqa: E501
        if 'key' in params:
            query_params.append(('key', params['key']))  # noqa: E501
        if 'workflow_name' in params:
            query_params.append(('workflowName', params['workflow_name']))  # noqa: E501
        if 'workflow_mode' in params:
            query_params.append(('workflowMode', params['workflow_mode']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rest/api/3/workflow/transitions/{transitionId}/properties', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WorkflowTransitionProperty',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_workflow_transition_property(self, body, key, workflow_name, transition_id, **kwargs):  # noqa: E501
        """Update workflow transition property  # noqa: E501

        This will be removed on [June 1, 2026](https://developer.atlassian.com/cloud/jira/platform/changelog/#CHANGE-2570); update transition properties using [Bulk update workflows](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-workflows/#api-rest-api-3-workflows-update-post) instead.  Updates a workflow transition by changing the property value. Trying to update a property that does not exist results in a new property being added to the transition. Transition properties are used to change the behavior of a transition. For more information, see [Transition properties](https://confluence.atlassian.com/x/zIhKLg#Advancedworkflowconfiguration-transitionproperties) and [Workflow properties](https://confluence.atlassian.com/x/JYlKLg).  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_workflow_transition_property(body, key, workflow_name, transition_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param dict(str, object) body: (required)
        :param str key: The key of the property being updated, also known as the name of the property. Set this to the same value as the `key` defined in the request body. (required)
        :param str workflow_name: The name of the workflow that the transition belongs to. (required)
        :param int transition_id: The ID of the transition. To get the ID, view the workflow in text mode in the Jira admin settings. The ID is shown next to the transition. (required)
        :param str workflow_mode: The workflow status. Set to `live` for inactive workflows or `draft` for draft workflows. Active workflows cannot be edited.
        :return: WorkflowTransitionProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_workflow_transition_property_with_http_info(body, key, workflow_name, transition_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_workflow_transition_property_with_http_info(body, key, workflow_name, transition_id, **kwargs)  # noqa: E501
            return data

    def update_workflow_transition_property_with_http_info(self, body, key, workflow_name, transition_id, **kwargs):  # noqa: E501
        """Update workflow transition property  # noqa: E501

        This will be removed on [June 1, 2026](https://developer.atlassian.com/cloud/jira/platform/changelog/#CHANGE-2570); update transition properties using [Bulk update workflows](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-workflows/#api-rest-api-3-workflows-update-post) instead.  Updates a workflow transition by changing the property value. Trying to update a property that does not exist results in a new property being added to the transition. Transition properties are used to change the behavior of a transition. For more information, see [Transition properties](https://confluence.atlassian.com/x/zIhKLg#Advancedworkflowconfiguration-transitionproperties) and [Workflow properties](https://confluence.atlassian.com/x/JYlKLg).  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_workflow_transition_property_with_http_info(body, key, workflow_name, transition_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param dict(str, object) body: (required)
        :param str key: The key of the property being updated, also known as the name of the property. Set this to the same value as the `key` defined in the request body. (required)
        :param str workflow_name: The name of the workflow that the transition belongs to. (required)
        :param int transition_id: The ID of the transition. To get the ID, view the workflow in text mode in the Jira admin settings. The ID is shown next to the transition. (required)
        :param str workflow_mode: The workflow status. Set to `live` for inactive workflows or `draft` for draft workflows. Active workflows cannot be edited.
        :return: WorkflowTransitionProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'key', 'workflow_name', 'transition_id', 'workflow_mode']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_workflow_transition_property" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_workflow_transition_property`")  # noqa: E501
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `update_workflow_transition_property`")  # noqa: E501
        # verify the required parameter 'workflow_name' is set
        if ('workflow_name' not in params or
                params['workflow_name'] is None):
            raise ValueError("Missing the required parameter `workflow_name` when calling `update_workflow_transition_property`")  # noqa: E501
        # verify the required parameter 'transition_id' is set
        if ('transition_id' not in params or
                params['transition_id'] is None):
            raise ValueError("Missing the required parameter `transition_id` when calling `update_workflow_transition_property`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'transition_id' in params:
            path_params['transitionId'] = params['transition_id']  # noqa: E501

        query_params = []
        if 'key' in params:
            query_params.append(('key', params['key']))  # noqa: E501
        if 'workflow_name' in params:
            query_params.append(('workflowName', params['workflow_name']))  # noqa: E501
        if 'workflow_mode' in params:
            query_params.append(('workflowMode', params['workflow_mode']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rest/api/3/workflow/transitions/{transitionId}/properties', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WorkflowTransitionProperty',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
