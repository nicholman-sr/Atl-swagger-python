# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ApplicationProperty(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'allowed_values': 'list[str]',
        'default_value': 'str',
        'desc': 'str',
        'example': 'str',
        'id': 'str',
        'key': 'str',
        'name': 'str',
        'type': 'str',
        'value': 'str'
    }

    attribute_map = {
        'allowed_values': 'allowedValues',
        'default_value': 'defaultValue',
        'desc': 'desc',
        'example': 'example',
        'id': 'id',
        'key': 'key',
        'name': 'name',
        'type': 'type',
        'value': 'value'
    }

    def __init__(self, allowed_values=None, default_value=None, desc=None, example=None, id=None, key=None, name=None, type=None, value=None):  # noqa: E501
        """ApplicationProperty - a model defined in Swagger"""  # noqa: E501
        self._allowed_values = None
        self._default_value = None
        self._desc = None
        self._example = None
        self._id = None
        self._key = None
        self._name = None
        self._type = None
        self._value = None
        self.discriminator = None
        if allowed_values is not None:
            self.allowed_values = allowed_values
        if default_value is not None:
            self.default_value = default_value
        if desc is not None:
            self.desc = desc
        if example is not None:
            self.example = example
        if id is not None:
            self.id = id
        if key is not None:
            self.key = key
        if name is not None:
            self.name = name
        if type is not None:
            self.type = type
        if value is not None:
            self.value = value

    @property
    def allowed_values(self):
        """Gets the allowed_values of this ApplicationProperty.  # noqa: E501

        The allowed values, if applicable.  # noqa: E501

        :return: The allowed_values of this ApplicationProperty.  # noqa: E501
        :rtype: list[str]
        """
        return self._allowed_values

    @allowed_values.setter
    def allowed_values(self, allowed_values):
        """Sets the allowed_values of this ApplicationProperty.

        The allowed values, if applicable.  # noqa: E501

        :param allowed_values: The allowed_values of this ApplicationProperty.  # noqa: E501
        :type: list[str]
        """

        self._allowed_values = allowed_values

    @property
    def default_value(self):
        """Gets the default_value of this ApplicationProperty.  # noqa: E501

        The default value of the application property.  # noqa: E501

        :return: The default_value of this ApplicationProperty.  # noqa: E501
        :rtype: str
        """
        return self._default_value

    @default_value.setter
    def default_value(self, default_value):
        """Sets the default_value of this ApplicationProperty.

        The default value of the application property.  # noqa: E501

        :param default_value: The default_value of this ApplicationProperty.  # noqa: E501
        :type: str
        """

        self._default_value = default_value

    @property
    def desc(self):
        """Gets the desc of this ApplicationProperty.  # noqa: E501

        The description of the application property.  # noqa: E501

        :return: The desc of this ApplicationProperty.  # noqa: E501
        :rtype: str
        """
        return self._desc

    @desc.setter
    def desc(self, desc):
        """Sets the desc of this ApplicationProperty.

        The description of the application property.  # noqa: E501

        :param desc: The desc of this ApplicationProperty.  # noqa: E501
        :type: str
        """

        self._desc = desc

    @property
    def example(self):
        """Gets the example of this ApplicationProperty.  # noqa: E501


        :return: The example of this ApplicationProperty.  # noqa: E501
        :rtype: str
        """
        return self._example

    @example.setter
    def example(self, example):
        """Sets the example of this ApplicationProperty.


        :param example: The example of this ApplicationProperty.  # noqa: E501
        :type: str
        """

        self._example = example

    @property
    def id(self):
        """Gets the id of this ApplicationProperty.  # noqa: E501

        The ID of the application property. The ID and key are the same.  # noqa: E501

        :return: The id of this ApplicationProperty.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ApplicationProperty.

        The ID of the application property. The ID and key are the same.  # noqa: E501

        :param id: The id of this ApplicationProperty.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def key(self):
        """Gets the key of this ApplicationProperty.  # noqa: E501

        The key of the application property. The ID and key are the same.  # noqa: E501

        :return: The key of this ApplicationProperty.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this ApplicationProperty.

        The key of the application property. The ID and key are the same.  # noqa: E501

        :param key: The key of this ApplicationProperty.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def name(self):
        """Gets the name of this ApplicationProperty.  # noqa: E501

        The name of the application property.  # noqa: E501

        :return: The name of this ApplicationProperty.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ApplicationProperty.

        The name of the application property.  # noqa: E501

        :param name: The name of this ApplicationProperty.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this ApplicationProperty.  # noqa: E501

        The data type of the application property.  # noqa: E501

        :return: The type of this ApplicationProperty.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ApplicationProperty.

        The data type of the application property.  # noqa: E501

        :param type: The type of this ApplicationProperty.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def value(self):
        """Gets the value of this ApplicationProperty.  # noqa: E501

        The new value.  # noqa: E501

        :return: The value of this ApplicationProperty.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this ApplicationProperty.

        The new value.  # noqa: E501

        :param value: The value of this ApplicationProperty.  # noqa: E501
        :type: str
        """

        self._value = value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApplicationProperty, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApplicationProperty):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
