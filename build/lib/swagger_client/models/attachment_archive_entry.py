# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AttachmentArchiveEntry(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'abbreviated_name': 'str',
        'entry_index': 'int',
        'media_type': 'str',
        'name': 'str',
        'size': 'int'
    }

    attribute_map = {
        'abbreviated_name': 'abbreviatedName',
        'entry_index': 'entryIndex',
        'media_type': 'mediaType',
        'name': 'name',
        'size': 'size'
    }

    def __init__(self, abbreviated_name=None, entry_index=None, media_type=None, name=None, size=None):  # noqa: E501
        """AttachmentArchiveEntry - a model defined in Swagger"""  # noqa: E501
        self._abbreviated_name = None
        self._entry_index = None
        self._media_type = None
        self._name = None
        self._size = None
        self.discriminator = None
        if abbreviated_name is not None:
            self.abbreviated_name = abbreviated_name
        if entry_index is not None:
            self.entry_index = entry_index
        if media_type is not None:
            self.media_type = media_type
        if name is not None:
            self.name = name
        if size is not None:
            self.size = size

    @property
    def abbreviated_name(self):
        """Gets the abbreviated_name of this AttachmentArchiveEntry.  # noqa: E501


        :return: The abbreviated_name of this AttachmentArchiveEntry.  # noqa: E501
        :rtype: str
        """
        return self._abbreviated_name

    @abbreviated_name.setter
    def abbreviated_name(self, abbreviated_name):
        """Sets the abbreviated_name of this AttachmentArchiveEntry.


        :param abbreviated_name: The abbreviated_name of this AttachmentArchiveEntry.  # noqa: E501
        :type: str
        """

        self._abbreviated_name = abbreviated_name

    @property
    def entry_index(self):
        """Gets the entry_index of this AttachmentArchiveEntry.  # noqa: E501


        :return: The entry_index of this AttachmentArchiveEntry.  # noqa: E501
        :rtype: int
        """
        return self._entry_index

    @entry_index.setter
    def entry_index(self, entry_index):
        """Sets the entry_index of this AttachmentArchiveEntry.


        :param entry_index: The entry_index of this AttachmentArchiveEntry.  # noqa: E501
        :type: int
        """

        self._entry_index = entry_index

    @property
    def media_type(self):
        """Gets the media_type of this AttachmentArchiveEntry.  # noqa: E501


        :return: The media_type of this AttachmentArchiveEntry.  # noqa: E501
        :rtype: str
        """
        return self._media_type

    @media_type.setter
    def media_type(self, media_type):
        """Sets the media_type of this AttachmentArchiveEntry.


        :param media_type: The media_type of this AttachmentArchiveEntry.  # noqa: E501
        :type: str
        """

        self._media_type = media_type

    @property
    def name(self):
        """Gets the name of this AttachmentArchiveEntry.  # noqa: E501


        :return: The name of this AttachmentArchiveEntry.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AttachmentArchiveEntry.


        :param name: The name of this AttachmentArchiveEntry.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def size(self):
        """Gets the size of this AttachmentArchiveEntry.  # noqa: E501


        :return: The size of this AttachmentArchiveEntry.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this AttachmentArchiveEntry.


        :param size: The size of this AttachmentArchiveEntry.  # noqa: E501
        :type: int
        """

        self._size = size

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AttachmentArchiveEntry, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AttachmentArchiveEntry):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
