# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ChangedValueBean(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'changed_from': 'str',
        'changed_to': 'str',
        'field_name': 'str'
    }

    attribute_map = {
        'changed_from': 'changedFrom',
        'changed_to': 'changedTo',
        'field_name': 'fieldName'
    }

    def __init__(self, changed_from=None, changed_to=None, field_name=None):  # noqa: E501
        """ChangedValueBean - a model defined in Swagger"""  # noqa: E501
        self._changed_from = None
        self._changed_to = None
        self._field_name = None
        self.discriminator = None
        if changed_from is not None:
            self.changed_from = changed_from
        if changed_to is not None:
            self.changed_to = changed_to
        if field_name is not None:
            self.field_name = field_name

    @property
    def changed_from(self):
        """Gets the changed_from of this ChangedValueBean.  # noqa: E501

        The value of the field before the change.  # noqa: E501

        :return: The changed_from of this ChangedValueBean.  # noqa: E501
        :rtype: str
        """
        return self._changed_from

    @changed_from.setter
    def changed_from(self, changed_from):
        """Sets the changed_from of this ChangedValueBean.

        The value of the field before the change.  # noqa: E501

        :param changed_from: The changed_from of this ChangedValueBean.  # noqa: E501
        :type: str
        """

        self._changed_from = changed_from

    @property
    def changed_to(self):
        """Gets the changed_to of this ChangedValueBean.  # noqa: E501

        The value of the field after the change.  # noqa: E501

        :return: The changed_to of this ChangedValueBean.  # noqa: E501
        :rtype: str
        """
        return self._changed_to

    @changed_to.setter
    def changed_to(self, changed_to):
        """Sets the changed_to of this ChangedValueBean.

        The value of the field after the change.  # noqa: E501

        :param changed_to: The changed_to of this ChangedValueBean.  # noqa: E501
        :type: str
        """

        self._changed_to = changed_to

    @property
    def field_name(self):
        """Gets the field_name of this ChangedValueBean.  # noqa: E501

        The name of the field changed.  # noqa: E501

        :return: The field_name of this ChangedValueBean.  # noqa: E501
        :rtype: str
        """
        return self._field_name

    @field_name.setter
    def field_name(self, field_name):
        """Sets the field_name of this ChangedValueBean.

        The name of the field changed.  # noqa: E501

        :param field_name: The field_name of this ChangedValueBean.  # noqa: E501
        :type: str
        """

        self._field_name = field_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ChangedValueBean, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ChangedValueBean):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
