# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ChangedWorklog(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'properties': 'list[EntityProperty]',
        'updated_time': 'int',
        'worklog_id': 'int'
    }

    attribute_map = {
        'properties': 'properties',
        'updated_time': 'updatedTime',
        'worklog_id': 'worklogId'
    }

    def __init__(self, properties=None, updated_time=None, worklog_id=None):  # noqa: E501
        """ChangedWorklog - a model defined in Swagger"""  # noqa: E501
        self._properties = None
        self._updated_time = None
        self._worklog_id = None
        self.discriminator = None
        if properties is not None:
            self.properties = properties
        if updated_time is not None:
            self.updated_time = updated_time
        if worklog_id is not None:
            self.worklog_id = worklog_id

    @property
    def properties(self):
        """Gets the properties of this ChangedWorklog.  # noqa: E501

        Details of properties associated with the change.  # noqa: E501

        :return: The properties of this ChangedWorklog.  # noqa: E501
        :rtype: list[EntityProperty]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this ChangedWorklog.

        Details of properties associated with the change.  # noqa: E501

        :param properties: The properties of this ChangedWorklog.  # noqa: E501
        :type: list[EntityProperty]
        """

        self._properties = properties

    @property
    def updated_time(self):
        """Gets the updated_time of this ChangedWorklog.  # noqa: E501

        The datetime of the change.  # noqa: E501

        :return: The updated_time of this ChangedWorklog.  # noqa: E501
        :rtype: int
        """
        return self._updated_time

    @updated_time.setter
    def updated_time(self, updated_time):
        """Sets the updated_time of this ChangedWorklog.

        The datetime of the change.  # noqa: E501

        :param updated_time: The updated_time of this ChangedWorklog.  # noqa: E501
        :type: int
        """

        self._updated_time = updated_time

    @property
    def worklog_id(self):
        """Gets the worklog_id of this ChangedWorklog.  # noqa: E501

        The ID of the worklog.  # noqa: E501

        :return: The worklog_id of this ChangedWorklog.  # noqa: E501
        :rtype: int
        """
        return self._worklog_id

    @worklog_id.setter
    def worklog_id(self, worklog_id):
        """Sets the worklog_id of this ChangedWorklog.

        The ID of the worklog.  # noqa: E501

        :param worklog_id: The worklog_id of this ChangedWorklog.  # noqa: E501
        :type: int
        """

        self._worklog_id = worklog_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ChangedWorklog, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ChangedWorklog):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
