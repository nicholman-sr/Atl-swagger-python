# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreatePrioritySchemeDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'default_priority_id': 'int',
        'description': 'str',
        'mappings': 'AllOfCreatePrioritySchemeDetailsMappings',
        'name': 'str',
        'priority_ids': 'list[int]',
        'project_ids': 'list[int]'
    }

    attribute_map = {
        'default_priority_id': 'defaultPriorityId',
        'description': 'description',
        'mappings': 'mappings',
        'name': 'name',
        'priority_ids': 'priorityIds',
        'project_ids': 'projectIds'
    }

    def __init__(self, default_priority_id=None, description=None, mappings=None, name=None, priority_ids=None, project_ids=None):  # noqa: E501
        """CreatePrioritySchemeDetails - a model defined in Swagger"""  # noqa: E501
        self._default_priority_id = None
        self._description = None
        self._mappings = None
        self._name = None
        self._priority_ids = None
        self._project_ids = None
        self.discriminator = None
        self.default_priority_id = default_priority_id
        if description is not None:
            self.description = description
        if mappings is not None:
            self.mappings = mappings
        self.name = name
        self.priority_ids = priority_ids
        if project_ids is not None:
            self.project_ids = project_ids

    @property
    def default_priority_id(self):
        """Gets the default_priority_id of this CreatePrioritySchemeDetails.  # noqa: E501

        The ID of the default priority for the priority scheme.  # noqa: E501

        :return: The default_priority_id of this CreatePrioritySchemeDetails.  # noqa: E501
        :rtype: int
        """
        return self._default_priority_id

    @default_priority_id.setter
    def default_priority_id(self, default_priority_id):
        """Sets the default_priority_id of this CreatePrioritySchemeDetails.

        The ID of the default priority for the priority scheme.  # noqa: E501

        :param default_priority_id: The default_priority_id of this CreatePrioritySchemeDetails.  # noqa: E501
        :type: int
        """
        if default_priority_id is None:
            raise ValueError("Invalid value for `default_priority_id`, must not be `None`")  # noqa: E501

        self._default_priority_id = default_priority_id

    @property
    def description(self):
        """Gets the description of this CreatePrioritySchemeDetails.  # noqa: E501

        The description of the priority scheme.  # noqa: E501

        :return: The description of this CreatePrioritySchemeDetails.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreatePrioritySchemeDetails.

        The description of the priority scheme.  # noqa: E501

        :param description: The description of this CreatePrioritySchemeDetails.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def mappings(self):
        """Gets the mappings of this CreatePrioritySchemeDetails.  # noqa: E501

        Instructions to migrate the priorities of issues.  `in` mappings are used to migrate the priorities of issues to priorities used within the priority scheme.  `out` mappings are used to migrate the priorities of issues to priorities not used within the priority scheme.   *  When **priorities** are **added** to the new priority scheme, no mapping needs to be provided as the new priorities are not used by any issues.  *  When **priorities** are **removed** from the new priority scheme, no mapping needs to be provided as the removed priorities are not used by any issues.  *  When **projects** are **added** to the priority scheme, the priorities of issues in those projects might need to be migrated to new priorities used by the priority scheme. This can occur when the current scheme does not use all the priorities in the project(s)' priority scheme(s).           *  An `in` mapping must be provided for each of these priorities.  *  When **projects** are **removed** from the priority scheme, no mapping needs to be provided as the removed projects are not using the priorities of the new priority scheme.  For more information on `in` and `out` mappings, see the child properties documentation for the `PriorityMapping` object below.  # noqa: E501

        :return: The mappings of this CreatePrioritySchemeDetails.  # noqa: E501
        :rtype: AllOfCreatePrioritySchemeDetailsMappings
        """
        return self._mappings

    @mappings.setter
    def mappings(self, mappings):
        """Sets the mappings of this CreatePrioritySchemeDetails.

        Instructions to migrate the priorities of issues.  `in` mappings are used to migrate the priorities of issues to priorities used within the priority scheme.  `out` mappings are used to migrate the priorities of issues to priorities not used within the priority scheme.   *  When **priorities** are **added** to the new priority scheme, no mapping needs to be provided as the new priorities are not used by any issues.  *  When **priorities** are **removed** from the new priority scheme, no mapping needs to be provided as the removed priorities are not used by any issues.  *  When **projects** are **added** to the priority scheme, the priorities of issues in those projects might need to be migrated to new priorities used by the priority scheme. This can occur when the current scheme does not use all the priorities in the project(s)' priority scheme(s).           *  An `in` mapping must be provided for each of these priorities.  *  When **projects** are **removed** from the priority scheme, no mapping needs to be provided as the removed projects are not using the priorities of the new priority scheme.  For more information on `in` and `out` mappings, see the child properties documentation for the `PriorityMapping` object below.  # noqa: E501

        :param mappings: The mappings of this CreatePrioritySchemeDetails.  # noqa: E501
        :type: AllOfCreatePrioritySchemeDetailsMappings
        """

        self._mappings = mappings

    @property
    def name(self):
        """Gets the name of this CreatePrioritySchemeDetails.  # noqa: E501

        The name of the priority scheme. Must be unique.  # noqa: E501

        :return: The name of this CreatePrioritySchemeDetails.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreatePrioritySchemeDetails.

        The name of the priority scheme. Must be unique.  # noqa: E501

        :param name: The name of this CreatePrioritySchemeDetails.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def priority_ids(self):
        """Gets the priority_ids of this CreatePrioritySchemeDetails.  # noqa: E501

        The IDs of priorities in the scheme.  # noqa: E501

        :return: The priority_ids of this CreatePrioritySchemeDetails.  # noqa: E501
        :rtype: list[int]
        """
        return self._priority_ids

    @priority_ids.setter
    def priority_ids(self, priority_ids):
        """Sets the priority_ids of this CreatePrioritySchemeDetails.

        The IDs of priorities in the scheme.  # noqa: E501

        :param priority_ids: The priority_ids of this CreatePrioritySchemeDetails.  # noqa: E501
        :type: list[int]
        """
        if priority_ids is None:
            raise ValueError("Invalid value for `priority_ids`, must not be `None`")  # noqa: E501

        self._priority_ids = priority_ids

    @property
    def project_ids(self):
        """Gets the project_ids of this CreatePrioritySchemeDetails.  # noqa: E501

        The IDs of projects that will use the priority scheme.  # noqa: E501

        :return: The project_ids of this CreatePrioritySchemeDetails.  # noqa: E501
        :rtype: list[int]
        """
        return self._project_ids

    @project_ids.setter
    def project_ids(self, project_ids):
        """Sets the project_ids of this CreatePrioritySchemeDetails.

        The IDs of projects that will use the priority scheme.  # noqa: E501

        :param project_ids: The project_ids of this CreatePrioritySchemeDetails.  # noqa: E501
        :type: list[int]
        """

        self._project_ids = project_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreatePrioritySchemeDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreatePrioritySchemeDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
