# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CustomTemplatesProjectDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'access_level': 'str',
        'additional_properties': 'dict(str, str)',
        'assignee_type': 'str',
        'avatar_id': 'int',
        'category_id': 'int',
        'description': 'str',
        'enable_components': 'bool',
        'key': 'str',
        'language': 'str',
        'lead_account_id': 'str',
        'name': 'str',
        'url': 'str'
    }

    attribute_map = {
        'access_level': 'accessLevel',
        'additional_properties': 'additionalProperties',
        'assignee_type': 'assigneeType',
        'avatar_id': 'avatarId',
        'category_id': 'categoryId',
        'description': 'description',
        'enable_components': 'enableComponents',
        'key': 'key',
        'language': 'language',
        'lead_account_id': 'leadAccountId',
        'name': 'name',
        'url': 'url'
    }

    def __init__(self, access_level=None, additional_properties=None, assignee_type=None, avatar_id=None, category_id=None, description=None, enable_components=False, key=None, language=None, lead_account_id=None, name=None, url=None):  # noqa: E501
        """CustomTemplatesProjectDetails - a model defined in Swagger"""  # noqa: E501
        self._access_level = None
        self._additional_properties = None
        self._assignee_type = None
        self._avatar_id = None
        self._category_id = None
        self._description = None
        self._enable_components = None
        self._key = None
        self._language = None
        self._lead_account_id = None
        self._name = None
        self._url = None
        self.discriminator = None
        if access_level is not None:
            self.access_level = access_level
        if additional_properties is not None:
            self.additional_properties = additional_properties
        if assignee_type is not None:
            self.assignee_type = assignee_type
        if avatar_id is not None:
            self.avatar_id = avatar_id
        if category_id is not None:
            self.category_id = category_id
        if description is not None:
            self.description = description
        if enable_components is not None:
            self.enable_components = enable_components
        if key is not None:
            self.key = key
        if language is not None:
            self.language = language
        if lead_account_id is not None:
            self.lead_account_id = lead_account_id
        if name is not None:
            self.name = name
        if url is not None:
            self.url = url

    @property
    def access_level(self):
        """Gets the access_level of this CustomTemplatesProjectDetails.  # noqa: E501

        The access level of the project. Only used by team-managed project  # noqa: E501

        :return: The access_level of this CustomTemplatesProjectDetails.  # noqa: E501
        :rtype: str
        """
        return self._access_level

    @access_level.setter
    def access_level(self, access_level):
        """Sets the access_level of this CustomTemplatesProjectDetails.

        The access level of the project. Only used by team-managed project  # noqa: E501

        :param access_level: The access_level of this CustomTemplatesProjectDetails.  # noqa: E501
        :type: str
        """
        allowed_values = ["open", "limited", "private", "free"]  # noqa: E501
        if access_level not in allowed_values:
            raise ValueError(
                "Invalid value for `access_level` ({0}), must be one of {1}"  # noqa: E501
                .format(access_level, allowed_values)
            )

        self._access_level = access_level

    @property
    def additional_properties(self):
        """Gets the additional_properties of this CustomTemplatesProjectDetails.  # noqa: E501

        Additional properties of the project  # noqa: E501

        :return: The additional_properties of this CustomTemplatesProjectDetails.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._additional_properties

    @additional_properties.setter
    def additional_properties(self, additional_properties):
        """Sets the additional_properties of this CustomTemplatesProjectDetails.

        Additional properties of the project  # noqa: E501

        :param additional_properties: The additional_properties of this CustomTemplatesProjectDetails.  # noqa: E501
        :type: dict(str, str)
        """

        self._additional_properties = additional_properties

    @property
    def assignee_type(self):
        """Gets the assignee_type of this CustomTemplatesProjectDetails.  # noqa: E501

        The default assignee when creating issues in the project  # noqa: E501

        :return: The assignee_type of this CustomTemplatesProjectDetails.  # noqa: E501
        :rtype: str
        """
        return self._assignee_type

    @assignee_type.setter
    def assignee_type(self, assignee_type):
        """Sets the assignee_type of this CustomTemplatesProjectDetails.

        The default assignee when creating issues in the project  # noqa: E501

        :param assignee_type: The assignee_type of this CustomTemplatesProjectDetails.  # noqa: E501
        :type: str
        """
        allowed_values = ["PROJECT_DEFAULT", "COMPONENT_LEAD", "PROJECT_LEAD", "UNASSIGNED"]  # noqa: E501
        if assignee_type not in allowed_values:
            raise ValueError(
                "Invalid value for `assignee_type` ({0}), must be one of {1}"  # noqa: E501
                .format(assignee_type, allowed_values)
            )

        self._assignee_type = assignee_type

    @property
    def avatar_id(self):
        """Gets the avatar_id of this CustomTemplatesProjectDetails.  # noqa: E501

        The ID of the project's avatar. Use the \\[Get project avatars\\](\\#api-rest-api-3-project-projectIdOrKey-avatar-get) operation to list the available avatars in a project.  # noqa: E501

        :return: The avatar_id of this CustomTemplatesProjectDetails.  # noqa: E501
        :rtype: int
        """
        return self._avatar_id

    @avatar_id.setter
    def avatar_id(self, avatar_id):
        """Sets the avatar_id of this CustomTemplatesProjectDetails.

        The ID of the project's avatar. Use the \\[Get project avatars\\](\\#api-rest-api-3-project-projectIdOrKey-avatar-get) operation to list the available avatars in a project.  # noqa: E501

        :param avatar_id: The avatar_id of this CustomTemplatesProjectDetails.  # noqa: E501
        :type: int
        """

        self._avatar_id = avatar_id

    @property
    def category_id(self):
        """Gets the category_id of this CustomTemplatesProjectDetails.  # noqa: E501

        The ID of the project's category. A complete list of category IDs is found using the [Get all project categories](#api-rest-api-3-projectCategory-get) operation.  # noqa: E501

        :return: The category_id of this CustomTemplatesProjectDetails.  # noqa: E501
        :rtype: int
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """Sets the category_id of this CustomTemplatesProjectDetails.

        The ID of the project's category. A complete list of category IDs is found using the [Get all project categories](#api-rest-api-3-projectCategory-get) operation.  # noqa: E501

        :param category_id: The category_id of this CustomTemplatesProjectDetails.  # noqa: E501
        :type: int
        """

        self._category_id = category_id

    @property
    def description(self):
        """Gets the description of this CustomTemplatesProjectDetails.  # noqa: E501

        Brief description of the project  # noqa: E501

        :return: The description of this CustomTemplatesProjectDetails.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CustomTemplatesProjectDetails.

        Brief description of the project  # noqa: E501

        :param description: The description of this CustomTemplatesProjectDetails.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def enable_components(self):
        """Gets the enable_components of this CustomTemplatesProjectDetails.  # noqa: E501

        Whether components are enabled for the project. Only used by company-managed project  # noqa: E501

        :return: The enable_components of this CustomTemplatesProjectDetails.  # noqa: E501
        :rtype: bool
        """
        return self._enable_components

    @enable_components.setter
    def enable_components(self, enable_components):
        """Sets the enable_components of this CustomTemplatesProjectDetails.

        Whether components are enabled for the project. Only used by company-managed project  # noqa: E501

        :param enable_components: The enable_components of this CustomTemplatesProjectDetails.  # noqa: E501
        :type: bool
        """

        self._enable_components = enable_components

    @property
    def key(self):
        """Gets the key of this CustomTemplatesProjectDetails.  # noqa: E501

        Project keys must be unique and start with an uppercase letter followed by one or more uppercase alphanumeric characters. The maximum length is 10 characters.  # noqa: E501

        :return: The key of this CustomTemplatesProjectDetails.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this CustomTemplatesProjectDetails.

        Project keys must be unique and start with an uppercase letter followed by one or more uppercase alphanumeric characters. The maximum length is 10 characters.  # noqa: E501

        :param key: The key of this CustomTemplatesProjectDetails.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def language(self):
        """Gets the language of this CustomTemplatesProjectDetails.  # noqa: E501

        The default language for the project  # noqa: E501

        :return: The language of this CustomTemplatesProjectDetails.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this CustomTemplatesProjectDetails.

        The default language for the project  # noqa: E501

        :param language: The language of this CustomTemplatesProjectDetails.  # noqa: E501
        :type: str
        """

        self._language = language

    @property
    def lead_account_id(self):
        """Gets the lead_account_id of this CustomTemplatesProjectDetails.  # noqa: E501

        The account ID of the project lead. Either `lead` or `leadAccountId` must be set when creating a project. Cannot be provided with `lead`.  # noqa: E501

        :return: The lead_account_id of this CustomTemplatesProjectDetails.  # noqa: E501
        :rtype: str
        """
        return self._lead_account_id

    @lead_account_id.setter
    def lead_account_id(self, lead_account_id):
        """Sets the lead_account_id of this CustomTemplatesProjectDetails.

        The account ID of the project lead. Either `lead` or `leadAccountId` must be set when creating a project. Cannot be provided with `lead`.  # noqa: E501

        :param lead_account_id: The lead_account_id of this CustomTemplatesProjectDetails.  # noqa: E501
        :type: str
        """

        self._lead_account_id = lead_account_id

    @property
    def name(self):
        """Gets the name of this CustomTemplatesProjectDetails.  # noqa: E501

        Name of the project  # noqa: E501

        :return: The name of this CustomTemplatesProjectDetails.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CustomTemplatesProjectDetails.

        Name of the project  # noqa: E501

        :param name: The name of this CustomTemplatesProjectDetails.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def url(self):
        """Gets the url of this CustomTemplatesProjectDetails.  # noqa: E501

        A link to information about this project, such as project documentation  # noqa: E501

        :return: The url of this CustomTemplatesProjectDetails.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this CustomTemplatesProjectDetails.

        A link to information about this project, such as project documentation  # noqa: E501

        :param url: The url of this CustomTemplatesProjectDetails.  # noqa: E501
        :type: str
        """

        self._url = url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CustomTemplatesProjectDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomTemplatesProjectDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
