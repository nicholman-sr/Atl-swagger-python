# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Dashboard(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'automatic_refresh_ms': 'int',
        'description': 'str',
        'edit_permissions': 'list[SharePermission]',
        'id': 'str',
        'is_favourite': 'bool',
        'is_writable': 'bool',
        'name': 'str',
        'owner': 'AllOfDashboardOwner',
        'popularity': 'int',
        'rank': 'int',
        '_self': 'str',
        'share_permissions': 'list[SharePermission]',
        'system_dashboard': 'bool',
        'view': 'str'
    }

    attribute_map = {
        'automatic_refresh_ms': 'automaticRefreshMs',
        'description': 'description',
        'edit_permissions': 'editPermissions',
        'id': 'id',
        'is_favourite': 'isFavourite',
        'is_writable': 'isWritable',
        'name': 'name',
        'owner': 'owner',
        'popularity': 'popularity',
        'rank': 'rank',
        '_self': 'self',
        'share_permissions': 'sharePermissions',
        'system_dashboard': 'systemDashboard',
        'view': 'view'
    }

    def __init__(self, automatic_refresh_ms=None, description=None, edit_permissions=None, id=None, is_favourite=None, is_writable=None, name=None, owner=None, popularity=None, rank=None, _self=None, share_permissions=None, system_dashboard=None, view=None):  # noqa: E501
        """Dashboard - a model defined in Swagger"""  # noqa: E501
        self._automatic_refresh_ms = None
        self._description = None
        self._edit_permissions = None
        self._id = None
        self._is_favourite = None
        self._is_writable = None
        self._name = None
        self._owner = None
        self._popularity = None
        self._rank = None
        self.__self = None
        self._share_permissions = None
        self._system_dashboard = None
        self._view = None
        self.discriminator = None
        if automatic_refresh_ms is not None:
            self.automatic_refresh_ms = automatic_refresh_ms
        if description is not None:
            self.description = description
        if edit_permissions is not None:
            self.edit_permissions = edit_permissions
        if id is not None:
            self.id = id
        if is_favourite is not None:
            self.is_favourite = is_favourite
        if is_writable is not None:
            self.is_writable = is_writable
        if name is not None:
            self.name = name
        if owner is not None:
            self.owner = owner
        if popularity is not None:
            self.popularity = popularity
        if rank is not None:
            self.rank = rank
        if _self is not None:
            self._self = _self
        if share_permissions is not None:
            self.share_permissions = share_permissions
        if system_dashboard is not None:
            self.system_dashboard = system_dashboard
        if view is not None:
            self.view = view

    @property
    def automatic_refresh_ms(self):
        """Gets the automatic_refresh_ms of this Dashboard.  # noqa: E501

        The automatic refresh interval for the dashboard in milliseconds.  # noqa: E501

        :return: The automatic_refresh_ms of this Dashboard.  # noqa: E501
        :rtype: int
        """
        return self._automatic_refresh_ms

    @automatic_refresh_ms.setter
    def automatic_refresh_ms(self, automatic_refresh_ms):
        """Sets the automatic_refresh_ms of this Dashboard.

        The automatic refresh interval for the dashboard in milliseconds.  # noqa: E501

        :param automatic_refresh_ms: The automatic_refresh_ms of this Dashboard.  # noqa: E501
        :type: int
        """

        self._automatic_refresh_ms = automatic_refresh_ms

    @property
    def description(self):
        """Gets the description of this Dashboard.  # noqa: E501


        :return: The description of this Dashboard.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Dashboard.


        :param description: The description of this Dashboard.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def edit_permissions(self):
        """Gets the edit_permissions of this Dashboard.  # noqa: E501

        The details of any edit share permissions for the dashboard.  # noqa: E501

        :return: The edit_permissions of this Dashboard.  # noqa: E501
        :rtype: list[SharePermission]
        """
        return self._edit_permissions

    @edit_permissions.setter
    def edit_permissions(self, edit_permissions):
        """Sets the edit_permissions of this Dashboard.

        The details of any edit share permissions for the dashboard.  # noqa: E501

        :param edit_permissions: The edit_permissions of this Dashboard.  # noqa: E501
        :type: list[SharePermission]
        """

        self._edit_permissions = edit_permissions

    @property
    def id(self):
        """Gets the id of this Dashboard.  # noqa: E501

        The ID of the dashboard.  # noqa: E501

        :return: The id of this Dashboard.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Dashboard.

        The ID of the dashboard.  # noqa: E501

        :param id: The id of this Dashboard.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def is_favourite(self):
        """Gets the is_favourite of this Dashboard.  # noqa: E501

        Whether the dashboard is selected as a favorite by the user.  # noqa: E501

        :return: The is_favourite of this Dashboard.  # noqa: E501
        :rtype: bool
        """
        return self._is_favourite

    @is_favourite.setter
    def is_favourite(self, is_favourite):
        """Sets the is_favourite of this Dashboard.

        Whether the dashboard is selected as a favorite by the user.  # noqa: E501

        :param is_favourite: The is_favourite of this Dashboard.  # noqa: E501
        :type: bool
        """

        self._is_favourite = is_favourite

    @property
    def is_writable(self):
        """Gets the is_writable of this Dashboard.  # noqa: E501

        Whether the current user has permission to edit the dashboard.  # noqa: E501

        :return: The is_writable of this Dashboard.  # noqa: E501
        :rtype: bool
        """
        return self._is_writable

    @is_writable.setter
    def is_writable(self, is_writable):
        """Sets the is_writable of this Dashboard.

        Whether the current user has permission to edit the dashboard.  # noqa: E501

        :param is_writable: The is_writable of this Dashboard.  # noqa: E501
        :type: bool
        """

        self._is_writable = is_writable

    @property
    def name(self):
        """Gets the name of this Dashboard.  # noqa: E501

        The name of the dashboard.  # noqa: E501

        :return: The name of this Dashboard.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Dashboard.

        The name of the dashboard.  # noqa: E501

        :param name: The name of this Dashboard.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def owner(self):
        """Gets the owner of this Dashboard.  # noqa: E501

        The owner of the dashboard.  # noqa: E501

        :return: The owner of this Dashboard.  # noqa: E501
        :rtype: AllOfDashboardOwner
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this Dashboard.

        The owner of the dashboard.  # noqa: E501

        :param owner: The owner of this Dashboard.  # noqa: E501
        :type: AllOfDashboardOwner
        """

        self._owner = owner

    @property
    def popularity(self):
        """Gets the popularity of this Dashboard.  # noqa: E501

        The number of users who have this dashboard as a favorite.  # noqa: E501

        :return: The popularity of this Dashboard.  # noqa: E501
        :rtype: int
        """
        return self._popularity

    @popularity.setter
    def popularity(self, popularity):
        """Sets the popularity of this Dashboard.

        The number of users who have this dashboard as a favorite.  # noqa: E501

        :param popularity: The popularity of this Dashboard.  # noqa: E501
        :type: int
        """

        self._popularity = popularity

    @property
    def rank(self):
        """Gets the rank of this Dashboard.  # noqa: E501

        The rank of this dashboard.  # noqa: E501

        :return: The rank of this Dashboard.  # noqa: E501
        :rtype: int
        """
        return self._rank

    @rank.setter
    def rank(self, rank):
        """Sets the rank of this Dashboard.

        The rank of this dashboard.  # noqa: E501

        :param rank: The rank of this Dashboard.  # noqa: E501
        :type: int
        """

        self._rank = rank

    @property
    def _self(self):
        """Gets the _self of this Dashboard.  # noqa: E501

        The URL of these dashboard details.  # noqa: E501

        :return: The _self of this Dashboard.  # noqa: E501
        :rtype: str
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this Dashboard.

        The URL of these dashboard details.  # noqa: E501

        :param _self: The _self of this Dashboard.  # noqa: E501
        :type: str
        """

        self.__self = _self

    @property
    def share_permissions(self):
        """Gets the share_permissions of this Dashboard.  # noqa: E501

        The details of any view share permissions for the dashboard.  # noqa: E501

        :return: The share_permissions of this Dashboard.  # noqa: E501
        :rtype: list[SharePermission]
        """
        return self._share_permissions

    @share_permissions.setter
    def share_permissions(self, share_permissions):
        """Sets the share_permissions of this Dashboard.

        The details of any view share permissions for the dashboard.  # noqa: E501

        :param share_permissions: The share_permissions of this Dashboard.  # noqa: E501
        :type: list[SharePermission]
        """

        self._share_permissions = share_permissions

    @property
    def system_dashboard(self):
        """Gets the system_dashboard of this Dashboard.  # noqa: E501

        Whether the current dashboard is system dashboard.  # noqa: E501

        :return: The system_dashboard of this Dashboard.  # noqa: E501
        :rtype: bool
        """
        return self._system_dashboard

    @system_dashboard.setter
    def system_dashboard(self, system_dashboard):
        """Sets the system_dashboard of this Dashboard.

        Whether the current dashboard is system dashboard.  # noqa: E501

        :param system_dashboard: The system_dashboard of this Dashboard.  # noqa: E501
        :type: bool
        """

        self._system_dashboard = system_dashboard

    @property
    def view(self):
        """Gets the view of this Dashboard.  # noqa: E501

        The URL of the dashboard.  # noqa: E501

        :return: The view of this Dashboard.  # noqa: E501
        :rtype: str
        """
        return self._view

    @view.setter
    def view(self, view):
        """Sets the view of this Dashboard.

        The URL of the dashboard.  # noqa: E501

        :param view: The view of this Dashboard.  # noqa: E501
        :type: str
        """

        self._view = view

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Dashboard, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Dashboard):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
