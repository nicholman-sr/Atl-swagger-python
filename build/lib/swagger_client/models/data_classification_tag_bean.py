# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DataClassificationTagBean(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'color': 'str',
        'description': 'str',
        'guideline': 'str',
        'id': 'str',
        'name': 'str',
        'rank': 'int',
        'status': 'str'
    }

    attribute_map = {
        'color': 'color',
        'description': 'description',
        'guideline': 'guideline',
        'id': 'id',
        'name': 'name',
        'rank': 'rank',
        'status': 'status'
    }

    def __init__(self, color=None, description=None, guideline=None, id=None, name=None, rank=None, status=None):  # noqa: E501
        """DataClassificationTagBean - a model defined in Swagger"""  # noqa: E501
        self._color = None
        self._description = None
        self._guideline = None
        self._id = None
        self._name = None
        self._rank = None
        self._status = None
        self.discriminator = None
        if color is not None:
            self.color = color
        if description is not None:
            self.description = description
        if guideline is not None:
            self.guideline = guideline
        self.id = id
        if name is not None:
            self.name = name
        if rank is not None:
            self.rank = rank
        self.status = status

    @property
    def color(self):
        """Gets the color of this DataClassificationTagBean.  # noqa: E501

        The color of the data classification object.  # noqa: E501

        :return: The color of this DataClassificationTagBean.  # noqa: E501
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this DataClassificationTagBean.

        The color of the data classification object.  # noqa: E501

        :param color: The color of this DataClassificationTagBean.  # noqa: E501
        :type: str
        """

        self._color = color

    @property
    def description(self):
        """Gets the description of this DataClassificationTagBean.  # noqa: E501

        The description of the data classification object.  # noqa: E501

        :return: The description of this DataClassificationTagBean.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DataClassificationTagBean.

        The description of the data classification object.  # noqa: E501

        :param description: The description of this DataClassificationTagBean.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def guideline(self):
        """Gets the guideline of this DataClassificationTagBean.  # noqa: E501

        The guideline of the data classification object.  # noqa: E501

        :return: The guideline of this DataClassificationTagBean.  # noqa: E501
        :rtype: str
        """
        return self._guideline

    @guideline.setter
    def guideline(self, guideline):
        """Sets the guideline of this DataClassificationTagBean.

        The guideline of the data classification object.  # noqa: E501

        :param guideline: The guideline of this DataClassificationTagBean.  # noqa: E501
        :type: str
        """

        self._guideline = guideline

    @property
    def id(self):
        """Gets the id of this DataClassificationTagBean.  # noqa: E501

        The ID of the data classification object.  # noqa: E501

        :return: The id of this DataClassificationTagBean.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DataClassificationTagBean.

        The ID of the data classification object.  # noqa: E501

        :param id: The id of this DataClassificationTagBean.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this DataClassificationTagBean.  # noqa: E501

        The name of the data classification object.  # noqa: E501

        :return: The name of this DataClassificationTagBean.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DataClassificationTagBean.

        The name of the data classification object.  # noqa: E501

        :param name: The name of this DataClassificationTagBean.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def rank(self):
        """Gets the rank of this DataClassificationTagBean.  # noqa: E501

        The rank of the data classification object.  # noqa: E501

        :return: The rank of this DataClassificationTagBean.  # noqa: E501
        :rtype: int
        """
        return self._rank

    @rank.setter
    def rank(self, rank):
        """Sets the rank of this DataClassificationTagBean.

        The rank of the data classification object.  # noqa: E501

        :param rank: The rank of this DataClassificationTagBean.  # noqa: E501
        :type: int
        """

        self._rank = rank

    @property
    def status(self):
        """Gets the status of this DataClassificationTagBean.  # noqa: E501

        The status of the data classification object.  # noqa: E501

        :return: The status of this DataClassificationTagBean.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DataClassificationTagBean.

        The status of the data classification object.  # noqa: E501

        :param status: The status of this DataClassificationTagBean.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DataClassificationTagBean, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataClassificationTagBean):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
