# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EventNotification(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'email_address': 'str',
        'expand': 'str',
        'field': 'AllOfEventNotificationField',
        'group': 'AllOfEventNotificationGroup',
        'id': 'int',
        'notification_type': 'str',
        'parameter': 'str',
        'project_role': 'AllOfEventNotificationProjectRole',
        'recipient': 'str',
        'user': 'AllOfEventNotificationUser'
    }

    attribute_map = {
        'email_address': 'emailAddress',
        'expand': 'expand',
        'field': 'field',
        'group': 'group',
        'id': 'id',
        'notification_type': 'notificationType',
        'parameter': 'parameter',
        'project_role': 'projectRole',
        'recipient': 'recipient',
        'user': 'user'
    }

    def __init__(self, email_address=None, expand=None, field=None, group=None, id=None, notification_type=None, parameter=None, project_role=None, recipient=None, user=None):  # noqa: E501
        """EventNotification - a model defined in Swagger"""  # noqa: E501
        self._email_address = None
        self._expand = None
        self._field = None
        self._group = None
        self._id = None
        self._notification_type = None
        self._parameter = None
        self._project_role = None
        self._recipient = None
        self._user = None
        self.discriminator = None
        if email_address is not None:
            self.email_address = email_address
        if expand is not None:
            self.expand = expand
        if field is not None:
            self.field = field
        if group is not None:
            self.group = group
        if id is not None:
            self.id = id
        if notification_type is not None:
            self.notification_type = notification_type
        if parameter is not None:
            self.parameter = parameter
        if project_role is not None:
            self.project_role = project_role
        if recipient is not None:
            self.recipient = recipient
        if user is not None:
            self.user = user

    @property
    def email_address(self):
        """Gets the email_address of this EventNotification.  # noqa: E501

        The email address.  # noqa: E501

        :return: The email_address of this EventNotification.  # noqa: E501
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """Sets the email_address of this EventNotification.

        The email address.  # noqa: E501

        :param email_address: The email_address of this EventNotification.  # noqa: E501
        :type: str
        """

        self._email_address = email_address

    @property
    def expand(self):
        """Gets the expand of this EventNotification.  # noqa: E501

        Expand options that include additional event notification details in the response.  # noqa: E501

        :return: The expand of this EventNotification.  # noqa: E501
        :rtype: str
        """
        return self._expand

    @expand.setter
    def expand(self, expand):
        """Sets the expand of this EventNotification.

        Expand options that include additional event notification details in the response.  # noqa: E501

        :param expand: The expand of this EventNotification.  # noqa: E501
        :type: str
        """

        self._expand = expand

    @property
    def field(self):
        """Gets the field of this EventNotification.  # noqa: E501

        The custom user or group field.  # noqa: E501

        :return: The field of this EventNotification.  # noqa: E501
        :rtype: AllOfEventNotificationField
        """
        return self._field

    @field.setter
    def field(self, field):
        """Sets the field of this EventNotification.

        The custom user or group field.  # noqa: E501

        :param field: The field of this EventNotification.  # noqa: E501
        :type: AllOfEventNotificationField
        """

        self._field = field

    @property
    def group(self):
        """Gets the group of this EventNotification.  # noqa: E501

        The specified group.  # noqa: E501

        :return: The group of this EventNotification.  # noqa: E501
        :rtype: AllOfEventNotificationGroup
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this EventNotification.

        The specified group.  # noqa: E501

        :param group: The group of this EventNotification.  # noqa: E501
        :type: AllOfEventNotificationGroup
        """

        self._group = group

    @property
    def id(self):
        """Gets the id of this EventNotification.  # noqa: E501

        The ID of the notification.  # noqa: E501

        :return: The id of this EventNotification.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EventNotification.

        The ID of the notification.  # noqa: E501

        :param id: The id of this EventNotification.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def notification_type(self):
        """Gets the notification_type of this EventNotification.  # noqa: E501

        Identifies the recipients of the notification.  # noqa: E501

        :return: The notification_type of this EventNotification.  # noqa: E501
        :rtype: str
        """
        return self._notification_type

    @notification_type.setter
    def notification_type(self, notification_type):
        """Sets the notification_type of this EventNotification.

        Identifies the recipients of the notification.  # noqa: E501

        :param notification_type: The notification_type of this EventNotification.  # noqa: E501
        :type: str
        """
        allowed_values = ["CurrentAssignee", "Reporter", "CurrentUser", "ProjectLead", "ComponentLead", "User", "Group", "ProjectRole", "EmailAddress", "AllWatchers", "UserCustomField", "GroupCustomField"]  # noqa: E501
        if notification_type not in allowed_values:
            raise ValueError(
                "Invalid value for `notification_type` ({0}), must be one of {1}"  # noqa: E501
                .format(notification_type, allowed_values)
            )

        self._notification_type = notification_type

    @property
    def parameter(self):
        """Gets the parameter of this EventNotification.  # noqa: E501

        As a group's name can change, use of `recipient` is recommended. The identifier associated with the `notificationType` value that defines the receiver of the notification, where the receiver isn't implied by `notificationType` value. So, when `notificationType` is:   *  `User` The `parameter` is the user account ID.  *  `Group` The `parameter` is the group name.  *  `ProjectRole` The `parameter` is the project role ID.  *  `UserCustomField` The `parameter` is the ID of the custom field.  *  `GroupCustomField` The `parameter` is the ID of the custom field.  # noqa: E501

        :return: The parameter of this EventNotification.  # noqa: E501
        :rtype: str
        """
        return self._parameter

    @parameter.setter
    def parameter(self, parameter):
        """Sets the parameter of this EventNotification.

        As a group's name can change, use of `recipient` is recommended. The identifier associated with the `notificationType` value that defines the receiver of the notification, where the receiver isn't implied by `notificationType` value. So, when `notificationType` is:   *  `User` The `parameter` is the user account ID.  *  `Group` The `parameter` is the group name.  *  `ProjectRole` The `parameter` is the project role ID.  *  `UserCustomField` The `parameter` is the ID of the custom field.  *  `GroupCustomField` The `parameter` is the ID of the custom field.  # noqa: E501

        :param parameter: The parameter of this EventNotification.  # noqa: E501
        :type: str
        """

        self._parameter = parameter

    @property
    def project_role(self):
        """Gets the project_role of this EventNotification.  # noqa: E501

        The specified project role.  # noqa: E501

        :return: The project_role of this EventNotification.  # noqa: E501
        :rtype: AllOfEventNotificationProjectRole
        """
        return self._project_role

    @project_role.setter
    def project_role(self, project_role):
        """Sets the project_role of this EventNotification.

        The specified project role.  # noqa: E501

        :param project_role: The project_role of this EventNotification.  # noqa: E501
        :type: AllOfEventNotificationProjectRole
        """

        self._project_role = project_role

    @property
    def recipient(self):
        """Gets the recipient of this EventNotification.  # noqa: E501

        The identifier associated with the `notificationType` value that defines the receiver of the notification, where the receiver isn't implied by the `notificationType` value. So, when `notificationType` is:   *  `User`, `recipient` is the user account ID.  *  `Group`, `recipient` is the group ID.  *  `ProjectRole`, `recipient` is the project role ID.  *  `UserCustomField`, `recipient` is the ID of the custom field.  *  `GroupCustomField`, `recipient` is the ID of the custom field.  # noqa: E501

        :return: The recipient of this EventNotification.  # noqa: E501
        :rtype: str
        """
        return self._recipient

    @recipient.setter
    def recipient(self, recipient):
        """Sets the recipient of this EventNotification.

        The identifier associated with the `notificationType` value that defines the receiver of the notification, where the receiver isn't implied by the `notificationType` value. So, when `notificationType` is:   *  `User`, `recipient` is the user account ID.  *  `Group`, `recipient` is the group ID.  *  `ProjectRole`, `recipient` is the project role ID.  *  `UserCustomField`, `recipient` is the ID of the custom field.  *  `GroupCustomField`, `recipient` is the ID of the custom field.  # noqa: E501

        :param recipient: The recipient of this EventNotification.  # noqa: E501
        :type: str
        """

        self._recipient = recipient

    @property
    def user(self):
        """Gets the user of this EventNotification.  # noqa: E501

        The specified user.  # noqa: E501

        :return: The user of this EventNotification.  # noqa: E501
        :rtype: AllOfEventNotificationUser
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this EventNotification.

        The specified user.  # noqa: E501

        :param user: The user of this EventNotification.  # noqa: E501
        :type: AllOfEventNotificationUser
        """

        self._user = user

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EventNotification, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EventNotification):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
