# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Field(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'contexts_count': 'int',
        'description': 'str',
        'id': 'str',
        'is_locked': 'bool',
        'is_unscreenable': 'bool',
        'key': 'str',
        'last_used': 'FieldLastUsed',
        'name': 'str',
        'projects_count': 'int',
        'schema': 'JsonTypeBean',
        'screens_count': 'int',
        'searcher_key': 'str',
        'stable_id': 'str'
    }

    attribute_map = {
        'contexts_count': 'contextsCount',
        'description': 'description',
        'id': 'id',
        'is_locked': 'isLocked',
        'is_unscreenable': 'isUnscreenable',
        'key': 'key',
        'last_used': 'lastUsed',
        'name': 'name',
        'projects_count': 'projectsCount',
        'schema': 'schema',
        'screens_count': 'screensCount',
        'searcher_key': 'searcherKey',
        'stable_id': 'stableId'
    }

    def __init__(self, contexts_count=None, description=None, id=None, is_locked=None, is_unscreenable=None, key=None, last_used=None, name=None, projects_count=None, schema=None, screens_count=None, searcher_key=None, stable_id=None):  # noqa: E501
        """Field - a model defined in Swagger"""  # noqa: E501
        self._contexts_count = None
        self._description = None
        self._id = None
        self._is_locked = None
        self._is_unscreenable = None
        self._key = None
        self._last_used = None
        self._name = None
        self._projects_count = None
        self._schema = None
        self._screens_count = None
        self._searcher_key = None
        self._stable_id = None
        self.discriminator = None
        if contexts_count is not None:
            self.contexts_count = contexts_count
        if description is not None:
            self.description = description
        self.id = id
        if is_locked is not None:
            self.is_locked = is_locked
        if is_unscreenable is not None:
            self.is_unscreenable = is_unscreenable
        if key is not None:
            self.key = key
        if last_used is not None:
            self.last_used = last_used
        self.name = name
        if projects_count is not None:
            self.projects_count = projects_count
        self.schema = schema
        if screens_count is not None:
            self.screens_count = screens_count
        if searcher_key is not None:
            self.searcher_key = searcher_key
        if stable_id is not None:
            self.stable_id = stable_id

    @property
    def contexts_count(self):
        """Gets the contexts_count of this Field.  # noqa: E501

        Number of contexts where the field is used.  # noqa: E501

        :return: The contexts_count of this Field.  # noqa: E501
        :rtype: int
        """
        return self._contexts_count

    @contexts_count.setter
    def contexts_count(self, contexts_count):
        """Sets the contexts_count of this Field.

        Number of contexts where the field is used.  # noqa: E501

        :param contexts_count: The contexts_count of this Field.  # noqa: E501
        :type: int
        """

        self._contexts_count = contexts_count

    @property
    def description(self):
        """Gets the description of this Field.  # noqa: E501

        The description of the field.  # noqa: E501

        :return: The description of this Field.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Field.

        The description of the field.  # noqa: E501

        :param description: The description of this Field.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this Field.  # noqa: E501

        The ID of the field.  # noqa: E501

        :return: The id of this Field.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Field.

        The ID of the field.  # noqa: E501

        :param id: The id of this Field.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def is_locked(self):
        """Gets the is_locked of this Field.  # noqa: E501

        Whether the field is locked.  # noqa: E501

        :return: The is_locked of this Field.  # noqa: E501
        :rtype: bool
        """
        return self._is_locked

    @is_locked.setter
    def is_locked(self, is_locked):
        """Sets the is_locked of this Field.

        Whether the field is locked.  # noqa: E501

        :param is_locked: The is_locked of this Field.  # noqa: E501
        :type: bool
        """

        self._is_locked = is_locked

    @property
    def is_unscreenable(self):
        """Gets the is_unscreenable of this Field.  # noqa: E501

        Whether the field is shown on screen or not.  # noqa: E501

        :return: The is_unscreenable of this Field.  # noqa: E501
        :rtype: bool
        """
        return self._is_unscreenable

    @is_unscreenable.setter
    def is_unscreenable(self, is_unscreenable):
        """Sets the is_unscreenable of this Field.

        Whether the field is shown on screen or not.  # noqa: E501

        :param is_unscreenable: The is_unscreenable of this Field.  # noqa: E501
        :type: bool
        """

        self._is_unscreenable = is_unscreenable

    @property
    def key(self):
        """Gets the key of this Field.  # noqa: E501

        The key of the field.  # noqa: E501

        :return: The key of this Field.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this Field.

        The key of the field.  # noqa: E501

        :param key: The key of this Field.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def last_used(self):
        """Gets the last_used of this Field.  # noqa: E501


        :return: The last_used of this Field.  # noqa: E501
        :rtype: FieldLastUsed
        """
        return self._last_used

    @last_used.setter
    def last_used(self, last_used):
        """Sets the last_used of this Field.


        :param last_used: The last_used of this Field.  # noqa: E501
        :type: FieldLastUsed
        """

        self._last_used = last_used

    @property
    def name(self):
        """Gets the name of this Field.  # noqa: E501

        The name of the field.  # noqa: E501

        :return: The name of this Field.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Field.

        The name of the field.  # noqa: E501

        :param name: The name of this Field.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def projects_count(self):
        """Gets the projects_count of this Field.  # noqa: E501

        Number of projects where the field is used.  # noqa: E501

        :return: The projects_count of this Field.  # noqa: E501
        :rtype: int
        """
        return self._projects_count

    @projects_count.setter
    def projects_count(self, projects_count):
        """Sets the projects_count of this Field.

        Number of projects where the field is used.  # noqa: E501

        :param projects_count: The projects_count of this Field.  # noqa: E501
        :type: int
        """

        self._projects_count = projects_count

    @property
    def schema(self):
        """Gets the schema of this Field.  # noqa: E501


        :return: The schema of this Field.  # noqa: E501
        :rtype: JsonTypeBean
        """
        return self._schema

    @schema.setter
    def schema(self, schema):
        """Sets the schema of this Field.


        :param schema: The schema of this Field.  # noqa: E501
        :type: JsonTypeBean
        """
        if schema is None:
            raise ValueError("Invalid value for `schema`, must not be `None`")  # noqa: E501

        self._schema = schema

    @property
    def screens_count(self):
        """Gets the screens_count of this Field.  # noqa: E501

        Number of screens where the field is used.  # noqa: E501

        :return: The screens_count of this Field.  # noqa: E501
        :rtype: int
        """
        return self._screens_count

    @screens_count.setter
    def screens_count(self, screens_count):
        """Sets the screens_count of this Field.

        Number of screens where the field is used.  # noqa: E501

        :param screens_count: The screens_count of this Field.  # noqa: E501
        :type: int
        """

        self._screens_count = screens_count

    @property
    def searcher_key(self):
        """Gets the searcher_key of this Field.  # noqa: E501

        The searcher key of the field. Returned for custom fields.  # noqa: E501

        :return: The searcher_key of this Field.  # noqa: E501
        :rtype: str
        """
        return self._searcher_key

    @searcher_key.setter
    def searcher_key(self, searcher_key):
        """Sets the searcher_key of this Field.

        The searcher key of the field. Returned for custom fields.  # noqa: E501

        :param searcher_key: The searcher_key of this Field.  # noqa: E501
        :type: str
        """

        self._searcher_key = searcher_key

    @property
    def stable_id(self):
        """Gets the stable_id of this Field.  # noqa: E501

        The stable ID of the field.  # noqa: E501

        :return: The stable_id of this Field.  # noqa: E501
        :rtype: str
        """
        return self._stable_id

    @stable_id.setter
    def stable_id(self, stable_id):
        """Sets the stable_id of this Field.

        The stable ID of the field.  # noqa: E501

        :param stable_id: The stable_id of this Field.  # noqa: E501
        :type: str
        """

        self._stable_id = stable_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Field, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Field):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
