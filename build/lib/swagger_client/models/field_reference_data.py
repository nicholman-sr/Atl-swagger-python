# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FieldReferenceData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'auto': 'str',
        'cfid': 'str',
        'deprecated': 'str',
        'deprecated_searcher_key': 'str',
        'display_name': 'str',
        'operators': 'list[str]',
        'orderable': 'str',
        'searchable': 'str',
        'types': 'list[str]',
        'value': 'str'
    }

    attribute_map = {
        'auto': 'auto',
        'cfid': 'cfid',
        'deprecated': 'deprecated',
        'deprecated_searcher_key': 'deprecatedSearcherKey',
        'display_name': 'displayName',
        'operators': 'operators',
        'orderable': 'orderable',
        'searchable': 'searchable',
        'types': 'types',
        'value': 'value'
    }

    def __init__(self, auto=None, cfid=None, deprecated=None, deprecated_searcher_key=None, display_name=None, operators=None, orderable=None, searchable=None, types=None, value=None):  # noqa: E501
        """FieldReferenceData - a model defined in Swagger"""  # noqa: E501
        self._auto = None
        self._cfid = None
        self._deprecated = None
        self._deprecated_searcher_key = None
        self._display_name = None
        self._operators = None
        self._orderable = None
        self._searchable = None
        self._types = None
        self._value = None
        self.discriminator = None
        if auto is not None:
            self.auto = auto
        if cfid is not None:
            self.cfid = cfid
        if deprecated is not None:
            self.deprecated = deprecated
        if deprecated_searcher_key is not None:
            self.deprecated_searcher_key = deprecated_searcher_key
        if display_name is not None:
            self.display_name = display_name
        if operators is not None:
            self.operators = operators
        if orderable is not None:
            self.orderable = orderable
        if searchable is not None:
            self.searchable = searchable
        if types is not None:
            self.types = types
        if value is not None:
            self.value = value

    @property
    def auto(self):
        """Gets the auto of this FieldReferenceData.  # noqa: E501

        Whether the field provide auto-complete suggestions.  # noqa: E501

        :return: The auto of this FieldReferenceData.  # noqa: E501
        :rtype: str
        """
        return self._auto

    @auto.setter
    def auto(self, auto):
        """Sets the auto of this FieldReferenceData.

        Whether the field provide auto-complete suggestions.  # noqa: E501

        :param auto: The auto of this FieldReferenceData.  # noqa: E501
        :type: str
        """
        allowed_values = ["true", "false"]  # noqa: E501
        if auto not in allowed_values:
            raise ValueError(
                "Invalid value for `auto` ({0}), must be one of {1}"  # noqa: E501
                .format(auto, allowed_values)
            )

        self._auto = auto

    @property
    def cfid(self):
        """Gets the cfid of this FieldReferenceData.  # noqa: E501

        If the item is a custom field, the ID of the custom field.  # noqa: E501

        :return: The cfid of this FieldReferenceData.  # noqa: E501
        :rtype: str
        """
        return self._cfid

    @cfid.setter
    def cfid(self, cfid):
        """Sets the cfid of this FieldReferenceData.

        If the item is a custom field, the ID of the custom field.  # noqa: E501

        :param cfid: The cfid of this FieldReferenceData.  # noqa: E501
        :type: str
        """

        self._cfid = cfid

    @property
    def deprecated(self):
        """Gets the deprecated of this FieldReferenceData.  # noqa: E501

        Whether this field has been deprecated.  # noqa: E501

        :return: The deprecated of this FieldReferenceData.  # noqa: E501
        :rtype: str
        """
        return self._deprecated

    @deprecated.setter
    def deprecated(self, deprecated):
        """Sets the deprecated of this FieldReferenceData.

        Whether this field has been deprecated.  # noqa: E501

        :param deprecated: The deprecated of this FieldReferenceData.  # noqa: E501
        :type: str
        """
        allowed_values = ["true", "false"]  # noqa: E501
        if deprecated not in allowed_values:
            raise ValueError(
                "Invalid value for `deprecated` ({0}), must be one of {1}"  # noqa: E501
                .format(deprecated, allowed_values)
            )

        self._deprecated = deprecated

    @property
    def deprecated_searcher_key(self):
        """Gets the deprecated_searcher_key of this FieldReferenceData.  # noqa: E501

        The searcher key of the field, only passed when the field is deprecated.  # noqa: E501

        :return: The deprecated_searcher_key of this FieldReferenceData.  # noqa: E501
        :rtype: str
        """
        return self._deprecated_searcher_key

    @deprecated_searcher_key.setter
    def deprecated_searcher_key(self, deprecated_searcher_key):
        """Sets the deprecated_searcher_key of this FieldReferenceData.

        The searcher key of the field, only passed when the field is deprecated.  # noqa: E501

        :param deprecated_searcher_key: The deprecated_searcher_key of this FieldReferenceData.  # noqa: E501
        :type: str
        """

        self._deprecated_searcher_key = deprecated_searcher_key

    @property
    def display_name(self):
        """Gets the display_name of this FieldReferenceData.  # noqa: E501

        The display name contains the following:   *  for system fields, the field name. For example, `Summary`.  *  for collapsed custom fields, the field name followed by a hyphen and then the field name and field type. For example, `Component - Component[Dropdown]`.  *  for other custom fields, the field name followed by a hyphen and then the custom field ID. For example, `Component - cf[10061]`.  # noqa: E501

        :return: The display_name of this FieldReferenceData.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this FieldReferenceData.

        The display name contains the following:   *  for system fields, the field name. For example, `Summary`.  *  for collapsed custom fields, the field name followed by a hyphen and then the field name and field type. For example, `Component - Component[Dropdown]`.  *  for other custom fields, the field name followed by a hyphen and then the custom field ID. For example, `Component - cf[10061]`.  # noqa: E501

        :param display_name: The display_name of this FieldReferenceData.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def operators(self):
        """Gets the operators of this FieldReferenceData.  # noqa: E501

        The valid search operators for the field.  # noqa: E501

        :return: The operators of this FieldReferenceData.  # noqa: E501
        :rtype: list[str]
        """
        return self._operators

    @operators.setter
    def operators(self, operators):
        """Sets the operators of this FieldReferenceData.

        The valid search operators for the field.  # noqa: E501

        :param operators: The operators of this FieldReferenceData.  # noqa: E501
        :type: list[str]
        """

        self._operators = operators

    @property
    def orderable(self):
        """Gets the orderable of this FieldReferenceData.  # noqa: E501

        Whether the field can be used in a query's `ORDER BY` clause.  # noqa: E501

        :return: The orderable of this FieldReferenceData.  # noqa: E501
        :rtype: str
        """
        return self._orderable

    @orderable.setter
    def orderable(self, orderable):
        """Sets the orderable of this FieldReferenceData.

        Whether the field can be used in a query's `ORDER BY` clause.  # noqa: E501

        :param orderable: The orderable of this FieldReferenceData.  # noqa: E501
        :type: str
        """
        allowed_values = ["true", "false"]  # noqa: E501
        if orderable not in allowed_values:
            raise ValueError(
                "Invalid value for `orderable` ({0}), must be one of {1}"  # noqa: E501
                .format(orderable, allowed_values)
            )

        self._orderable = orderable

    @property
    def searchable(self):
        """Gets the searchable of this FieldReferenceData.  # noqa: E501

        Whether the content of this field can be searched.  # noqa: E501

        :return: The searchable of this FieldReferenceData.  # noqa: E501
        :rtype: str
        """
        return self._searchable

    @searchable.setter
    def searchable(self, searchable):
        """Sets the searchable of this FieldReferenceData.

        Whether the content of this field can be searched.  # noqa: E501

        :param searchable: The searchable of this FieldReferenceData.  # noqa: E501
        :type: str
        """
        allowed_values = ["true", "false"]  # noqa: E501
        if searchable not in allowed_values:
            raise ValueError(
                "Invalid value for `searchable` ({0}), must be one of {1}"  # noqa: E501
                .format(searchable, allowed_values)
            )

        self._searchable = searchable

    @property
    def types(self):
        """Gets the types of this FieldReferenceData.  # noqa: E501

        The data types of items in the field.  # noqa: E501

        :return: The types of this FieldReferenceData.  # noqa: E501
        :rtype: list[str]
        """
        return self._types

    @types.setter
    def types(self, types):
        """Sets the types of this FieldReferenceData.

        The data types of items in the field.  # noqa: E501

        :param types: The types of this FieldReferenceData.  # noqa: E501
        :type: list[str]
        """

        self._types = types

    @property
    def value(self):
        """Gets the value of this FieldReferenceData.  # noqa: E501

        The field identifier.  # noqa: E501

        :return: The value of this FieldReferenceData.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this FieldReferenceData.

        The field identifier.  # noqa: E501

        :param value: The value of this FieldReferenceData.  # noqa: E501
        :type: str
        """

        self._value = value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FieldReferenceData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FieldReferenceData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
