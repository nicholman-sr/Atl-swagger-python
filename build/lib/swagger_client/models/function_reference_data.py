# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FunctionReferenceData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'display_name': 'str',
        'is_list': 'str',
        'supports_list_and_single_value_operators': 'str',
        'types': 'list[str]',
        'value': 'str'
    }

    attribute_map = {
        'display_name': 'displayName',
        'is_list': 'isList',
        'supports_list_and_single_value_operators': 'supportsListAndSingleValueOperators',
        'types': 'types',
        'value': 'value'
    }

    def __init__(self, display_name=None, is_list=None, supports_list_and_single_value_operators=None, types=None, value=None):  # noqa: E501
        """FunctionReferenceData - a model defined in Swagger"""  # noqa: E501
        self._display_name = None
        self._is_list = None
        self._supports_list_and_single_value_operators = None
        self._types = None
        self._value = None
        self.discriminator = None
        if display_name is not None:
            self.display_name = display_name
        if is_list is not None:
            self.is_list = is_list
        if supports_list_and_single_value_operators is not None:
            self.supports_list_and_single_value_operators = supports_list_and_single_value_operators
        if types is not None:
            self.types = types
        if value is not None:
            self.value = value

    @property
    def display_name(self):
        """Gets the display_name of this FunctionReferenceData.  # noqa: E501

        The display name of the function.  # noqa: E501

        :return: The display_name of this FunctionReferenceData.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this FunctionReferenceData.

        The display name of the function.  # noqa: E501

        :param display_name: The display_name of this FunctionReferenceData.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def is_list(self):
        """Gets the is_list of this FunctionReferenceData.  # noqa: E501

        Whether the function can take a list of arguments.  # noqa: E501

        :return: The is_list of this FunctionReferenceData.  # noqa: E501
        :rtype: str
        """
        return self._is_list

    @is_list.setter
    def is_list(self, is_list):
        """Sets the is_list of this FunctionReferenceData.

        Whether the function can take a list of arguments.  # noqa: E501

        :param is_list: The is_list of this FunctionReferenceData.  # noqa: E501
        :type: str
        """
        allowed_values = ["true", "false"]  # noqa: E501
        if is_list not in allowed_values:
            raise ValueError(
                "Invalid value for `is_list` ({0}), must be one of {1}"  # noqa: E501
                .format(is_list, allowed_values)
            )

        self._is_list = is_list

    @property
    def supports_list_and_single_value_operators(self):
        """Gets the supports_list_and_single_value_operators of this FunctionReferenceData.  # noqa: E501

        Whether the function supports both single and list value operators.  # noqa: E501

        :return: The supports_list_and_single_value_operators of this FunctionReferenceData.  # noqa: E501
        :rtype: str
        """
        return self._supports_list_and_single_value_operators

    @supports_list_and_single_value_operators.setter
    def supports_list_and_single_value_operators(self, supports_list_and_single_value_operators):
        """Sets the supports_list_and_single_value_operators of this FunctionReferenceData.

        Whether the function supports both single and list value operators.  # noqa: E501

        :param supports_list_and_single_value_operators: The supports_list_and_single_value_operators of this FunctionReferenceData.  # noqa: E501
        :type: str
        """
        allowed_values = ["true", "false"]  # noqa: E501
        if supports_list_and_single_value_operators not in allowed_values:
            raise ValueError(
                "Invalid value for `supports_list_and_single_value_operators` ({0}), must be one of {1}"  # noqa: E501
                .format(supports_list_and_single_value_operators, allowed_values)
            )

        self._supports_list_and_single_value_operators = supports_list_and_single_value_operators

    @property
    def types(self):
        """Gets the types of this FunctionReferenceData.  # noqa: E501

        The data types returned by the function.  # noqa: E501

        :return: The types of this FunctionReferenceData.  # noqa: E501
        :rtype: list[str]
        """
        return self._types

    @types.setter
    def types(self, types):
        """Sets the types of this FunctionReferenceData.

        The data types returned by the function.  # noqa: E501

        :param types: The types of this FunctionReferenceData.  # noqa: E501
        :type: list[str]
        """

        self._types = types

    @property
    def value(self):
        """Gets the value of this FunctionReferenceData.  # noqa: E501

        The function identifier.  # noqa: E501

        :return: The value of this FunctionReferenceData.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this FunctionReferenceData.

        The function identifier.  # noqa: E501

        :param value: The value of this FunctionReferenceData.  # noqa: E501
        :type: str
        """

        self._value = value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FunctionReferenceData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FunctionReferenceData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
