# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IssueBulkEditField(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'field_options': 'list[IssueBulkOperationsFieldOption]',
        'id': 'str',
        'is_required': 'bool',
        'multi_select_field_options': 'list[str]',
        'name': 'str',
        'search_url': 'str',
        'type': 'str',
        'unavailable_message': 'str'
    }

    attribute_map = {
        'description': 'description',
        'field_options': 'fieldOptions',
        'id': 'id',
        'is_required': 'isRequired',
        'multi_select_field_options': 'multiSelectFieldOptions',
        'name': 'name',
        'search_url': 'searchUrl',
        'type': 'type',
        'unavailable_message': 'unavailableMessage'
    }

    def __init__(self, description=None, field_options=None, id=None, is_required=None, multi_select_field_options=None, name=None, search_url=None, type=None, unavailable_message=None):  # noqa: E501
        """IssueBulkEditField - a model defined in Swagger"""  # noqa: E501
        self._description = None
        self._field_options = None
        self._id = None
        self._is_required = None
        self._multi_select_field_options = None
        self._name = None
        self._search_url = None
        self._type = None
        self._unavailable_message = None
        self.discriminator = None
        if description is not None:
            self.description = description
        if field_options is not None:
            self.field_options = field_options
        if id is not None:
            self.id = id
        if is_required is not None:
            self.is_required = is_required
        if multi_select_field_options is not None:
            self.multi_select_field_options = multi_select_field_options
        if name is not None:
            self.name = name
        if search_url is not None:
            self.search_url = search_url
        if type is not None:
            self.type = type
        if unavailable_message is not None:
            self.unavailable_message = unavailable_message

    @property
    def description(self):
        """Gets the description of this IssueBulkEditField.  # noqa: E501

        Description of the field.  # noqa: E501

        :return: The description of this IssueBulkEditField.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this IssueBulkEditField.

        Description of the field.  # noqa: E501

        :param description: The description of this IssueBulkEditField.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def field_options(self):
        """Gets the field_options of this IssueBulkEditField.  # noqa: E501

        A list of options related to the field, applicable in contexts where multiple selections are allowed.  # noqa: E501

        :return: The field_options of this IssueBulkEditField.  # noqa: E501
        :rtype: list[IssueBulkOperationsFieldOption]
        """
        return self._field_options

    @field_options.setter
    def field_options(self, field_options):
        """Sets the field_options of this IssueBulkEditField.

        A list of options related to the field, applicable in contexts where multiple selections are allowed.  # noqa: E501

        :param field_options: The field_options of this IssueBulkEditField.  # noqa: E501
        :type: list[IssueBulkOperationsFieldOption]
        """

        self._field_options = field_options

    @property
    def id(self):
        """Gets the id of this IssueBulkEditField.  # noqa: E501

        The unique ID of the field.  # noqa: E501

        :return: The id of this IssueBulkEditField.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this IssueBulkEditField.

        The unique ID of the field.  # noqa: E501

        :param id: The id of this IssueBulkEditField.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def is_required(self):
        """Gets the is_required of this IssueBulkEditField.  # noqa: E501

        Indicates whether the field is mandatory for the operation.  # noqa: E501

        :return: The is_required of this IssueBulkEditField.  # noqa: E501
        :rtype: bool
        """
        return self._is_required

    @is_required.setter
    def is_required(self, is_required):
        """Sets the is_required of this IssueBulkEditField.

        Indicates whether the field is mandatory for the operation.  # noqa: E501

        :param is_required: The is_required of this IssueBulkEditField.  # noqa: E501
        :type: bool
        """

        self._is_required = is_required

    @property
    def multi_select_field_options(self):
        """Gets the multi_select_field_options of this IssueBulkEditField.  # noqa: E501

        Specifies supported actions (like add, replace, remove) on multi-select fields via an enum.  # noqa: E501

        :return: The multi_select_field_options of this IssueBulkEditField.  # noqa: E501
        :rtype: list[str]
        """
        return self._multi_select_field_options

    @multi_select_field_options.setter
    def multi_select_field_options(self, multi_select_field_options):
        """Sets the multi_select_field_options of this IssueBulkEditField.

        Specifies supported actions (like add, replace, remove) on multi-select fields via an enum.  # noqa: E501

        :param multi_select_field_options: The multi_select_field_options of this IssueBulkEditField.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["ADD", "REMOVE", "REPLACE", "REMOVE_ALL"]  # noqa: E501
        if not set(multi_select_field_options).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `multi_select_field_options` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(multi_select_field_options) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._multi_select_field_options = multi_select_field_options

    @property
    def name(self):
        """Gets the name of this IssueBulkEditField.  # noqa: E501

        The display name of the field.  # noqa: E501

        :return: The name of this IssueBulkEditField.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IssueBulkEditField.

        The display name of the field.  # noqa: E501

        :param name: The name of this IssueBulkEditField.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def search_url(self):
        """Gets the search_url of this IssueBulkEditField.  # noqa: E501

        A URL to fetch additional data for the field  # noqa: E501

        :return: The search_url of this IssueBulkEditField.  # noqa: E501
        :rtype: str
        """
        return self._search_url

    @search_url.setter
    def search_url(self, search_url):
        """Sets the search_url of this IssueBulkEditField.

        A URL to fetch additional data for the field  # noqa: E501

        :param search_url: The search_url of this IssueBulkEditField.  # noqa: E501
        :type: str
        """

        self._search_url = search_url

    @property
    def type(self):
        """Gets the type of this IssueBulkEditField.  # noqa: E501

        The type of the field.  # noqa: E501

        :return: The type of this IssueBulkEditField.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this IssueBulkEditField.

        The type of the field.  # noqa: E501

        :param type: The type of this IssueBulkEditField.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def unavailable_message(self):
        """Gets the unavailable_message of this IssueBulkEditField.  # noqa: E501

        A message indicating why the field is unavailable for editing.  # noqa: E501

        :return: The unavailable_message of this IssueBulkEditField.  # noqa: E501
        :rtype: str
        """
        return self._unavailable_message

    @unavailable_message.setter
    def unavailable_message(self, unavailable_message):
        """Sets the unavailable_message of this IssueBulkEditField.

        A message indicating why the field is unavailable for editing.  # noqa: E501

        :param unavailable_message: The unavailable_message of this IssueBulkEditField.  # noqa: E501
        :type: str
        """

        self._unavailable_message = unavailable_message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IssueBulkEditField, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IssueBulkEditField):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
