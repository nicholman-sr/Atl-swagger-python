# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IssueBulkTransitionPayload(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bulk_transition_inputs': 'list[BulkTransitionSubmitInput]',
        'send_bulk_notification': 'bool'
    }

    attribute_map = {
        'bulk_transition_inputs': 'bulkTransitionInputs',
        'send_bulk_notification': 'sendBulkNotification'
    }

    def __init__(self, bulk_transition_inputs=None, send_bulk_notification=True):  # noqa: E501
        """IssueBulkTransitionPayload - a model defined in Swagger"""  # noqa: E501
        self._bulk_transition_inputs = None
        self._send_bulk_notification = None
        self.discriminator = None
        self.bulk_transition_inputs = bulk_transition_inputs
        if send_bulk_notification is not None:
            self.send_bulk_notification = send_bulk_notification

    @property
    def bulk_transition_inputs(self):
        """Gets the bulk_transition_inputs of this IssueBulkTransitionPayload.  # noqa: E501

        List of objects and each object has two properties:   *  Issues that will be bulk transitioned.  *  TransitionId that corresponds to a specific transition of issues that share the same workflow.  # noqa: E501

        :return: The bulk_transition_inputs of this IssueBulkTransitionPayload.  # noqa: E501
        :rtype: list[BulkTransitionSubmitInput]
        """
        return self._bulk_transition_inputs

    @bulk_transition_inputs.setter
    def bulk_transition_inputs(self, bulk_transition_inputs):
        """Sets the bulk_transition_inputs of this IssueBulkTransitionPayload.

        List of objects and each object has two properties:   *  Issues that will be bulk transitioned.  *  TransitionId that corresponds to a specific transition of issues that share the same workflow.  # noqa: E501

        :param bulk_transition_inputs: The bulk_transition_inputs of this IssueBulkTransitionPayload.  # noqa: E501
        :type: list[BulkTransitionSubmitInput]
        """
        if bulk_transition_inputs is None:
            raise ValueError("Invalid value for `bulk_transition_inputs`, must not be `None`")  # noqa: E501

        self._bulk_transition_inputs = bulk_transition_inputs

    @property
    def send_bulk_notification(self):
        """Gets the send_bulk_notification of this IssueBulkTransitionPayload.  # noqa: E501

        A boolean value that indicates whether to send a bulk change notification when the issues are being transitioned.  If `true`, dispatches a bulk notification email to users about the updates.  # noqa: E501

        :return: The send_bulk_notification of this IssueBulkTransitionPayload.  # noqa: E501
        :rtype: bool
        """
        return self._send_bulk_notification

    @send_bulk_notification.setter
    def send_bulk_notification(self, send_bulk_notification):
        """Sets the send_bulk_notification of this IssueBulkTransitionPayload.

        A boolean value that indicates whether to send a bulk change notification when the issues are being transitioned.  If `true`, dispatches a bulk notification email to users about the updates.  # noqa: E501

        :param send_bulk_notification: The send_bulk_notification of this IssueBulkTransitionPayload.  # noqa: E501
        :type: bool
        """

        self._send_bulk_notification = send_bulk_notification

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IssueBulkTransitionPayload, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IssueBulkTransitionPayload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
