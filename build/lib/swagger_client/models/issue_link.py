# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IssueLink(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'inward_issue': 'AllOfIssueLinkInwardIssue',
        'outward_issue': 'AllOfIssueLinkOutwardIssue',
        '_self': 'str',
        'type': 'AllOfIssueLinkType'
    }

    attribute_map = {
        'id': 'id',
        'inward_issue': 'inwardIssue',
        'outward_issue': 'outwardIssue',
        '_self': 'self',
        'type': 'type'
    }

    def __init__(self, id=None, inward_issue=None, outward_issue=None, _self=None, type=None):  # noqa: E501
        """IssueLink - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._inward_issue = None
        self._outward_issue = None
        self.__self = None
        self._type = None
        self.discriminator = None
        if id is not None:
            self.id = id
        self.inward_issue = inward_issue
        self.outward_issue = outward_issue
        if _self is not None:
            self._self = _self
        self.type = type

    @property
    def id(self):
        """Gets the id of this IssueLink.  # noqa: E501

        The ID of the issue link.  # noqa: E501

        :return: The id of this IssueLink.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this IssueLink.

        The ID of the issue link.  # noqa: E501

        :param id: The id of this IssueLink.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def inward_issue(self):
        """Gets the inward_issue of this IssueLink.  # noqa: E501

        Provides details about the linked issue. If presenting this link in a user interface, use the `inward` field of the issue link type to label the link.  # noqa: E501

        :return: The inward_issue of this IssueLink.  # noqa: E501
        :rtype: AllOfIssueLinkInwardIssue
        """
        return self._inward_issue

    @inward_issue.setter
    def inward_issue(self, inward_issue):
        """Sets the inward_issue of this IssueLink.

        Provides details about the linked issue. If presenting this link in a user interface, use the `inward` field of the issue link type to label the link.  # noqa: E501

        :param inward_issue: The inward_issue of this IssueLink.  # noqa: E501
        :type: AllOfIssueLinkInwardIssue
        """
        if inward_issue is None:
            raise ValueError("Invalid value for `inward_issue`, must not be `None`")  # noqa: E501

        self._inward_issue = inward_issue

    @property
    def outward_issue(self):
        """Gets the outward_issue of this IssueLink.  # noqa: E501

        Provides details about the linked issue. If presenting this link in a user interface, use the `outward` field of the issue link type to label the link.  # noqa: E501

        :return: The outward_issue of this IssueLink.  # noqa: E501
        :rtype: AllOfIssueLinkOutwardIssue
        """
        return self._outward_issue

    @outward_issue.setter
    def outward_issue(self, outward_issue):
        """Sets the outward_issue of this IssueLink.

        Provides details about the linked issue. If presenting this link in a user interface, use the `outward` field of the issue link type to label the link.  # noqa: E501

        :param outward_issue: The outward_issue of this IssueLink.  # noqa: E501
        :type: AllOfIssueLinkOutwardIssue
        """
        if outward_issue is None:
            raise ValueError("Invalid value for `outward_issue`, must not be `None`")  # noqa: E501

        self._outward_issue = outward_issue

    @property
    def _self(self):
        """Gets the _self of this IssueLink.  # noqa: E501

        The URL of the issue link.  # noqa: E501

        :return: The _self of this IssueLink.  # noqa: E501
        :rtype: str
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this IssueLink.

        The URL of the issue link.  # noqa: E501

        :param _self: The _self of this IssueLink.  # noqa: E501
        :type: str
        """

        self.__self = _self

    @property
    def type(self):
        """Gets the type of this IssueLink.  # noqa: E501

        The type of link between the issues.  # noqa: E501

        :return: The type of this IssueLink.  # noqa: E501
        :rtype: AllOfIssueLinkType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this IssueLink.

        The type of link between the issues.  # noqa: E501

        :param type: The type of this IssueLink.  # noqa: E501
        :type: AllOfIssueLinkType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IssueLink, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IssueLink):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
