# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class JiraExpressionValidationError(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'column': 'int',
        'expression': 'str',
        'line': 'int',
        'message': 'str',
        'type': 'str'
    }

    attribute_map = {
        'column': 'column',
        'expression': 'expression',
        'line': 'line',
        'message': 'message',
        'type': 'type'
    }

    def __init__(self, column=None, expression=None, line=None, message=None, type=None):  # noqa: E501
        """JiraExpressionValidationError - a model defined in Swagger"""  # noqa: E501
        self._column = None
        self._expression = None
        self._line = None
        self._message = None
        self._type = None
        self.discriminator = None
        if column is not None:
            self.column = column
        if expression is not None:
            self.expression = expression
        if line is not None:
            self.line = line
        self.message = message
        self.type = type

    @property
    def column(self):
        """Gets the column of this JiraExpressionValidationError.  # noqa: E501

        The text column in which the error occurred.  # noqa: E501

        :return: The column of this JiraExpressionValidationError.  # noqa: E501
        :rtype: int
        """
        return self._column

    @column.setter
    def column(self, column):
        """Sets the column of this JiraExpressionValidationError.

        The text column in which the error occurred.  # noqa: E501

        :param column: The column of this JiraExpressionValidationError.  # noqa: E501
        :type: int
        """

        self._column = column

    @property
    def expression(self):
        """Gets the expression of this JiraExpressionValidationError.  # noqa: E501

        The part of the expression in which the error occurred.  # noqa: E501

        :return: The expression of this JiraExpressionValidationError.  # noqa: E501
        :rtype: str
        """
        return self._expression

    @expression.setter
    def expression(self, expression):
        """Sets the expression of this JiraExpressionValidationError.

        The part of the expression in which the error occurred.  # noqa: E501

        :param expression: The expression of this JiraExpressionValidationError.  # noqa: E501
        :type: str
        """

        self._expression = expression

    @property
    def line(self):
        """Gets the line of this JiraExpressionValidationError.  # noqa: E501

        The text line in which the error occurred.  # noqa: E501

        :return: The line of this JiraExpressionValidationError.  # noqa: E501
        :rtype: int
        """
        return self._line

    @line.setter
    def line(self, line):
        """Sets the line of this JiraExpressionValidationError.

        The text line in which the error occurred.  # noqa: E501

        :param line: The line of this JiraExpressionValidationError.  # noqa: E501
        :type: int
        """

        self._line = line

    @property
    def message(self):
        """Gets the message of this JiraExpressionValidationError.  # noqa: E501

        Details about the error.  # noqa: E501

        :return: The message of this JiraExpressionValidationError.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this JiraExpressionValidationError.

        Details about the error.  # noqa: E501

        :param message: The message of this JiraExpressionValidationError.  # noqa: E501
        :type: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")  # noqa: E501

        self._message = message

    @property
    def type(self):
        """Gets the type of this JiraExpressionValidationError.  # noqa: E501

        The error type.  # noqa: E501

        :return: The type of this JiraExpressionValidationError.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this JiraExpressionValidationError.

        The error type.  # noqa: E501

        :param type: The type of this JiraExpressionValidationError.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["syntax", "type", "other"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JiraExpressionValidationError, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JiraExpressionValidationError):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
