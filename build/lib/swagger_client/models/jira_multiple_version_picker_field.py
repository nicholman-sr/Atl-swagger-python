# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class JiraMultipleVersionPickerField(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bulk_edit_multi_select_field_option': 'str',
        'field_id': 'str',
        'versions': 'list[JiraVersionField]'
    }

    attribute_map = {
        'bulk_edit_multi_select_field_option': 'bulkEditMultiSelectFieldOption',
        'field_id': 'fieldId',
        'versions': 'versions'
    }

    def __init__(self, bulk_edit_multi_select_field_option=None, field_id=None, versions=None):  # noqa: E501
        """JiraMultipleVersionPickerField - a model defined in Swagger"""  # noqa: E501
        self._bulk_edit_multi_select_field_option = None
        self._field_id = None
        self._versions = None
        self.discriminator = None
        self.bulk_edit_multi_select_field_option = bulk_edit_multi_select_field_option
        self.field_id = field_id
        self.versions = versions

    @property
    def bulk_edit_multi_select_field_option(self):
        """Gets the bulk_edit_multi_select_field_option of this JiraMultipleVersionPickerField.  # noqa: E501


        :return: The bulk_edit_multi_select_field_option of this JiraMultipleVersionPickerField.  # noqa: E501
        :rtype: str
        """
        return self._bulk_edit_multi_select_field_option

    @bulk_edit_multi_select_field_option.setter
    def bulk_edit_multi_select_field_option(self, bulk_edit_multi_select_field_option):
        """Sets the bulk_edit_multi_select_field_option of this JiraMultipleVersionPickerField.


        :param bulk_edit_multi_select_field_option: The bulk_edit_multi_select_field_option of this JiraMultipleVersionPickerField.  # noqa: E501
        :type: str
        """
        if bulk_edit_multi_select_field_option is None:
            raise ValueError("Invalid value for `bulk_edit_multi_select_field_option`, must not be `None`")  # noqa: E501
        allowed_values = ["ADD", "REMOVE", "REPLACE", "REMOVE_ALL"]  # noqa: E501
        if bulk_edit_multi_select_field_option not in allowed_values:
            raise ValueError(
                "Invalid value for `bulk_edit_multi_select_field_option` ({0}), must be one of {1}"  # noqa: E501
                .format(bulk_edit_multi_select_field_option, allowed_values)
            )

        self._bulk_edit_multi_select_field_option = bulk_edit_multi_select_field_option

    @property
    def field_id(self):
        """Gets the field_id of this JiraMultipleVersionPickerField.  # noqa: E501


        :return: The field_id of this JiraMultipleVersionPickerField.  # noqa: E501
        :rtype: str
        """
        return self._field_id

    @field_id.setter
    def field_id(self, field_id):
        """Sets the field_id of this JiraMultipleVersionPickerField.


        :param field_id: The field_id of this JiraMultipleVersionPickerField.  # noqa: E501
        :type: str
        """
        if field_id is None:
            raise ValueError("Invalid value for `field_id`, must not be `None`")  # noqa: E501

        self._field_id = field_id

    @property
    def versions(self):
        """Gets the versions of this JiraMultipleVersionPickerField.  # noqa: E501


        :return: The versions of this JiraMultipleVersionPickerField.  # noqa: E501
        :rtype: list[JiraVersionField]
        """
        return self._versions

    @versions.setter
    def versions(self, versions):
        """Sets the versions of this JiraMultipleVersionPickerField.


        :param versions: The versions of this JiraMultipleVersionPickerField.  # noqa: E501
        :type: list[JiraVersionField]
        """
        if versions is None:
            raise ValueError("Invalid value for `versions`, must not be `None`")  # noqa: E501

        self._versions = versions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JiraMultipleVersionPickerField, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JiraMultipleVersionPickerField):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
