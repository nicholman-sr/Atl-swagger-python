# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class JsonTypeBean(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'configuration': 'dict(str, object)',
        'custom': 'str',
        'custom_id': 'int',
        'items': 'str',
        'system': 'str',
        'type': 'str'
    }

    attribute_map = {
        'configuration': 'configuration',
        'custom': 'custom',
        'custom_id': 'customId',
        'items': 'items',
        'system': 'system',
        'type': 'type'
    }

    def __init__(self, configuration=None, custom=None, custom_id=None, items=None, system=None, type=None):  # noqa: E501
        """JsonTypeBean - a model defined in Swagger"""  # noqa: E501
        self._configuration = None
        self._custom = None
        self._custom_id = None
        self._items = None
        self._system = None
        self._type = None
        self.discriminator = None
        if configuration is not None:
            self.configuration = configuration
        if custom is not None:
            self.custom = custom
        if custom_id is not None:
            self.custom_id = custom_id
        if items is not None:
            self.items = items
        if system is not None:
            self.system = system
        self.type = type

    @property
    def configuration(self):
        """Gets the configuration of this JsonTypeBean.  # noqa: E501

        If the field is a custom field, the configuration of the field.  # noqa: E501

        :return: The configuration of this JsonTypeBean.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._configuration

    @configuration.setter
    def configuration(self, configuration):
        """Sets the configuration of this JsonTypeBean.

        If the field is a custom field, the configuration of the field.  # noqa: E501

        :param configuration: The configuration of this JsonTypeBean.  # noqa: E501
        :type: dict(str, object)
        """

        self._configuration = configuration

    @property
    def custom(self):
        """Gets the custom of this JsonTypeBean.  # noqa: E501

        If the field is a custom field, the URI of the field.  # noqa: E501

        :return: The custom of this JsonTypeBean.  # noqa: E501
        :rtype: str
        """
        return self._custom

    @custom.setter
    def custom(self, custom):
        """Sets the custom of this JsonTypeBean.

        If the field is a custom field, the URI of the field.  # noqa: E501

        :param custom: The custom of this JsonTypeBean.  # noqa: E501
        :type: str
        """

        self._custom = custom

    @property
    def custom_id(self):
        """Gets the custom_id of this JsonTypeBean.  # noqa: E501

        If the field is a custom field, the custom ID of the field.  # noqa: E501

        :return: The custom_id of this JsonTypeBean.  # noqa: E501
        :rtype: int
        """
        return self._custom_id

    @custom_id.setter
    def custom_id(self, custom_id):
        """Sets the custom_id of this JsonTypeBean.

        If the field is a custom field, the custom ID of the field.  # noqa: E501

        :param custom_id: The custom_id of this JsonTypeBean.  # noqa: E501
        :type: int
        """

        self._custom_id = custom_id

    @property
    def items(self):
        """Gets the items of this JsonTypeBean.  # noqa: E501

        When the data type is an array, the name of the field items within the array.  # noqa: E501

        :return: The items of this JsonTypeBean.  # noqa: E501
        :rtype: str
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this JsonTypeBean.

        When the data type is an array, the name of the field items within the array.  # noqa: E501

        :param items: The items of this JsonTypeBean.  # noqa: E501
        :type: str
        """

        self._items = items

    @property
    def system(self):
        """Gets the system of this JsonTypeBean.  # noqa: E501

        If the field is a system field, the name of the field.  # noqa: E501

        :return: The system of this JsonTypeBean.  # noqa: E501
        :rtype: str
        """
        return self._system

    @system.setter
    def system(self, system):
        """Sets the system of this JsonTypeBean.

        If the field is a system field, the name of the field.  # noqa: E501

        :param system: The system of this JsonTypeBean.  # noqa: E501
        :type: str
        """

        self._system = system

    @property
    def type(self):
        """Gets the type of this JsonTypeBean.  # noqa: E501

        The data type of the field.  # noqa: E501

        :return: The type of this JsonTypeBean.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this JsonTypeBean.

        The data type of the field.  # noqa: E501

        :param type: The type of this JsonTypeBean.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JsonTypeBean, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JsonTypeBean):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
