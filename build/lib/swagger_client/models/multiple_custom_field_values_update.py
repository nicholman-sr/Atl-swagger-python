# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MultipleCustomFieldValuesUpdate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'custom_field': 'str',
        'issue_ids': 'list[int]',
        'value': 'object'
    }

    attribute_map = {
        'custom_field': 'customField',
        'issue_ids': 'issueIds',
        'value': 'value'
    }

    def __init__(self, custom_field=None, issue_ids=None, value=None):  # noqa: E501
        """MultipleCustomFieldValuesUpdate - a model defined in Swagger"""  # noqa: E501
        self._custom_field = None
        self._issue_ids = None
        self._value = None
        self.discriminator = None
        self.custom_field = custom_field
        self.issue_ids = issue_ids
        self.value = value

    @property
    def custom_field(self):
        """Gets the custom_field of this MultipleCustomFieldValuesUpdate.  # noqa: E501

        The ID or key of the custom field. For example, `customfield_10010`.  # noqa: E501

        :return: The custom_field of this MultipleCustomFieldValuesUpdate.  # noqa: E501
        :rtype: str
        """
        return self._custom_field

    @custom_field.setter
    def custom_field(self, custom_field):
        """Sets the custom_field of this MultipleCustomFieldValuesUpdate.

        The ID or key of the custom field. For example, `customfield_10010`.  # noqa: E501

        :param custom_field: The custom_field of this MultipleCustomFieldValuesUpdate.  # noqa: E501
        :type: str
        """
        if custom_field is None:
            raise ValueError("Invalid value for `custom_field`, must not be `None`")  # noqa: E501

        self._custom_field = custom_field

    @property
    def issue_ids(self):
        """Gets the issue_ids of this MultipleCustomFieldValuesUpdate.  # noqa: E501

        The list of issue IDs.  # noqa: E501

        :return: The issue_ids of this MultipleCustomFieldValuesUpdate.  # noqa: E501
        :rtype: list[int]
        """
        return self._issue_ids

    @issue_ids.setter
    def issue_ids(self, issue_ids):
        """Sets the issue_ids of this MultipleCustomFieldValuesUpdate.

        The list of issue IDs.  # noqa: E501

        :param issue_ids: The issue_ids of this MultipleCustomFieldValuesUpdate.  # noqa: E501
        :type: list[int]
        """
        if issue_ids is None:
            raise ValueError("Invalid value for `issue_ids`, must not be `None`")  # noqa: E501

        self._issue_ids = issue_ids

    @property
    def value(self):
        """Gets the value of this MultipleCustomFieldValuesUpdate.  # noqa: E501

        The value for the custom field. The value must be compatible with the [custom field type](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field/#data-types) as follows:   *  `string` the value must be a string.  *  `number` the value must be a number.  *  `datetime` the value must be a string that represents a date in the ISO format or the simplified extended ISO format. For example, `\"2023-01-18T12:00:00-03:00\"` or `\"2023-01-18T12:00:00.000Z\"`. However, the milliseconds part is ignored.  *  `user` the value must be an object that contains the `accountId` field.  *  `group` the value must be an object that contains the group `name` or `groupId` field. Because group names can change, we recommend using `groupId`.  A list of appropriate values must be provided if the field is of the `list` [collection type](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field/#collection-types).  # noqa: E501

        :return: The value of this MultipleCustomFieldValuesUpdate.  # noqa: E501
        :rtype: object
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this MultipleCustomFieldValuesUpdate.

        The value for the custom field. The value must be compatible with the [custom field type](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field/#data-types) as follows:   *  `string` the value must be a string.  *  `number` the value must be a number.  *  `datetime` the value must be a string that represents a date in the ISO format or the simplified extended ISO format. For example, `\"2023-01-18T12:00:00-03:00\"` or `\"2023-01-18T12:00:00.000Z\"`. However, the milliseconds part is ignored.  *  `user` the value must be an object that contains the `accountId` field.  *  `group` the value must be an object that contains the group `name` or `groupId` field. Because group names can change, we recommend using `groupId`.  A list of appropriate values must be provided if the field is of the `list` [collection type](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field/#collection-types).  # noqa: E501

        :param value: The value of this MultipleCustomFieldValuesUpdate.  # noqa: E501
        :type: object
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MultipleCustomFieldValuesUpdate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MultipleCustomFieldValuesUpdate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
