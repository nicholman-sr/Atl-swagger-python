# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NotificationSchemePayload(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'name': 'str',
        'notification_scheme_events': 'list[NotificationSchemeEventPayload]',
        'on_conflict': 'str',
        'pcri': 'ProjectCreateResourceIdentifier'
    }

    attribute_map = {
        'description': 'description',
        'name': 'name',
        'notification_scheme_events': 'notificationSchemeEvents',
        'on_conflict': 'onConflict',
        'pcri': 'pcri'
    }

    def __init__(self, description=None, name=None, notification_scheme_events=None, on_conflict=None, pcri=None):  # noqa: E501
        """NotificationSchemePayload - a model defined in Swagger"""  # noqa: E501
        self._description = None
        self._name = None
        self._notification_scheme_events = None
        self._on_conflict = None
        self._pcri = None
        self.discriminator = None
        if description is not None:
            self.description = description
        if name is not None:
            self.name = name
        if notification_scheme_events is not None:
            self.notification_scheme_events = notification_scheme_events
        if on_conflict is not None:
            self.on_conflict = on_conflict
        if pcri is not None:
            self.pcri = pcri

    @property
    def description(self):
        """Gets the description of this NotificationSchemePayload.  # noqa: E501

        The description of the notification scheme  # noqa: E501

        :return: The description of this NotificationSchemePayload.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this NotificationSchemePayload.

        The description of the notification scheme  # noqa: E501

        :param description: The description of this NotificationSchemePayload.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def name(self):
        """Gets the name of this NotificationSchemePayload.  # noqa: E501

        The name of the notification scheme  # noqa: E501

        :return: The name of this NotificationSchemePayload.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NotificationSchemePayload.

        The name of the notification scheme  # noqa: E501

        :param name: The name of this NotificationSchemePayload.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def notification_scheme_events(self):
        """Gets the notification_scheme_events of this NotificationSchemePayload.  # noqa: E501

        The events and notifications for the notification scheme  # noqa: E501

        :return: The notification_scheme_events of this NotificationSchemePayload.  # noqa: E501
        :rtype: list[NotificationSchemeEventPayload]
        """
        return self._notification_scheme_events

    @notification_scheme_events.setter
    def notification_scheme_events(self, notification_scheme_events):
        """Sets the notification_scheme_events of this NotificationSchemePayload.

        The events and notifications for the notification scheme  # noqa: E501

        :param notification_scheme_events: The notification_scheme_events of this NotificationSchemePayload.  # noqa: E501
        :type: list[NotificationSchemeEventPayload]
        """

        self._notification_scheme_events = notification_scheme_events

    @property
    def on_conflict(self):
        """Gets the on_conflict of this NotificationSchemePayload.  # noqa: E501

        The strategy to use when there is a conflict with an existing entity  # noqa: E501

        :return: The on_conflict of this NotificationSchemePayload.  # noqa: E501
        :rtype: str
        """
        return self._on_conflict

    @on_conflict.setter
    def on_conflict(self, on_conflict):
        """Sets the on_conflict of this NotificationSchemePayload.

        The strategy to use when there is a conflict with an existing entity  # noqa: E501

        :param on_conflict: The on_conflict of this NotificationSchemePayload.  # noqa: E501
        :type: str
        """
        allowed_values = ["FAIL", "USE", "NEW"]  # noqa: E501
        if on_conflict not in allowed_values:
            raise ValueError(
                "Invalid value for `on_conflict` ({0}), must be one of {1}"  # noqa: E501
                .format(on_conflict, allowed_values)
            )

        self._on_conflict = on_conflict

    @property
    def pcri(self):
        """Gets the pcri of this NotificationSchemePayload.  # noqa: E501


        :return: The pcri of this NotificationSchemePayload.  # noqa: E501
        :rtype: ProjectCreateResourceIdentifier
        """
        return self._pcri

    @pcri.setter
    def pcri(self, pcri):
        """Sets the pcri of this NotificationSchemePayload.


        :param pcri: The pcri of this NotificationSchemePayload.  # noqa: E501
        :type: ProjectCreateResourceIdentifier
        """

        self._pcri = pcri

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NotificationSchemePayload, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NotificationSchemePayload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
