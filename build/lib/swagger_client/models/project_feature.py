# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProjectFeature(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'feature': 'str',
        'image_uri': 'str',
        'localised_description': 'str',
        'localised_name': 'str',
        'prerequisites': 'list[str]',
        'project_id': 'int',
        'state': 'str',
        'toggle_locked': 'bool'
    }

    attribute_map = {
        'feature': 'feature',
        'image_uri': 'imageUri',
        'localised_description': 'localisedDescription',
        'localised_name': 'localisedName',
        'prerequisites': 'prerequisites',
        'project_id': 'projectId',
        'state': 'state',
        'toggle_locked': 'toggleLocked'
    }

    def __init__(self, feature=None, image_uri=None, localised_description=None, localised_name=None, prerequisites=None, project_id=None, state=None, toggle_locked=None):  # noqa: E501
        """ProjectFeature - a model defined in Swagger"""  # noqa: E501
        self._feature = None
        self._image_uri = None
        self._localised_description = None
        self._localised_name = None
        self._prerequisites = None
        self._project_id = None
        self._state = None
        self._toggle_locked = None
        self.discriminator = None
        if feature is not None:
            self.feature = feature
        if image_uri is not None:
            self.image_uri = image_uri
        if localised_description is not None:
            self.localised_description = localised_description
        if localised_name is not None:
            self.localised_name = localised_name
        if prerequisites is not None:
            self.prerequisites = prerequisites
        if project_id is not None:
            self.project_id = project_id
        if state is not None:
            self.state = state
        if toggle_locked is not None:
            self.toggle_locked = toggle_locked

    @property
    def feature(self):
        """Gets the feature of this ProjectFeature.  # noqa: E501

        The key of the feature.  # noqa: E501

        :return: The feature of this ProjectFeature.  # noqa: E501
        :rtype: str
        """
        return self._feature

    @feature.setter
    def feature(self, feature):
        """Sets the feature of this ProjectFeature.

        The key of the feature.  # noqa: E501

        :param feature: The feature of this ProjectFeature.  # noqa: E501
        :type: str
        """

        self._feature = feature

    @property
    def image_uri(self):
        """Gets the image_uri of this ProjectFeature.  # noqa: E501

        URI for the image representing the feature.  # noqa: E501

        :return: The image_uri of this ProjectFeature.  # noqa: E501
        :rtype: str
        """
        return self._image_uri

    @image_uri.setter
    def image_uri(self, image_uri):
        """Sets the image_uri of this ProjectFeature.

        URI for the image representing the feature.  # noqa: E501

        :param image_uri: The image_uri of this ProjectFeature.  # noqa: E501
        :type: str
        """

        self._image_uri = image_uri

    @property
    def localised_description(self):
        """Gets the localised_description of this ProjectFeature.  # noqa: E501

        Localized display description for the feature.  # noqa: E501

        :return: The localised_description of this ProjectFeature.  # noqa: E501
        :rtype: str
        """
        return self._localised_description

    @localised_description.setter
    def localised_description(self, localised_description):
        """Sets the localised_description of this ProjectFeature.

        Localized display description for the feature.  # noqa: E501

        :param localised_description: The localised_description of this ProjectFeature.  # noqa: E501
        :type: str
        """

        self._localised_description = localised_description

    @property
    def localised_name(self):
        """Gets the localised_name of this ProjectFeature.  # noqa: E501

        Localized display name for the feature.  # noqa: E501

        :return: The localised_name of this ProjectFeature.  # noqa: E501
        :rtype: str
        """
        return self._localised_name

    @localised_name.setter
    def localised_name(self, localised_name):
        """Sets the localised_name of this ProjectFeature.

        Localized display name for the feature.  # noqa: E501

        :param localised_name: The localised_name of this ProjectFeature.  # noqa: E501
        :type: str
        """

        self._localised_name = localised_name

    @property
    def prerequisites(self):
        """Gets the prerequisites of this ProjectFeature.  # noqa: E501

        List of keys of the features required to enable the feature.  # noqa: E501

        :return: The prerequisites of this ProjectFeature.  # noqa: E501
        :rtype: list[str]
        """
        return self._prerequisites

    @prerequisites.setter
    def prerequisites(self, prerequisites):
        """Sets the prerequisites of this ProjectFeature.

        List of keys of the features required to enable the feature.  # noqa: E501

        :param prerequisites: The prerequisites of this ProjectFeature.  # noqa: E501
        :type: list[str]
        """

        self._prerequisites = prerequisites

    @property
    def project_id(self):
        """Gets the project_id of this ProjectFeature.  # noqa: E501

        The ID of the project.  # noqa: E501

        :return: The project_id of this ProjectFeature.  # noqa: E501
        :rtype: int
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this ProjectFeature.

        The ID of the project.  # noqa: E501

        :param project_id: The project_id of this ProjectFeature.  # noqa: E501
        :type: int
        """

        self._project_id = project_id

    @property
    def state(self):
        """Gets the state of this ProjectFeature.  # noqa: E501

        The state of the feature. When updating the state of a feature, only ENABLED and DISABLED are supported. Responses can contain all values  # noqa: E501

        :return: The state of this ProjectFeature.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ProjectFeature.

        The state of the feature. When updating the state of a feature, only ENABLED and DISABLED are supported. Responses can contain all values  # noqa: E501

        :param state: The state of this ProjectFeature.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLED", "DISABLED", "COMING_SOON"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def toggle_locked(self):
        """Gets the toggle_locked of this ProjectFeature.  # noqa: E501

        Whether the state of the feature can be updated.  # noqa: E501

        :return: The toggle_locked of this ProjectFeature.  # noqa: E501
        :rtype: bool
        """
        return self._toggle_locked

    @toggle_locked.setter
    def toggle_locked(self, toggle_locked):
        """Sets the toggle_locked of this ProjectFeature.

        Whether the state of the feature can be updated.  # noqa: E501

        :param toggle_locked: The toggle_locked of this ProjectFeature.  # noqa: E501
        :type: bool
        """

        self._toggle_locked = toggle_locked

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProjectFeature, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProjectFeature):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
