# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProjectIssueTypesHierarchyLevel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'entity_id': 'str',
        'issue_types': 'list[IssueTypeInfo]',
        'level': 'int',
        'name': 'str'
    }

    attribute_map = {
        'entity_id': 'entityId',
        'issue_types': 'issueTypes',
        'level': 'level',
        'name': 'name'
    }

    def __init__(self, entity_id=None, issue_types=None, level=None, name=None):  # noqa: E501
        """ProjectIssueTypesHierarchyLevel - a model defined in Swagger"""  # noqa: E501
        self._entity_id = None
        self._issue_types = None
        self._level = None
        self._name = None
        self.discriminator = None
        if entity_id is not None:
            self.entity_id = entity_id
        if issue_types is not None:
            self.issue_types = issue_types
        if level is not None:
            self.level = level
        if name is not None:
            self.name = name

    @property
    def entity_id(self):
        """Gets the entity_id of this ProjectIssueTypesHierarchyLevel.  # noqa: E501

        The ID of the issue type hierarchy level. This property is deprecated, see [Change notice: Removing hierarchy level IDs from next-gen APIs](https://developer.atlassian.com/cloud/jira/platform/change-notice-removing-hierarchy-level-ids-from-next-gen-apis/).  # noqa: E501

        :return: The entity_id of this ProjectIssueTypesHierarchyLevel.  # noqa: E501
        :rtype: str
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this ProjectIssueTypesHierarchyLevel.

        The ID of the issue type hierarchy level. This property is deprecated, see [Change notice: Removing hierarchy level IDs from next-gen APIs](https://developer.atlassian.com/cloud/jira/platform/change-notice-removing-hierarchy-level-ids-from-next-gen-apis/).  # noqa: E501

        :param entity_id: The entity_id of this ProjectIssueTypesHierarchyLevel.  # noqa: E501
        :type: str
        """

        self._entity_id = entity_id

    @property
    def issue_types(self):
        """Gets the issue_types of this ProjectIssueTypesHierarchyLevel.  # noqa: E501

        The list of issue types in the hierarchy level.  # noqa: E501

        :return: The issue_types of this ProjectIssueTypesHierarchyLevel.  # noqa: E501
        :rtype: list[IssueTypeInfo]
        """
        return self._issue_types

    @issue_types.setter
    def issue_types(self, issue_types):
        """Sets the issue_types of this ProjectIssueTypesHierarchyLevel.

        The list of issue types in the hierarchy level.  # noqa: E501

        :param issue_types: The issue_types of this ProjectIssueTypesHierarchyLevel.  # noqa: E501
        :type: list[IssueTypeInfo]
        """

        self._issue_types = issue_types

    @property
    def level(self):
        """Gets the level of this ProjectIssueTypesHierarchyLevel.  # noqa: E501

        The level of the issue type hierarchy level.  # noqa: E501

        :return: The level of this ProjectIssueTypesHierarchyLevel.  # noqa: E501
        :rtype: int
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this ProjectIssueTypesHierarchyLevel.

        The level of the issue type hierarchy level.  # noqa: E501

        :param level: The level of this ProjectIssueTypesHierarchyLevel.  # noqa: E501
        :type: int
        """

        self._level = level

    @property
    def name(self):
        """Gets the name of this ProjectIssueTypesHierarchyLevel.  # noqa: E501

        The name of the issue type hierarchy level.  # noqa: E501

        :return: The name of this ProjectIssueTypesHierarchyLevel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProjectIssueTypesHierarchyLevel.

        The name of the issue type hierarchy level.  # noqa: E501

        :param name: The name of this ProjectIssueTypesHierarchyLevel.  # noqa: E501
        :type: str
        """

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProjectIssueTypesHierarchyLevel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProjectIssueTypesHierarchyLevel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
