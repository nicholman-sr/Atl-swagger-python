# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RemoteIssueLink(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'application': 'AllOfRemoteIssueLinkApplication',
        'global_id': 'str',
        'id': 'int',
        'object': 'AllOfRemoteIssueLinkObject',
        'relationship': 'str',
        '_self': 'str'
    }

    attribute_map = {
        'application': 'application',
        'global_id': 'globalId',
        'id': 'id',
        'object': 'object',
        'relationship': 'relationship',
        '_self': 'self'
    }

    def __init__(self, application=None, global_id=None, id=None, object=None, relationship=None, _self=None):  # noqa: E501
        """RemoteIssueLink - a model defined in Swagger"""  # noqa: E501
        self._application = None
        self._global_id = None
        self._id = None
        self._object = None
        self._relationship = None
        self.__self = None
        self.discriminator = None
        if application is not None:
            self.application = application
        if global_id is not None:
            self.global_id = global_id
        if id is not None:
            self.id = id
        if object is not None:
            self.object = object
        if relationship is not None:
            self.relationship = relationship
        if _self is not None:
            self._self = _self

    @property
    def application(self):
        """Gets the application of this RemoteIssueLink.  # noqa: E501

        Details of the remote application the linked item is in.  # noqa: E501

        :return: The application of this RemoteIssueLink.  # noqa: E501
        :rtype: AllOfRemoteIssueLinkApplication
        """
        return self._application

    @application.setter
    def application(self, application):
        """Sets the application of this RemoteIssueLink.

        Details of the remote application the linked item is in.  # noqa: E501

        :param application: The application of this RemoteIssueLink.  # noqa: E501
        :type: AllOfRemoteIssueLinkApplication
        """

        self._application = application

    @property
    def global_id(self):
        """Gets the global_id of this RemoteIssueLink.  # noqa: E501

        The global ID of the link, such as the ID of the item on the remote system.  # noqa: E501

        :return: The global_id of this RemoteIssueLink.  # noqa: E501
        :rtype: str
        """
        return self._global_id

    @global_id.setter
    def global_id(self, global_id):
        """Sets the global_id of this RemoteIssueLink.

        The global ID of the link, such as the ID of the item on the remote system.  # noqa: E501

        :param global_id: The global_id of this RemoteIssueLink.  # noqa: E501
        :type: str
        """

        self._global_id = global_id

    @property
    def id(self):
        """Gets the id of this RemoteIssueLink.  # noqa: E501

        The ID of the link.  # noqa: E501

        :return: The id of this RemoteIssueLink.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RemoteIssueLink.

        The ID of the link.  # noqa: E501

        :param id: The id of this RemoteIssueLink.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def object(self):
        """Gets the object of this RemoteIssueLink.  # noqa: E501

        Details of the item linked to.  # noqa: E501

        :return: The object of this RemoteIssueLink.  # noqa: E501
        :rtype: AllOfRemoteIssueLinkObject
        """
        return self._object

    @object.setter
    def object(self, object):
        """Sets the object of this RemoteIssueLink.

        Details of the item linked to.  # noqa: E501

        :param object: The object of this RemoteIssueLink.  # noqa: E501
        :type: AllOfRemoteIssueLinkObject
        """

        self._object = object

    @property
    def relationship(self):
        """Gets the relationship of this RemoteIssueLink.  # noqa: E501

        Description of the relationship between the issue and the linked item.  # noqa: E501

        :return: The relationship of this RemoteIssueLink.  # noqa: E501
        :rtype: str
        """
        return self._relationship

    @relationship.setter
    def relationship(self, relationship):
        """Sets the relationship of this RemoteIssueLink.

        Description of the relationship between the issue and the linked item.  # noqa: E501

        :param relationship: The relationship of this RemoteIssueLink.  # noqa: E501
        :type: str
        """

        self._relationship = relationship

    @property
    def _self(self):
        """Gets the _self of this RemoteIssueLink.  # noqa: E501

        The URL of the link.  # noqa: E501

        :return: The _self of this RemoteIssueLink.  # noqa: E501
        :rtype: str
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this RemoteIssueLink.

        The URL of the link.  # noqa: E501

        :param _self: The _self of this RemoteIssueLink.  # noqa: E501
        :type: str
        """

        self.__self = _self

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RemoteIssueLink, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RemoteIssueLink):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
