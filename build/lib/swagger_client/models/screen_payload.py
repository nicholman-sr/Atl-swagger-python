# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ScreenPayload(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'name': 'str',
        'pcri': 'ProjectCreateResourceIdentifier',
        'tabs': 'list[TabPayload]'
    }

    attribute_map = {
        'description': 'description',
        'name': 'name',
        'pcri': 'pcri',
        'tabs': 'tabs'
    }

    def __init__(self, description=None, name=None, pcri=None, tabs=None):  # noqa: E501
        """ScreenPayload - a model defined in Swagger"""  # noqa: E501
        self._description = None
        self._name = None
        self._pcri = None
        self._tabs = None
        self.discriminator = None
        if description is not None:
            self.description = description
        if name is not None:
            self.name = name
        if pcri is not None:
            self.pcri = pcri
        if tabs is not None:
            self.tabs = tabs

    @property
    def description(self):
        """Gets the description of this ScreenPayload.  # noqa: E501

        The description of the screen  # noqa: E501

        :return: The description of this ScreenPayload.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ScreenPayload.

        The description of the screen  # noqa: E501

        :param description: The description of this ScreenPayload.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def name(self):
        """Gets the name of this ScreenPayload.  # noqa: E501

        The name of the screen  # noqa: E501

        :return: The name of this ScreenPayload.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ScreenPayload.

        The name of the screen  # noqa: E501

        :param name: The name of this ScreenPayload.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def pcri(self):
        """Gets the pcri of this ScreenPayload.  # noqa: E501


        :return: The pcri of this ScreenPayload.  # noqa: E501
        :rtype: ProjectCreateResourceIdentifier
        """
        return self._pcri

    @pcri.setter
    def pcri(self, pcri):
        """Sets the pcri of this ScreenPayload.


        :param pcri: The pcri of this ScreenPayload.  # noqa: E501
        :type: ProjectCreateResourceIdentifier
        """

        self._pcri = pcri

    @property
    def tabs(self):
        """Gets the tabs of this ScreenPayload.  # noqa: E501

        The tabs of the screen. See https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-screen-tab-fields/\\#api-rest-api-3-screens-screenid-tabs-tabid-fields-post  # noqa: E501

        :return: The tabs of this ScreenPayload.  # noqa: E501
        :rtype: list[TabPayload]
        """
        return self._tabs

    @tabs.setter
    def tabs(self, tabs):
        """Sets the tabs of this ScreenPayload.

        The tabs of the screen. See https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-screen-tab-fields/\\#api-rest-api-3-screens-screenid-tabs-tabid-fields-post  # noqa: E501

        :param tabs: The tabs of this ScreenPayload.  # noqa: E501
        :type: list[TabPayload]
        """

        self._tabs = tabs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ScreenPayload, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScreenPayload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
