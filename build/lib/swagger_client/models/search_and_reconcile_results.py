# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SearchAndReconcileResults(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'is_last': 'bool',
        'issues': 'list[IssueBean]',
        'names': 'dict(str, str)',
        'next_page_token': 'str',
        'schema': 'dict(str, JsonTypeBean)'
    }

    attribute_map = {
        'is_last': 'isLast',
        'issues': 'issues',
        'names': 'names',
        'next_page_token': 'nextPageToken',
        'schema': 'schema'
    }

    def __init__(self, is_last=None, issues=None, names=None, next_page_token=None, schema=None):  # noqa: E501
        """SearchAndReconcileResults - a model defined in Swagger"""  # noqa: E501
        self._is_last = None
        self._issues = None
        self._names = None
        self._next_page_token = None
        self._schema = None
        self.discriminator = None
        if is_last is not None:
            self.is_last = is_last
        if issues is not None:
            self.issues = issues
        if names is not None:
            self.names = names
        if next_page_token is not None:
            self.next_page_token = next_page_token
        if schema is not None:
            self.schema = schema

    @property
    def is_last(self):
        """Gets the is_last of this SearchAndReconcileResults.  # noqa: E501

        Indicates whether this is the last page of the paginated response.  # noqa: E501

        :return: The is_last of this SearchAndReconcileResults.  # noqa: E501
        :rtype: bool
        """
        return self._is_last

    @is_last.setter
    def is_last(self, is_last):
        """Sets the is_last of this SearchAndReconcileResults.

        Indicates whether this is the last page of the paginated response.  # noqa: E501

        :param is_last: The is_last of this SearchAndReconcileResults.  # noqa: E501
        :type: bool
        """

        self._is_last = is_last

    @property
    def issues(self):
        """Gets the issues of this SearchAndReconcileResults.  # noqa: E501

        The list of issues found by the search or reconsiliation.  # noqa: E501

        :return: The issues of this SearchAndReconcileResults.  # noqa: E501
        :rtype: list[IssueBean]
        """
        return self._issues

    @issues.setter
    def issues(self, issues):
        """Sets the issues of this SearchAndReconcileResults.

        The list of issues found by the search or reconsiliation.  # noqa: E501

        :param issues: The issues of this SearchAndReconcileResults.  # noqa: E501
        :type: list[IssueBean]
        """

        self._issues = issues

    @property
    def names(self):
        """Gets the names of this SearchAndReconcileResults.  # noqa: E501

        The ID and name of each field in the search results.  # noqa: E501

        :return: The names of this SearchAndReconcileResults.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._names

    @names.setter
    def names(self, names):
        """Sets the names of this SearchAndReconcileResults.

        The ID and name of each field in the search results.  # noqa: E501

        :param names: The names of this SearchAndReconcileResults.  # noqa: E501
        :type: dict(str, str)
        """

        self._names = names

    @property
    def next_page_token(self):
        """Gets the next_page_token of this SearchAndReconcileResults.  # noqa: E501

        Continuation token to fetch the next page. If this result represents the last or the only page this token will be null. This token will expire in 7 days.  # noqa: E501

        :return: The next_page_token of this SearchAndReconcileResults.  # noqa: E501
        :rtype: str
        """
        return self._next_page_token

    @next_page_token.setter
    def next_page_token(self, next_page_token):
        """Sets the next_page_token of this SearchAndReconcileResults.

        Continuation token to fetch the next page. If this result represents the last or the only page this token will be null. This token will expire in 7 days.  # noqa: E501

        :param next_page_token: The next_page_token of this SearchAndReconcileResults.  # noqa: E501
        :type: str
        """

        self._next_page_token = next_page_token

    @property
    def schema(self):
        """Gets the schema of this SearchAndReconcileResults.  # noqa: E501

        The schema describing the field types in the search results.  # noqa: E501

        :return: The schema of this SearchAndReconcileResults.  # noqa: E501
        :rtype: dict(str, JsonTypeBean)
        """
        return self._schema

    @schema.setter
    def schema(self, schema):
        """Sets the schema of this SearchAndReconcileResults.

        The schema describing the field types in the search results.  # noqa: E501

        :param schema: The schema of this SearchAndReconcileResults.  # noqa: E501
        :type: dict(str, JsonTypeBean)
        """

        self._schema = schema

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SearchAndReconcileResults, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SearchAndReconcileResults):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
