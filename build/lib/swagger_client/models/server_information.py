# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ServerInformation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'base_url': 'str',
        'build_date': 'datetime',
        'build_number': 'int',
        'deployment_type': 'str',
        'display_url': 'str',
        'display_url_confluence': 'str',
        'display_url_servicedesk_help_center': 'str',
        'health_checks': 'list[HealthCheckResult]',
        'scm_info': 'str',
        'server_time': 'datetime',
        'server_time_zone': 'str',
        'server_title': 'str',
        'version': 'str',
        'version_numbers': 'list[int]'
    }

    attribute_map = {
        'base_url': 'baseUrl',
        'build_date': 'buildDate',
        'build_number': 'buildNumber',
        'deployment_type': 'deploymentType',
        'display_url': 'displayUrl',
        'display_url_confluence': 'displayUrlConfluence',
        'display_url_servicedesk_help_center': 'displayUrlServicedeskHelpCenter',
        'health_checks': 'healthChecks',
        'scm_info': 'scmInfo',
        'server_time': 'serverTime',
        'server_time_zone': 'serverTimeZone',
        'server_title': 'serverTitle',
        'version': 'version',
        'version_numbers': 'versionNumbers'
    }

    def __init__(self, base_url=None, build_date=None, build_number=None, deployment_type=None, display_url=None, display_url_confluence=None, display_url_servicedesk_help_center=None, health_checks=None, scm_info=None, server_time=None, server_time_zone=None, server_title=None, version=None, version_numbers=None):  # noqa: E501
        """ServerInformation - a model defined in Swagger"""  # noqa: E501
        self._base_url = None
        self._build_date = None
        self._build_number = None
        self._deployment_type = None
        self._display_url = None
        self._display_url_confluence = None
        self._display_url_servicedesk_help_center = None
        self._health_checks = None
        self._scm_info = None
        self._server_time = None
        self._server_time_zone = None
        self._server_title = None
        self._version = None
        self._version_numbers = None
        self.discriminator = None
        if base_url is not None:
            self.base_url = base_url
        if build_date is not None:
            self.build_date = build_date
        if build_number is not None:
            self.build_number = build_number
        if deployment_type is not None:
            self.deployment_type = deployment_type
        if display_url is not None:
            self.display_url = display_url
        if display_url_confluence is not None:
            self.display_url_confluence = display_url_confluence
        if display_url_servicedesk_help_center is not None:
            self.display_url_servicedesk_help_center = display_url_servicedesk_help_center
        if health_checks is not None:
            self.health_checks = health_checks
        if scm_info is not None:
            self.scm_info = scm_info
        if server_time is not None:
            self.server_time = server_time
        if server_time_zone is not None:
            self.server_time_zone = server_time_zone
        if server_title is not None:
            self.server_title = server_title
        if version is not None:
            self.version = version
        if version_numbers is not None:
            self.version_numbers = version_numbers

    @property
    def base_url(self):
        """Gets the base_url of this ServerInformation.  # noqa: E501

        The base URL of the Jira instance.  # noqa: E501

        :return: The base_url of this ServerInformation.  # noqa: E501
        :rtype: str
        """
        return self._base_url

    @base_url.setter
    def base_url(self, base_url):
        """Sets the base_url of this ServerInformation.

        The base URL of the Jira instance.  # noqa: E501

        :param base_url: The base_url of this ServerInformation.  # noqa: E501
        :type: str
        """

        self._base_url = base_url

    @property
    def build_date(self):
        """Gets the build_date of this ServerInformation.  # noqa: E501

        The timestamp when the Jira version was built.  # noqa: E501

        :return: The build_date of this ServerInformation.  # noqa: E501
        :rtype: datetime
        """
        return self._build_date

    @build_date.setter
    def build_date(self, build_date):
        """Sets the build_date of this ServerInformation.

        The timestamp when the Jira version was built.  # noqa: E501

        :param build_date: The build_date of this ServerInformation.  # noqa: E501
        :type: datetime
        """

        self._build_date = build_date

    @property
    def build_number(self):
        """Gets the build_number of this ServerInformation.  # noqa: E501

        The build number of the Jira version.  # noqa: E501

        :return: The build_number of this ServerInformation.  # noqa: E501
        :rtype: int
        """
        return self._build_number

    @build_number.setter
    def build_number(self, build_number):
        """Sets the build_number of this ServerInformation.

        The build number of the Jira version.  # noqa: E501

        :param build_number: The build_number of this ServerInformation.  # noqa: E501
        :type: int
        """

        self._build_number = build_number

    @property
    def deployment_type(self):
        """Gets the deployment_type of this ServerInformation.  # noqa: E501

        The type of server deployment. This is always returned as *Cloud*.  # noqa: E501

        :return: The deployment_type of this ServerInformation.  # noqa: E501
        :rtype: str
        """
        return self._deployment_type

    @deployment_type.setter
    def deployment_type(self, deployment_type):
        """Sets the deployment_type of this ServerInformation.

        The type of server deployment. This is always returned as *Cloud*.  # noqa: E501

        :param deployment_type: The deployment_type of this ServerInformation.  # noqa: E501
        :type: str
        """

        self._deployment_type = deployment_type

    @property
    def display_url(self):
        """Gets the display_url of this ServerInformation.  # noqa: E501

        The display URL of the Jira instance.  # noqa: E501

        :return: The display_url of this ServerInformation.  # noqa: E501
        :rtype: str
        """
        return self._display_url

    @display_url.setter
    def display_url(self, display_url):
        """Sets the display_url of this ServerInformation.

        The display URL of the Jira instance.  # noqa: E501

        :param display_url: The display_url of this ServerInformation.  # noqa: E501
        :type: str
        """

        self._display_url = display_url

    @property
    def display_url_confluence(self):
        """Gets the display_url_confluence of this ServerInformation.  # noqa: E501

        The display URL of Confluence.  # noqa: E501

        :return: The display_url_confluence of this ServerInformation.  # noqa: E501
        :rtype: str
        """
        return self._display_url_confluence

    @display_url_confluence.setter
    def display_url_confluence(self, display_url_confluence):
        """Sets the display_url_confluence of this ServerInformation.

        The display URL of Confluence.  # noqa: E501

        :param display_url_confluence: The display_url_confluence of this ServerInformation.  # noqa: E501
        :type: str
        """

        self._display_url_confluence = display_url_confluence

    @property
    def display_url_servicedesk_help_center(self):
        """Gets the display_url_servicedesk_help_center of this ServerInformation.  # noqa: E501

        The display URL of the Servicedesk Help Center.  # noqa: E501

        :return: The display_url_servicedesk_help_center of this ServerInformation.  # noqa: E501
        :rtype: str
        """
        return self._display_url_servicedesk_help_center

    @display_url_servicedesk_help_center.setter
    def display_url_servicedesk_help_center(self, display_url_servicedesk_help_center):
        """Sets the display_url_servicedesk_help_center of this ServerInformation.

        The display URL of the Servicedesk Help Center.  # noqa: E501

        :param display_url_servicedesk_help_center: The display_url_servicedesk_help_center of this ServerInformation.  # noqa: E501
        :type: str
        """

        self._display_url_servicedesk_help_center = display_url_servicedesk_help_center

    @property
    def health_checks(self):
        """Gets the health_checks of this ServerInformation.  # noqa: E501

        Jira instance health check results. Deprecated and no longer returned.  # noqa: E501

        :return: The health_checks of this ServerInformation.  # noqa: E501
        :rtype: list[HealthCheckResult]
        """
        return self._health_checks

    @health_checks.setter
    def health_checks(self, health_checks):
        """Sets the health_checks of this ServerInformation.

        Jira instance health check results. Deprecated and no longer returned.  # noqa: E501

        :param health_checks: The health_checks of this ServerInformation.  # noqa: E501
        :type: list[HealthCheckResult]
        """

        self._health_checks = health_checks

    @property
    def scm_info(self):
        """Gets the scm_info of this ServerInformation.  # noqa: E501

        The unique identifier of the Jira version.  # noqa: E501

        :return: The scm_info of this ServerInformation.  # noqa: E501
        :rtype: str
        """
        return self._scm_info

    @scm_info.setter
    def scm_info(self, scm_info):
        """Sets the scm_info of this ServerInformation.

        The unique identifier of the Jira version.  # noqa: E501

        :param scm_info: The scm_info of this ServerInformation.  # noqa: E501
        :type: str
        """

        self._scm_info = scm_info

    @property
    def server_time(self):
        """Gets the server_time of this ServerInformation.  # noqa: E501

        The time in Jira when this request was responded to.  # noqa: E501

        :return: The server_time of this ServerInformation.  # noqa: E501
        :rtype: datetime
        """
        return self._server_time

    @server_time.setter
    def server_time(self, server_time):
        """Sets the server_time of this ServerInformation.

        The time in Jira when this request was responded to.  # noqa: E501

        :param server_time: The server_time of this ServerInformation.  # noqa: E501
        :type: datetime
        """

        self._server_time = server_time

    @property
    def server_time_zone(self):
        """Gets the server_time_zone of this ServerInformation.  # noqa: E501

        The default timezone of the Jira server. In a format known as Olson Time Zones, IANA Time Zones or TZ Database Time Zones.  # noqa: E501

        :return: The server_time_zone of this ServerInformation.  # noqa: E501
        :rtype: str
        """
        return self._server_time_zone

    @server_time_zone.setter
    def server_time_zone(self, server_time_zone):
        """Sets the server_time_zone of this ServerInformation.

        The default timezone of the Jira server. In a format known as Olson Time Zones, IANA Time Zones or TZ Database Time Zones.  # noqa: E501

        :param server_time_zone: The server_time_zone of this ServerInformation.  # noqa: E501
        :type: str
        """

        self._server_time_zone = server_time_zone

    @property
    def server_title(self):
        """Gets the server_title of this ServerInformation.  # noqa: E501

        The name of the Jira instance.  # noqa: E501

        :return: The server_title of this ServerInformation.  # noqa: E501
        :rtype: str
        """
        return self._server_title

    @server_title.setter
    def server_title(self, server_title):
        """Sets the server_title of this ServerInformation.

        The name of the Jira instance.  # noqa: E501

        :param server_title: The server_title of this ServerInformation.  # noqa: E501
        :type: str
        """

        self._server_title = server_title

    @property
    def version(self):
        """Gets the version of this ServerInformation.  # noqa: E501

        The version of Jira.  # noqa: E501

        :return: The version of this ServerInformation.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ServerInformation.

        The version of Jira.  # noqa: E501

        :param version: The version of this ServerInformation.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def version_numbers(self):
        """Gets the version_numbers of this ServerInformation.  # noqa: E501

        The major, minor, and revision version numbers of the Jira version.  # noqa: E501

        :return: The version_numbers of this ServerInformation.  # noqa: E501
        :rtype: list[int]
        """
        return self._version_numbers

    @version_numbers.setter
    def version_numbers(self, version_numbers):
        """Sets the version_numbers of this ServerInformation.

        The major, minor, and revision version numbers of the Jira version.  # noqa: E501

        :param version_numbers: The version_numbers of this ServerInformation.  # noqa: E501
        :type: list[int]
        """

        self._version_numbers = version_numbers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ServerInformation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServerInformation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
