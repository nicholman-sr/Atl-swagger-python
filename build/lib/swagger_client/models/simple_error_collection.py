# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SimpleErrorCollection(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'error_messages': 'list[str]',
        'errors': 'dict(str, str)',
        'http_status_code': 'int'
    }

    attribute_map = {
        'error_messages': 'errorMessages',
        'errors': 'errors',
        'http_status_code': 'httpStatusCode'
    }

    def __init__(self, error_messages=None, errors=None, http_status_code=None):  # noqa: E501
        """SimpleErrorCollection - a model defined in Swagger"""  # noqa: E501
        self._error_messages = None
        self._errors = None
        self._http_status_code = None
        self.discriminator = None
        if error_messages is not None:
            self.error_messages = error_messages
        if errors is not None:
            self.errors = errors
        if http_status_code is not None:
            self.http_status_code = http_status_code

    @property
    def error_messages(self):
        """Gets the error_messages of this SimpleErrorCollection.  # noqa: E501

        The list of error messages produced by this operation. For example, \"input parameter 'key' must be provided\"  # noqa: E501

        :return: The error_messages of this SimpleErrorCollection.  # noqa: E501
        :rtype: list[str]
        """
        return self._error_messages

    @error_messages.setter
    def error_messages(self, error_messages):
        """Sets the error_messages of this SimpleErrorCollection.

        The list of error messages produced by this operation. For example, \"input parameter 'key' must be provided\"  # noqa: E501

        :param error_messages: The error_messages of this SimpleErrorCollection.  # noqa: E501
        :type: list[str]
        """

        self._error_messages = error_messages

    @property
    def errors(self):
        """Gets the errors of this SimpleErrorCollection.  # noqa: E501

        The list of errors by parameter returned by the operation. For example,\"projectKey\": \"Project keys must start with an uppercase letter, followed by one or more uppercase alphanumeric characters.\"  # noqa: E501

        :return: The errors of this SimpleErrorCollection.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this SimpleErrorCollection.

        The list of errors by parameter returned by the operation. For example,\"projectKey\": \"Project keys must start with an uppercase letter, followed by one or more uppercase alphanumeric characters.\"  # noqa: E501

        :param errors: The errors of this SimpleErrorCollection.  # noqa: E501
        :type: dict(str, str)
        """

        self._errors = errors

    @property
    def http_status_code(self):
        """Gets the http_status_code of this SimpleErrorCollection.  # noqa: E501


        :return: The http_status_code of this SimpleErrorCollection.  # noqa: E501
        :rtype: int
        """
        return self._http_status_code

    @http_status_code.setter
    def http_status_code(self, http_status_code):
        """Sets the http_status_code of this SimpleErrorCollection.


        :param http_status_code: The http_status_code of this SimpleErrorCollection.  # noqa: E501
        :type: int
        """

        self._http_status_code = http_status_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SimpleErrorCollection, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SimpleErrorCollection):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
