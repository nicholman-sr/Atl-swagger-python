# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TimeTrackingConfiguration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'default_unit': 'str',
        'time_format': 'str',
        'working_days_per_week': 'float',
        'working_hours_per_day': 'float'
    }

    attribute_map = {
        'default_unit': 'defaultUnit',
        'time_format': 'timeFormat',
        'working_days_per_week': 'workingDaysPerWeek',
        'working_hours_per_day': 'workingHoursPerDay'
    }

    def __init__(self, default_unit=None, time_format=None, working_days_per_week=None, working_hours_per_day=None):  # noqa: E501
        """TimeTrackingConfiguration - a model defined in Swagger"""  # noqa: E501
        self._default_unit = None
        self._time_format = None
        self._working_days_per_week = None
        self._working_hours_per_day = None
        self.discriminator = None
        self.default_unit = default_unit
        self.time_format = time_format
        self.working_days_per_week = working_days_per_week
        self.working_hours_per_day = working_hours_per_day

    @property
    def default_unit(self):
        """Gets the default_unit of this TimeTrackingConfiguration.  # noqa: E501

        The default unit of time applied to logged time.  # noqa: E501

        :return: The default_unit of this TimeTrackingConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._default_unit

    @default_unit.setter
    def default_unit(self, default_unit):
        """Sets the default_unit of this TimeTrackingConfiguration.

        The default unit of time applied to logged time.  # noqa: E501

        :param default_unit: The default_unit of this TimeTrackingConfiguration.  # noqa: E501
        :type: str
        """
        if default_unit is None:
            raise ValueError("Invalid value for `default_unit`, must not be `None`")  # noqa: E501
        allowed_values = ["minute", "hour", "day", "week"]  # noqa: E501
        if default_unit not in allowed_values:
            raise ValueError(
                "Invalid value for `default_unit` ({0}), must be one of {1}"  # noqa: E501
                .format(default_unit, allowed_values)
            )

        self._default_unit = default_unit

    @property
    def time_format(self):
        """Gets the time_format of this TimeTrackingConfiguration.  # noqa: E501

        The format that will appear on an issue's *Time Spent* field.  # noqa: E501

        :return: The time_format of this TimeTrackingConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._time_format

    @time_format.setter
    def time_format(self, time_format):
        """Sets the time_format of this TimeTrackingConfiguration.

        The format that will appear on an issue's *Time Spent* field.  # noqa: E501

        :param time_format: The time_format of this TimeTrackingConfiguration.  # noqa: E501
        :type: str
        """
        if time_format is None:
            raise ValueError("Invalid value for `time_format`, must not be `None`")  # noqa: E501
        allowed_values = ["pretty", "days", "hours"]  # noqa: E501
        if time_format not in allowed_values:
            raise ValueError(
                "Invalid value for `time_format` ({0}), must be one of {1}"  # noqa: E501
                .format(time_format, allowed_values)
            )

        self._time_format = time_format

    @property
    def working_days_per_week(self):
        """Gets the working_days_per_week of this TimeTrackingConfiguration.  # noqa: E501

        The number of days in a working week.  # noqa: E501

        :return: The working_days_per_week of this TimeTrackingConfiguration.  # noqa: E501
        :rtype: float
        """
        return self._working_days_per_week

    @working_days_per_week.setter
    def working_days_per_week(self, working_days_per_week):
        """Sets the working_days_per_week of this TimeTrackingConfiguration.

        The number of days in a working week.  # noqa: E501

        :param working_days_per_week: The working_days_per_week of this TimeTrackingConfiguration.  # noqa: E501
        :type: float
        """
        if working_days_per_week is None:
            raise ValueError("Invalid value for `working_days_per_week`, must not be `None`")  # noqa: E501

        self._working_days_per_week = working_days_per_week

    @property
    def working_hours_per_day(self):
        """Gets the working_hours_per_day of this TimeTrackingConfiguration.  # noqa: E501

        The number of hours in a working day.  # noqa: E501

        :return: The working_hours_per_day of this TimeTrackingConfiguration.  # noqa: E501
        :rtype: float
        """
        return self._working_hours_per_day

    @working_hours_per_day.setter
    def working_hours_per_day(self, working_hours_per_day):
        """Sets the working_hours_per_day of this TimeTrackingConfiguration.

        The number of hours in a working day.  # noqa: E501

        :param working_hours_per_day: The working_hours_per_day of this TimeTrackingConfiguration.  # noqa: E501
        :type: float
        """
        if working_hours_per_day is None:
            raise ValueError("Invalid value for `working_hours_per_day`, must not be `None`")  # noqa: E501

        self._working_hours_per_day = working_hours_per_day

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TimeTrackingConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TimeTrackingConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
