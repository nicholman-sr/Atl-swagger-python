# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Transition(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        '_from': 'list[str]',
        'id': 'str',
        'name': 'str',
        'properties': 'dict(str, object)',
        'rules': 'WorkflowRules',
        'screen': 'TransitionScreenDetails',
        'to': 'str',
        'type': 'str'
    }

    attribute_map = {
        'description': 'description',
        '_from': 'from',
        'id': 'id',
        'name': 'name',
        'properties': 'properties',
        'rules': 'rules',
        'screen': 'screen',
        'to': 'to',
        'type': 'type'
    }

    def __init__(self, description=None, _from=None, id=None, name=None, properties=None, rules=None, screen=None, to=None, type=None):  # noqa: E501
        """Transition - a model defined in Swagger"""  # noqa: E501
        self._description = None
        self.__from = None
        self._id = None
        self._name = None
        self._properties = None
        self._rules = None
        self._screen = None
        self._to = None
        self._type = None
        self.discriminator = None
        self.description = description
        self._from = _from
        self.id = id
        self.name = name
        if properties is not None:
            self.properties = properties
        if rules is not None:
            self.rules = rules
        if screen is not None:
            self.screen = screen
        self.to = to
        self.type = type

    @property
    def description(self):
        """Gets the description of this Transition.  # noqa: E501

        The description of the transition.  # noqa: E501

        :return: The description of this Transition.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Transition.

        The description of the transition.  # noqa: E501

        :param description: The description of this Transition.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def _from(self):
        """Gets the _from of this Transition.  # noqa: E501

        The statuses the transition can start from.  # noqa: E501

        :return: The _from of this Transition.  # noqa: E501
        :rtype: list[str]
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this Transition.

        The statuses the transition can start from.  # noqa: E501

        :param _from: The _from of this Transition.  # noqa: E501
        :type: list[str]
        """
        if _from is None:
            raise ValueError("Invalid value for `_from`, must not be `None`")  # noqa: E501

        self.__from = _from

    @property
    def id(self):
        """Gets the id of this Transition.  # noqa: E501

        The ID of the transition.  # noqa: E501

        :return: The id of this Transition.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Transition.

        The ID of the transition.  # noqa: E501

        :param id: The id of this Transition.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this Transition.  # noqa: E501

        The name of the transition.  # noqa: E501

        :return: The name of this Transition.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Transition.

        The name of the transition.  # noqa: E501

        :param name: The name of this Transition.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def properties(self):
        """Gets the properties of this Transition.  # noqa: E501

        The properties of the transition.  # noqa: E501

        :return: The properties of this Transition.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this Transition.

        The properties of the transition.  # noqa: E501

        :param properties: The properties of this Transition.  # noqa: E501
        :type: dict(str, object)
        """

        self._properties = properties

    @property
    def rules(self):
        """Gets the rules of this Transition.  # noqa: E501


        :return: The rules of this Transition.  # noqa: E501
        :rtype: WorkflowRules
        """
        return self._rules

    @rules.setter
    def rules(self, rules):
        """Sets the rules of this Transition.


        :param rules: The rules of this Transition.  # noqa: E501
        :type: WorkflowRules
        """

        self._rules = rules

    @property
    def screen(self):
        """Gets the screen of this Transition.  # noqa: E501


        :return: The screen of this Transition.  # noqa: E501
        :rtype: TransitionScreenDetails
        """
        return self._screen

    @screen.setter
    def screen(self, screen):
        """Sets the screen of this Transition.


        :param screen: The screen of this Transition.  # noqa: E501
        :type: TransitionScreenDetails
        """

        self._screen = screen

    @property
    def to(self):
        """Gets the to of this Transition.  # noqa: E501

        The status the transition goes to.  # noqa: E501

        :return: The to of this Transition.  # noqa: E501
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this Transition.

        The status the transition goes to.  # noqa: E501

        :param to: The to of this Transition.  # noqa: E501
        :type: str
        """
        if to is None:
            raise ValueError("Invalid value for `to`, must not be `None`")  # noqa: E501

        self._to = to

    @property
    def type(self):
        """Gets the type of this Transition.  # noqa: E501

        The type of the transition.  # noqa: E501

        :return: The type of this Transition.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Transition.

        The type of the transition.  # noqa: E501

        :param type: The type of this Transition.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["global", "initial", "directed"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Transition, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Transition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
