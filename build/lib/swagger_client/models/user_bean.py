# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UserBean(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'str',
        'active': 'bool',
        'avatar_urls': 'AllOfUserBeanAvatarUrls',
        'display_name': 'str',
        'key': 'str',
        'name': 'str',
        '_self': 'str'
    }

    attribute_map = {
        'account_id': 'accountId',
        'active': 'active',
        'avatar_urls': 'avatarUrls',
        'display_name': 'displayName',
        'key': 'key',
        'name': 'name',
        '_self': 'self'
    }

    def __init__(self, account_id=None, active=None, avatar_urls=None, display_name=None, key=None, name=None, _self=None):  # noqa: E501
        """UserBean - a model defined in Swagger"""  # noqa: E501
        self._account_id = None
        self._active = None
        self._avatar_urls = None
        self._display_name = None
        self._key = None
        self._name = None
        self.__self = None
        self.discriminator = None
        if account_id is not None:
            self.account_id = account_id
        if active is not None:
            self.active = active
        if avatar_urls is not None:
            self.avatar_urls = avatar_urls
        if display_name is not None:
            self.display_name = display_name
        if key is not None:
            self.key = key
        if name is not None:
            self.name = name
        if _self is not None:
            self._self = _self

    @property
    def account_id(self):
        """Gets the account_id of this UserBean.  # noqa: E501

        The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.  # noqa: E501

        :return: The account_id of this UserBean.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this UserBean.

        The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.  # noqa: E501

        :param account_id: The account_id of this UserBean.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def active(self):
        """Gets the active of this UserBean.  # noqa: E501

        Whether the user is active.  # noqa: E501

        :return: The active of this UserBean.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this UserBean.

        Whether the user is active.  # noqa: E501

        :param active: The active of this UserBean.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def avatar_urls(self):
        """Gets the avatar_urls of this UserBean.  # noqa: E501

        The avatars of the user.  # noqa: E501

        :return: The avatar_urls of this UserBean.  # noqa: E501
        :rtype: AllOfUserBeanAvatarUrls
        """
        return self._avatar_urls

    @avatar_urls.setter
    def avatar_urls(self, avatar_urls):
        """Sets the avatar_urls of this UserBean.

        The avatars of the user.  # noqa: E501

        :param avatar_urls: The avatar_urls of this UserBean.  # noqa: E501
        :type: AllOfUserBeanAvatarUrls
        """

        self._avatar_urls = avatar_urls

    @property
    def display_name(self):
        """Gets the display_name of this UserBean.  # noqa: E501

        The display name of the user. Depending on the user’s privacy setting, this may return an alternative value.  # noqa: E501

        :return: The display_name of this UserBean.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this UserBean.

        The display name of the user. Depending on the user’s privacy setting, this may return an alternative value.  # noqa: E501

        :param display_name: The display_name of this UserBean.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def key(self):
        """Gets the key of this UserBean.  # noqa: E501

        This property is deprecated in favor of `accountId` because of privacy changes. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.   The key of the user.  # noqa: E501

        :return: The key of this UserBean.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this UserBean.

        This property is deprecated in favor of `accountId` because of privacy changes. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.   The key of the user.  # noqa: E501

        :param key: The key of this UserBean.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def name(self):
        """Gets the name of this UserBean.  # noqa: E501

        This property is deprecated in favor of `accountId` because of privacy changes. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.   The username of the user.  # noqa: E501

        :return: The name of this UserBean.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UserBean.

        This property is deprecated in favor of `accountId` because of privacy changes. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.   The username of the user.  # noqa: E501

        :param name: The name of this UserBean.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def _self(self):
        """Gets the _self of this UserBean.  # noqa: E501

        The URL of the user.  # noqa: E501

        :return: The _self of this UserBean.  # noqa: E501
        :rtype: str
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this UserBean.

        The URL of the user.  # noqa: E501

        :param _self: The _self of this UserBean.  # noqa: E501
        :type: str
        """

        self.__self = _self

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserBean, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserBean):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
