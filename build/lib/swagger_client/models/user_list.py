# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UserList(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'end_index': 'int',
        'items': 'list[User]',
        'max_results': 'int',
        'size': 'int',
        'start_index': 'int'
    }

    attribute_map = {
        'end_index': 'end-index',
        'items': 'items',
        'max_results': 'max-results',
        'size': 'size',
        'start_index': 'start-index'
    }

    def __init__(self, end_index=None, items=None, max_results=None, size=None, start_index=None):  # noqa: E501
        """UserList - a model defined in Swagger"""  # noqa: E501
        self._end_index = None
        self._items = None
        self._max_results = None
        self._size = None
        self._start_index = None
        self.discriminator = None
        if end_index is not None:
            self.end_index = end_index
        if items is not None:
            self.items = items
        if max_results is not None:
            self.max_results = max_results
        if size is not None:
            self.size = size
        if start_index is not None:
            self.start_index = start_index

    @property
    def end_index(self):
        """Gets the end_index of this UserList.  # noqa: E501

        The index of the last item returned on the page.  # noqa: E501

        :return: The end_index of this UserList.  # noqa: E501
        :rtype: int
        """
        return self._end_index

    @end_index.setter
    def end_index(self, end_index):
        """Sets the end_index of this UserList.

        The index of the last item returned on the page.  # noqa: E501

        :param end_index: The end_index of this UserList.  # noqa: E501
        :type: int
        """

        self._end_index = end_index

    @property
    def items(self):
        """Gets the items of this UserList.  # noqa: E501

        The list of items.  # noqa: E501

        :return: The items of this UserList.  # noqa: E501
        :rtype: list[User]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this UserList.

        The list of items.  # noqa: E501

        :param items: The items of this UserList.  # noqa: E501
        :type: list[User]
        """

        self._items = items

    @property
    def max_results(self):
        """Gets the max_results of this UserList.  # noqa: E501

        The maximum number of results that could be on the page.  # noqa: E501

        :return: The max_results of this UserList.  # noqa: E501
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this UserList.

        The maximum number of results that could be on the page.  # noqa: E501

        :param max_results: The max_results of this UserList.  # noqa: E501
        :type: int
        """

        self._max_results = max_results

    @property
    def size(self):
        """Gets the size of this UserList.  # noqa: E501

        The number of items on the page.  # noqa: E501

        :return: The size of this UserList.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this UserList.

        The number of items on the page.  # noqa: E501

        :param size: The size of this UserList.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def start_index(self):
        """Gets the start_index of this UserList.  # noqa: E501

        The index of the first item returned on the page.  # noqa: E501

        :return: The start_index of this UserList.  # noqa: E501
        :rtype: int
        """
        return self._start_index

    @start_index.setter
    def start_index(self, start_index):
        """Sets the start_index of this UserList.

        The index of the first item returned on the page.  # noqa: E501

        :param start_index: The start_index of this UserList.  # noqa: E501
        :type: int
        """

        self._start_index = start_index

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserList, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserList):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
