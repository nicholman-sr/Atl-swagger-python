# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Version(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'approvers': 'list[VersionApprover]',
        'archived': 'bool',
        'description': 'str',
        'driver': 'str',
        'expand': 'str',
        'id': 'str',
        'issues_status_for_fix_version': 'AllOfVersionIssuesStatusForFixVersion',
        'move_unfixed_issues_to': 'str',
        'name': 'str',
        'operations': 'list[SimpleLink]',
        'overdue': 'bool',
        'project': 'str',
        'project_id': 'int',
        'release_date': 'date',
        'released': 'bool',
        '_self': 'str',
        'start_date': 'date',
        'user_release_date': 'str',
        'user_start_date': 'str'
    }

    attribute_map = {
        'approvers': 'approvers',
        'archived': 'archived',
        'description': 'description',
        'driver': 'driver',
        'expand': 'expand',
        'id': 'id',
        'issues_status_for_fix_version': 'issuesStatusForFixVersion',
        'move_unfixed_issues_to': 'moveUnfixedIssuesTo',
        'name': 'name',
        'operations': 'operations',
        'overdue': 'overdue',
        'project': 'project',
        'project_id': 'projectId',
        'release_date': 'releaseDate',
        'released': 'released',
        '_self': 'self',
        'start_date': 'startDate',
        'user_release_date': 'userReleaseDate',
        'user_start_date': 'userStartDate'
    }

    def __init__(self, approvers=None, archived=None, description=None, driver=None, expand=None, id=None, issues_status_for_fix_version=None, move_unfixed_issues_to=None, name=None, operations=None, overdue=None, project=None, project_id=None, release_date=None, released=None, _self=None, start_date=None, user_release_date=None, user_start_date=None):  # noqa: E501
        """Version - a model defined in Swagger"""  # noqa: E501
        self._approvers = None
        self._archived = None
        self._description = None
        self._driver = None
        self._expand = None
        self._id = None
        self._issues_status_for_fix_version = None
        self._move_unfixed_issues_to = None
        self._name = None
        self._operations = None
        self._overdue = None
        self._project = None
        self._project_id = None
        self._release_date = None
        self._released = None
        self.__self = None
        self._start_date = None
        self._user_release_date = None
        self._user_start_date = None
        self.discriminator = None
        if approvers is not None:
            self.approvers = approvers
        if archived is not None:
            self.archived = archived
        if description is not None:
            self.description = description
        if driver is not None:
            self.driver = driver
        if expand is not None:
            self.expand = expand
        if id is not None:
            self.id = id
        if issues_status_for_fix_version is not None:
            self.issues_status_for_fix_version = issues_status_for_fix_version
        if move_unfixed_issues_to is not None:
            self.move_unfixed_issues_to = move_unfixed_issues_to
        if name is not None:
            self.name = name
        if operations is not None:
            self.operations = operations
        if overdue is not None:
            self.overdue = overdue
        if project is not None:
            self.project = project
        if project_id is not None:
            self.project_id = project_id
        if release_date is not None:
            self.release_date = release_date
        if released is not None:
            self.released = released
        if _self is not None:
            self._self = _self
        if start_date is not None:
            self.start_date = start_date
        if user_release_date is not None:
            self.user_release_date = user_release_date
        if user_start_date is not None:
            self.user_start_date = user_start_date

    @property
    def approvers(self):
        """Gets the approvers of this Version.  # noqa: E501

        If the expand option `approvers` is used, returns a list containing the approvers for this version.  # noqa: E501

        :return: The approvers of this Version.  # noqa: E501
        :rtype: list[VersionApprover]
        """
        return self._approvers

    @approvers.setter
    def approvers(self, approvers):
        """Sets the approvers of this Version.

        If the expand option `approvers` is used, returns a list containing the approvers for this version.  # noqa: E501

        :param approvers: The approvers of this Version.  # noqa: E501
        :type: list[VersionApprover]
        """

        self._approvers = approvers

    @property
    def archived(self):
        """Gets the archived of this Version.  # noqa: E501

        Indicates that the version is archived. Optional when creating or updating a version.  # noqa: E501

        :return: The archived of this Version.  # noqa: E501
        :rtype: bool
        """
        return self._archived

    @archived.setter
    def archived(self, archived):
        """Sets the archived of this Version.

        Indicates that the version is archived. Optional when creating or updating a version.  # noqa: E501

        :param archived: The archived of this Version.  # noqa: E501
        :type: bool
        """

        self._archived = archived

    @property
    def description(self):
        """Gets the description of this Version.  # noqa: E501

        The description of the version. Optional when creating or updating a version. The maximum size is 16,384 bytes.  # noqa: E501

        :return: The description of this Version.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Version.

        The description of the version. Optional when creating or updating a version. The maximum size is 16,384 bytes.  # noqa: E501

        :param description: The description of this Version.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def driver(self):
        """Gets the driver of this Version.  # noqa: E501

        If the expand option `driver` is used, returns the Atlassian account ID of the driver.  # noqa: E501

        :return: The driver of this Version.  # noqa: E501
        :rtype: str
        """
        return self._driver

    @driver.setter
    def driver(self, driver):
        """Sets the driver of this Version.

        If the expand option `driver` is used, returns the Atlassian account ID of the driver.  # noqa: E501

        :param driver: The driver of this Version.  # noqa: E501
        :type: str
        """

        self._driver = driver

    @property
    def expand(self):
        """Gets the expand of this Version.  # noqa: E501

        Use [expand](em>#expansion) to include additional information about version in the response. This parameter accepts a comma-separated list. Expand options include:   *  `operations` Returns the list of operations available for this version.  *  `issuesstatus` Returns the count of issues in this version for each of the status categories *to do*, *in progress*, *done*, and *unmapped*. The *unmapped* property contains a count of issues with a status other than *to do*, *in progress*, and *done*.  *  `driver` Returns the Atlassian account ID of the version driver.  *  `approvers` Returns a list containing approvers for this version.  Optional for create and update.  # noqa: E501

        :return: The expand of this Version.  # noqa: E501
        :rtype: str
        """
        return self._expand

    @expand.setter
    def expand(self, expand):
        """Sets the expand of this Version.

        Use [expand](em>#expansion) to include additional information about version in the response. This parameter accepts a comma-separated list. Expand options include:   *  `operations` Returns the list of operations available for this version.  *  `issuesstatus` Returns the count of issues in this version for each of the status categories *to do*, *in progress*, *done*, and *unmapped*. The *unmapped* property contains a count of issues with a status other than *to do*, *in progress*, and *done*.  *  `driver` Returns the Atlassian account ID of the version driver.  *  `approvers` Returns a list containing approvers for this version.  Optional for create and update.  # noqa: E501

        :param expand: The expand of this Version.  # noqa: E501
        :type: str
        """

        self._expand = expand

    @property
    def id(self):
        """Gets the id of this Version.  # noqa: E501

        The ID of the version.  # noqa: E501

        :return: The id of this Version.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Version.

        The ID of the version.  # noqa: E501

        :param id: The id of this Version.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def issues_status_for_fix_version(self):
        """Gets the issues_status_for_fix_version of this Version.  # noqa: E501

        If the expand option `issuesstatus` is used, returns the count of issues in this version for each of the status categories *to do*, *in progress*, *done*, and *unmapped*. The *unmapped* property contains a count of issues with a status other than *to do*, *in progress*, and *done*.  # noqa: E501

        :return: The issues_status_for_fix_version of this Version.  # noqa: E501
        :rtype: AllOfVersionIssuesStatusForFixVersion
        """
        return self._issues_status_for_fix_version

    @issues_status_for_fix_version.setter
    def issues_status_for_fix_version(self, issues_status_for_fix_version):
        """Sets the issues_status_for_fix_version of this Version.

        If the expand option `issuesstatus` is used, returns the count of issues in this version for each of the status categories *to do*, *in progress*, *done*, and *unmapped*. The *unmapped* property contains a count of issues with a status other than *to do*, *in progress*, and *done*.  # noqa: E501

        :param issues_status_for_fix_version: The issues_status_for_fix_version of this Version.  # noqa: E501
        :type: AllOfVersionIssuesStatusForFixVersion
        """

        self._issues_status_for_fix_version = issues_status_for_fix_version

    @property
    def move_unfixed_issues_to(self):
        """Gets the move_unfixed_issues_to of this Version.  # noqa: E501

        The URL of the self link to the version to which all unfixed issues are moved when a version is released. Not applicable when creating a version. Optional when updating a version.  # noqa: E501

        :return: The move_unfixed_issues_to of this Version.  # noqa: E501
        :rtype: str
        """
        return self._move_unfixed_issues_to

    @move_unfixed_issues_to.setter
    def move_unfixed_issues_to(self, move_unfixed_issues_to):
        """Sets the move_unfixed_issues_to of this Version.

        The URL of the self link to the version to which all unfixed issues are moved when a version is released. Not applicable when creating a version. Optional when updating a version.  # noqa: E501

        :param move_unfixed_issues_to: The move_unfixed_issues_to of this Version.  # noqa: E501
        :type: str
        """

        self._move_unfixed_issues_to = move_unfixed_issues_to

    @property
    def name(self):
        """Gets the name of this Version.  # noqa: E501

        The unique name of the version. Required when creating a version. Optional when updating a version. The maximum length is 255 characters.  # noqa: E501

        :return: The name of this Version.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Version.

        The unique name of the version. Required when creating a version. Optional when updating a version. The maximum length is 255 characters.  # noqa: E501

        :param name: The name of this Version.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def operations(self):
        """Gets the operations of this Version.  # noqa: E501

        If the expand option `operations` is used, returns the list of operations available for this version.  # noqa: E501

        :return: The operations of this Version.  # noqa: E501
        :rtype: list[SimpleLink]
        """
        return self._operations

    @operations.setter
    def operations(self, operations):
        """Sets the operations of this Version.

        If the expand option `operations` is used, returns the list of operations available for this version.  # noqa: E501

        :param operations: The operations of this Version.  # noqa: E501
        :type: list[SimpleLink]
        """

        self._operations = operations

    @property
    def overdue(self):
        """Gets the overdue of this Version.  # noqa: E501

        Indicates that the version is overdue.  # noqa: E501

        :return: The overdue of this Version.  # noqa: E501
        :rtype: bool
        """
        return self._overdue

    @overdue.setter
    def overdue(self, overdue):
        """Sets the overdue of this Version.

        Indicates that the version is overdue.  # noqa: E501

        :param overdue: The overdue of this Version.  # noqa: E501
        :type: bool
        """

        self._overdue = overdue

    @property
    def project(self):
        """Gets the project of this Version.  # noqa: E501

        Deprecated. Use `projectId`.  # noqa: E501

        :return: The project of this Version.  # noqa: E501
        :rtype: str
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this Version.

        Deprecated. Use `projectId`.  # noqa: E501

        :param project: The project of this Version.  # noqa: E501
        :type: str
        """

        self._project = project

    @property
    def project_id(self):
        """Gets the project_id of this Version.  # noqa: E501

        The ID of the project to which this version is attached. Required when creating a version. Not applicable when updating a version.  # noqa: E501

        :return: The project_id of this Version.  # noqa: E501
        :rtype: int
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this Version.

        The ID of the project to which this version is attached. Required when creating a version. Not applicable when updating a version.  # noqa: E501

        :param project_id: The project_id of this Version.  # noqa: E501
        :type: int
        """

        self._project_id = project_id

    @property
    def release_date(self):
        """Gets the release_date of this Version.  # noqa: E501

        The release date of the version. Expressed in ISO 8601 format (yyyy-mm-dd). Optional when creating or updating a version.  # noqa: E501

        :return: The release_date of this Version.  # noqa: E501
        :rtype: date
        """
        return self._release_date

    @release_date.setter
    def release_date(self, release_date):
        """Sets the release_date of this Version.

        The release date of the version. Expressed in ISO 8601 format (yyyy-mm-dd). Optional when creating or updating a version.  # noqa: E501

        :param release_date: The release_date of this Version.  # noqa: E501
        :type: date
        """

        self._release_date = release_date

    @property
    def released(self):
        """Gets the released of this Version.  # noqa: E501

        Indicates that the version is released. If the version is released a request to release again is ignored. Not applicable when creating a version. Optional when updating a version.  # noqa: E501

        :return: The released of this Version.  # noqa: E501
        :rtype: bool
        """
        return self._released

    @released.setter
    def released(self, released):
        """Sets the released of this Version.

        Indicates that the version is released. If the version is released a request to release again is ignored. Not applicable when creating a version. Optional when updating a version.  # noqa: E501

        :param released: The released of this Version.  # noqa: E501
        :type: bool
        """

        self._released = released

    @property
    def _self(self):
        """Gets the _self of this Version.  # noqa: E501

        The URL of the version.  # noqa: E501

        :return: The _self of this Version.  # noqa: E501
        :rtype: str
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this Version.

        The URL of the version.  # noqa: E501

        :param _self: The _self of this Version.  # noqa: E501
        :type: str
        """

        self.__self = _self

    @property
    def start_date(self):
        """Gets the start_date of this Version.  # noqa: E501

        The start date of the version. Expressed in ISO 8601 format (yyyy-mm-dd). Optional when creating or updating a version.  # noqa: E501

        :return: The start_date of this Version.  # noqa: E501
        :rtype: date
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this Version.

        The start date of the version. Expressed in ISO 8601 format (yyyy-mm-dd). Optional when creating or updating a version.  # noqa: E501

        :param start_date: The start_date of this Version.  # noqa: E501
        :type: date
        """

        self._start_date = start_date

    @property
    def user_release_date(self):
        """Gets the user_release_date of this Version.  # noqa: E501

        The date on which work on this version is expected to finish, expressed in the instance's *Day/Month/Year Format* date format.  # noqa: E501

        :return: The user_release_date of this Version.  # noqa: E501
        :rtype: str
        """
        return self._user_release_date

    @user_release_date.setter
    def user_release_date(self, user_release_date):
        """Sets the user_release_date of this Version.

        The date on which work on this version is expected to finish, expressed in the instance's *Day/Month/Year Format* date format.  # noqa: E501

        :param user_release_date: The user_release_date of this Version.  # noqa: E501
        :type: str
        """

        self._user_release_date = user_release_date

    @property
    def user_start_date(self):
        """Gets the user_start_date of this Version.  # noqa: E501

        The date on which work on this version is expected to start, expressed in the instance's *Day/Month/Year Format* date format.  # noqa: E501

        :return: The user_start_date of this Version.  # noqa: E501
        :rtype: str
        """
        return self._user_start_date

    @user_start_date.setter
    def user_start_date(self, user_start_date):
        """Sets the user_start_date of this Version.

        The date on which work on this version is expected to start, expressed in the instance's *Day/Month/Year Format* date format.  # noqa: E501

        :param user_start_date: The user_start_date of this Version.  # noqa: E501
        :type: str
        """

        self._user_start_date = user_start_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Version, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Version):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
