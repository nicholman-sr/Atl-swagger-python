# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class VersionIssueCounts(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'custom_field_usage': 'list[VersionUsageInCustomField]',
        'issue_count_with_custom_fields_showing_version': 'int',
        'issues_affected_count': 'int',
        'issues_fixed_count': 'int',
        '_self': 'str'
    }

    attribute_map = {
        'custom_field_usage': 'customFieldUsage',
        'issue_count_with_custom_fields_showing_version': 'issueCountWithCustomFieldsShowingVersion',
        'issues_affected_count': 'issuesAffectedCount',
        'issues_fixed_count': 'issuesFixedCount',
        '_self': 'self'
    }

    def __init__(self, custom_field_usage=None, issue_count_with_custom_fields_showing_version=None, issues_affected_count=None, issues_fixed_count=None, _self=None):  # noqa: E501
        """VersionIssueCounts - a model defined in Swagger"""  # noqa: E501
        self._custom_field_usage = None
        self._issue_count_with_custom_fields_showing_version = None
        self._issues_affected_count = None
        self._issues_fixed_count = None
        self.__self = None
        self.discriminator = None
        if custom_field_usage is not None:
            self.custom_field_usage = custom_field_usage
        if issue_count_with_custom_fields_showing_version is not None:
            self.issue_count_with_custom_fields_showing_version = issue_count_with_custom_fields_showing_version
        if issues_affected_count is not None:
            self.issues_affected_count = issues_affected_count
        if issues_fixed_count is not None:
            self.issues_fixed_count = issues_fixed_count
        if _self is not None:
            self._self = _self

    @property
    def custom_field_usage(self):
        """Gets the custom_field_usage of this VersionIssueCounts.  # noqa: E501

        List of custom fields using the version.  # noqa: E501

        :return: The custom_field_usage of this VersionIssueCounts.  # noqa: E501
        :rtype: list[VersionUsageInCustomField]
        """
        return self._custom_field_usage

    @custom_field_usage.setter
    def custom_field_usage(self, custom_field_usage):
        """Sets the custom_field_usage of this VersionIssueCounts.

        List of custom fields using the version.  # noqa: E501

        :param custom_field_usage: The custom_field_usage of this VersionIssueCounts.  # noqa: E501
        :type: list[VersionUsageInCustomField]
        """

        self._custom_field_usage = custom_field_usage

    @property
    def issue_count_with_custom_fields_showing_version(self):
        """Gets the issue_count_with_custom_fields_showing_version of this VersionIssueCounts.  # noqa: E501

        Count of issues where a version custom field is set to the version.  # noqa: E501

        :return: The issue_count_with_custom_fields_showing_version of this VersionIssueCounts.  # noqa: E501
        :rtype: int
        """
        return self._issue_count_with_custom_fields_showing_version

    @issue_count_with_custom_fields_showing_version.setter
    def issue_count_with_custom_fields_showing_version(self, issue_count_with_custom_fields_showing_version):
        """Sets the issue_count_with_custom_fields_showing_version of this VersionIssueCounts.

        Count of issues where a version custom field is set to the version.  # noqa: E501

        :param issue_count_with_custom_fields_showing_version: The issue_count_with_custom_fields_showing_version of this VersionIssueCounts.  # noqa: E501
        :type: int
        """

        self._issue_count_with_custom_fields_showing_version = issue_count_with_custom_fields_showing_version

    @property
    def issues_affected_count(self):
        """Gets the issues_affected_count of this VersionIssueCounts.  # noqa: E501

        Count of issues where the `affectedVersion` is set to the version.  # noqa: E501

        :return: The issues_affected_count of this VersionIssueCounts.  # noqa: E501
        :rtype: int
        """
        return self._issues_affected_count

    @issues_affected_count.setter
    def issues_affected_count(self, issues_affected_count):
        """Sets the issues_affected_count of this VersionIssueCounts.

        Count of issues where the `affectedVersion` is set to the version.  # noqa: E501

        :param issues_affected_count: The issues_affected_count of this VersionIssueCounts.  # noqa: E501
        :type: int
        """

        self._issues_affected_count = issues_affected_count

    @property
    def issues_fixed_count(self):
        """Gets the issues_fixed_count of this VersionIssueCounts.  # noqa: E501

        Count of issues where the `fixVersion` is set to the version.  # noqa: E501

        :return: The issues_fixed_count of this VersionIssueCounts.  # noqa: E501
        :rtype: int
        """
        return self._issues_fixed_count

    @issues_fixed_count.setter
    def issues_fixed_count(self, issues_fixed_count):
        """Sets the issues_fixed_count of this VersionIssueCounts.

        Count of issues where the `fixVersion` is set to the version.  # noqa: E501

        :param issues_fixed_count: The issues_fixed_count of this VersionIssueCounts.  # noqa: E501
        :type: int
        """

        self._issues_fixed_count = issues_fixed_count

    @property
    def _self(self):
        """Gets the _self of this VersionIssueCounts.  # noqa: E501

        The URL of these count details.  # noqa: E501

        :return: The _self of this VersionIssueCounts.  # noqa: E501
        :rtype: str
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this VersionIssueCounts.

        The URL of these count details.  # noqa: E501

        :param _self: The _self of this VersionIssueCounts.  # noqa: E501
        :type: str
        """

        self.__self = _self

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VersionIssueCounts, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VersionIssueCounts):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
