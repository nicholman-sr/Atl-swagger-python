# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Webhook(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'events': 'list[str]',
        'expiration_date': 'int',
        'field_ids_filter': 'list[str]',
        'id': 'int',
        'issue_property_keys_filter': 'list[str]',
        'jql_filter': 'str',
        'url': 'str'
    }

    attribute_map = {
        'events': 'events',
        'expiration_date': 'expirationDate',
        'field_ids_filter': 'fieldIdsFilter',
        'id': 'id',
        'issue_property_keys_filter': 'issuePropertyKeysFilter',
        'jql_filter': 'jqlFilter',
        'url': 'url'
    }

    def __init__(self, events=None, expiration_date=None, field_ids_filter=None, id=None, issue_property_keys_filter=None, jql_filter=None, url=None):  # noqa: E501
        """Webhook - a model defined in Swagger"""  # noqa: E501
        self._events = None
        self._expiration_date = None
        self._field_ids_filter = None
        self._id = None
        self._issue_property_keys_filter = None
        self._jql_filter = None
        self._url = None
        self.discriminator = None
        self.events = events
        if expiration_date is not None:
            self.expiration_date = expiration_date
        if field_ids_filter is not None:
            self.field_ids_filter = field_ids_filter
        self.id = id
        if issue_property_keys_filter is not None:
            self.issue_property_keys_filter = issue_property_keys_filter
        self.jql_filter = jql_filter
        self.url = url

    @property
    def events(self):
        """Gets the events of this Webhook.  # noqa: E501

        The Jira events that trigger the webhook.  # noqa: E501

        :return: The events of this Webhook.  # noqa: E501
        :rtype: list[str]
        """
        return self._events

    @events.setter
    def events(self, events):
        """Sets the events of this Webhook.

        The Jira events that trigger the webhook.  # noqa: E501

        :param events: The events of this Webhook.  # noqa: E501
        :type: list[str]
        """
        if events is None:
            raise ValueError("Invalid value for `events`, must not be `None`")  # noqa: E501
        allowed_values = ["jira:issue_created", "jira:issue_updated", "jira:issue_deleted", "comment_created", "comment_updated", "comment_deleted", "issue_property_set", "issue_property_deleted"]  # noqa: E501
        if not set(events).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `events` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(events) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._events = events

    @property
    def expiration_date(self):
        """Gets the expiration_date of this Webhook.  # noqa: E501

        The date after which the webhook is no longer sent. Use [Extend webhook life](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-webhooks/#api-rest-api-3-webhook-refresh-put) to extend the date.  # noqa: E501

        :return: The expiration_date of this Webhook.  # noqa: E501
        :rtype: int
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this Webhook.

        The date after which the webhook is no longer sent. Use [Extend webhook life](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-webhooks/#api-rest-api-3-webhook-refresh-put) to extend the date.  # noqa: E501

        :param expiration_date: The expiration_date of this Webhook.  # noqa: E501
        :type: int
        """

        self._expiration_date = expiration_date

    @property
    def field_ids_filter(self):
        """Gets the field_ids_filter of this Webhook.  # noqa: E501

        A list of field IDs. When the issue changelog contains any of the fields, the webhook `jira:issue_updated` is sent. If this parameter is not present, the app is notified about all field updates.  # noqa: E501

        :return: The field_ids_filter of this Webhook.  # noqa: E501
        :rtype: list[str]
        """
        return self._field_ids_filter

    @field_ids_filter.setter
    def field_ids_filter(self, field_ids_filter):
        """Sets the field_ids_filter of this Webhook.

        A list of field IDs. When the issue changelog contains any of the fields, the webhook `jira:issue_updated` is sent. If this parameter is not present, the app is notified about all field updates.  # noqa: E501

        :param field_ids_filter: The field_ids_filter of this Webhook.  # noqa: E501
        :type: list[str]
        """

        self._field_ids_filter = field_ids_filter

    @property
    def id(self):
        """Gets the id of this Webhook.  # noqa: E501

        The ID of the webhook.  # noqa: E501

        :return: The id of this Webhook.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Webhook.

        The ID of the webhook.  # noqa: E501

        :param id: The id of this Webhook.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def issue_property_keys_filter(self):
        """Gets the issue_property_keys_filter of this Webhook.  # noqa: E501

        A list of issue property keys. A change of those issue properties triggers the `issue_property_set` or `issue_property_deleted` webhooks. If this parameter is not present, the app is notified about all issue property updates.  # noqa: E501

        :return: The issue_property_keys_filter of this Webhook.  # noqa: E501
        :rtype: list[str]
        """
        return self._issue_property_keys_filter

    @issue_property_keys_filter.setter
    def issue_property_keys_filter(self, issue_property_keys_filter):
        """Sets the issue_property_keys_filter of this Webhook.

        A list of issue property keys. A change of those issue properties triggers the `issue_property_set` or `issue_property_deleted` webhooks. If this parameter is not present, the app is notified about all issue property updates.  # noqa: E501

        :param issue_property_keys_filter: The issue_property_keys_filter of this Webhook.  # noqa: E501
        :type: list[str]
        """

        self._issue_property_keys_filter = issue_property_keys_filter

    @property
    def jql_filter(self):
        """Gets the jql_filter of this Webhook.  # noqa: E501

        The JQL filter that specifies which issues the webhook is sent for.  # noqa: E501

        :return: The jql_filter of this Webhook.  # noqa: E501
        :rtype: str
        """
        return self._jql_filter

    @jql_filter.setter
    def jql_filter(self, jql_filter):
        """Sets the jql_filter of this Webhook.

        The JQL filter that specifies which issues the webhook is sent for.  # noqa: E501

        :param jql_filter: The jql_filter of this Webhook.  # noqa: E501
        :type: str
        """
        if jql_filter is None:
            raise ValueError("Invalid value for `jql_filter`, must not be `None`")  # noqa: E501

        self._jql_filter = jql_filter

    @property
    def url(self):
        """Gets the url of this Webhook.  # noqa: E501

        The URL that specifies where the webhooks are sent.  # noqa: E501

        :return: The url of this Webhook.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Webhook.

        The URL that specifies where the webhooks are sent.  # noqa: E501

        :param url: The url of this Webhook.  # noqa: E501
        :type: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Webhook, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Webhook):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
