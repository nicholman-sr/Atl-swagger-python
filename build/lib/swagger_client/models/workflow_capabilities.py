# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WorkflowCapabilities(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'connect_rules': 'list[AvailableWorkflowConnectRule]',
        'editor_scope': 'str',
        'forge_rules': 'list[AvailableWorkflowForgeRule]',
        'project_types': 'list[str]',
        'system_rules': 'list[AvailableWorkflowSystemRule]',
        'trigger_rules': 'list[AvailableWorkflowTriggers]'
    }

    attribute_map = {
        'connect_rules': 'connectRules',
        'editor_scope': 'editorScope',
        'forge_rules': 'forgeRules',
        'project_types': 'projectTypes',
        'system_rules': 'systemRules',
        'trigger_rules': 'triggerRules'
    }

    def __init__(self, connect_rules=None, editor_scope=None, forge_rules=None, project_types=None, system_rules=None, trigger_rules=None):  # noqa: E501
        """WorkflowCapabilities - a model defined in Swagger"""  # noqa: E501
        self._connect_rules = None
        self._editor_scope = None
        self._forge_rules = None
        self._project_types = None
        self._system_rules = None
        self._trigger_rules = None
        self.discriminator = None
        if connect_rules is not None:
            self.connect_rules = connect_rules
        if editor_scope is not None:
            self.editor_scope = editor_scope
        if forge_rules is not None:
            self.forge_rules = forge_rules
        if project_types is not None:
            self.project_types = project_types
        if system_rules is not None:
            self.system_rules = system_rules
        if trigger_rules is not None:
            self.trigger_rules = trigger_rules

    @property
    def connect_rules(self):
        """Gets the connect_rules of this WorkflowCapabilities.  # noqa: E501

        The Connect provided ecosystem rules available.  # noqa: E501

        :return: The connect_rules of this WorkflowCapabilities.  # noqa: E501
        :rtype: list[AvailableWorkflowConnectRule]
        """
        return self._connect_rules

    @connect_rules.setter
    def connect_rules(self, connect_rules):
        """Sets the connect_rules of this WorkflowCapabilities.

        The Connect provided ecosystem rules available.  # noqa: E501

        :param connect_rules: The connect_rules of this WorkflowCapabilities.  # noqa: E501
        :type: list[AvailableWorkflowConnectRule]
        """

        self._connect_rules = connect_rules

    @property
    def editor_scope(self):
        """Gets the editor_scope of this WorkflowCapabilities.  # noqa: E501

        The scope of the workflow capabilities. `GLOBAL` for company-managed projects and `PROJECT` for team-managed projects.  # noqa: E501

        :return: The editor_scope of this WorkflowCapabilities.  # noqa: E501
        :rtype: str
        """
        return self._editor_scope

    @editor_scope.setter
    def editor_scope(self, editor_scope):
        """Sets the editor_scope of this WorkflowCapabilities.

        The scope of the workflow capabilities. `GLOBAL` for company-managed projects and `PROJECT` for team-managed projects.  # noqa: E501

        :param editor_scope: The editor_scope of this WorkflowCapabilities.  # noqa: E501
        :type: str
        """
        allowed_values = ["PROJECT", "GLOBAL"]  # noqa: E501
        if editor_scope not in allowed_values:
            raise ValueError(
                "Invalid value for `editor_scope` ({0}), must be one of {1}"  # noqa: E501
                .format(editor_scope, allowed_values)
            )

        self._editor_scope = editor_scope

    @property
    def forge_rules(self):
        """Gets the forge_rules of this WorkflowCapabilities.  # noqa: E501

        The Forge provided ecosystem rules available.  # noqa: E501

        :return: The forge_rules of this WorkflowCapabilities.  # noqa: E501
        :rtype: list[AvailableWorkflowForgeRule]
        """
        return self._forge_rules

    @forge_rules.setter
    def forge_rules(self, forge_rules):
        """Sets the forge_rules of this WorkflowCapabilities.

        The Forge provided ecosystem rules available.  # noqa: E501

        :param forge_rules: The forge_rules of this WorkflowCapabilities.  # noqa: E501
        :type: list[AvailableWorkflowForgeRule]
        """

        self._forge_rules = forge_rules

    @property
    def project_types(self):
        """Gets the project_types of this WorkflowCapabilities.  # noqa: E501

        The types of projects that this capability set is available for.  # noqa: E501

        :return: The project_types of this WorkflowCapabilities.  # noqa: E501
        :rtype: list[str]
        """
        return self._project_types

    @project_types.setter
    def project_types(self, project_types):
        """Sets the project_types of this WorkflowCapabilities.

        The types of projects that this capability set is available for.  # noqa: E501

        :param project_types: The project_types of this WorkflowCapabilities.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["software", "service_desk", "product_discovery", "business", "unknown"]  # noqa: E501
        if not set(project_types).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `project_types` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(project_types) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._project_types = project_types

    @property
    def system_rules(self):
        """Gets the system_rules of this WorkflowCapabilities.  # noqa: E501

        The Atlassian provided system rules available.  # noqa: E501

        :return: The system_rules of this WorkflowCapabilities.  # noqa: E501
        :rtype: list[AvailableWorkflowSystemRule]
        """
        return self._system_rules

    @system_rules.setter
    def system_rules(self, system_rules):
        """Sets the system_rules of this WorkflowCapabilities.

        The Atlassian provided system rules available.  # noqa: E501

        :param system_rules: The system_rules of this WorkflowCapabilities.  # noqa: E501
        :type: list[AvailableWorkflowSystemRule]
        """

        self._system_rules = system_rules

    @property
    def trigger_rules(self):
        """Gets the trigger_rules of this WorkflowCapabilities.  # noqa: E501

        The trigger rules available.  # noqa: E501

        :return: The trigger_rules of this WorkflowCapabilities.  # noqa: E501
        :rtype: list[AvailableWorkflowTriggers]
        """
        return self._trigger_rules

    @trigger_rules.setter
    def trigger_rules(self, trigger_rules):
        """Sets the trigger_rules of this WorkflowCapabilities.

        The trigger rules available.  # noqa: E501

        :param trigger_rules: The trigger_rules of this WorkflowCapabilities.  # noqa: E501
        :type: list[AvailableWorkflowTriggers]
        """

        self._trigger_rules = trigger_rules

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WorkflowCapabilities, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorkflowCapabilities):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
