# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WorkflowRulesSearchDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'invalid_rules': 'list[str]',
        'valid_rules': 'list[WorkflowTransitionRules]',
        'workflow_entity_id': 'str'
    }

    attribute_map = {
        'invalid_rules': 'invalidRules',
        'valid_rules': 'validRules',
        'workflow_entity_id': 'workflowEntityId'
    }

    def __init__(self, invalid_rules=None, valid_rules=None, workflow_entity_id=None):  # noqa: E501
        """WorkflowRulesSearchDetails - a model defined in Swagger"""  # noqa: E501
        self._invalid_rules = None
        self._valid_rules = None
        self._workflow_entity_id = None
        self.discriminator = None
        if invalid_rules is not None:
            self.invalid_rules = invalid_rules
        if valid_rules is not None:
            self.valid_rules = valid_rules
        if workflow_entity_id is not None:
            self.workflow_entity_id = workflow_entity_id

    @property
    def invalid_rules(self):
        """Gets the invalid_rules of this WorkflowRulesSearchDetails.  # noqa: E501

        List of workflow rule IDs that do not belong to the workflow or can not be found.  # noqa: E501

        :return: The invalid_rules of this WorkflowRulesSearchDetails.  # noqa: E501
        :rtype: list[str]
        """
        return self._invalid_rules

    @invalid_rules.setter
    def invalid_rules(self, invalid_rules):
        """Sets the invalid_rules of this WorkflowRulesSearchDetails.

        List of workflow rule IDs that do not belong to the workflow or can not be found.  # noqa: E501

        :param invalid_rules: The invalid_rules of this WorkflowRulesSearchDetails.  # noqa: E501
        :type: list[str]
        """

        self._invalid_rules = invalid_rules

    @property
    def valid_rules(self):
        """Gets the valid_rules of this WorkflowRulesSearchDetails.  # noqa: E501

        List of valid workflow transition rules.  # noqa: E501

        :return: The valid_rules of this WorkflowRulesSearchDetails.  # noqa: E501
        :rtype: list[WorkflowTransitionRules]
        """
        return self._valid_rules

    @valid_rules.setter
    def valid_rules(self, valid_rules):
        """Sets the valid_rules of this WorkflowRulesSearchDetails.

        List of valid workflow transition rules.  # noqa: E501

        :param valid_rules: The valid_rules of this WorkflowRulesSearchDetails.  # noqa: E501
        :type: list[WorkflowTransitionRules]
        """

        self._valid_rules = valid_rules

    @property
    def workflow_entity_id(self):
        """Gets the workflow_entity_id of this WorkflowRulesSearchDetails.  # noqa: E501

        The workflow ID.  # noqa: E501

        :return: The workflow_entity_id of this WorkflowRulesSearchDetails.  # noqa: E501
        :rtype: str
        """
        return self._workflow_entity_id

    @workflow_entity_id.setter
    def workflow_entity_id(self, workflow_entity_id):
        """Sets the workflow_entity_id of this WorkflowRulesSearchDetails.

        The workflow ID.  # noqa: E501

        :param workflow_entity_id: The workflow_entity_id of this WorkflowRulesSearchDetails.  # noqa: E501
        :type: str
        """

        self._workflow_entity_id = workflow_entity_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WorkflowRulesSearchDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorkflowRulesSearchDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
