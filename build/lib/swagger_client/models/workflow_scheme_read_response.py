# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WorkflowSchemeReadResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'default_workflow': 'WorkflowMetadataRestModel',
        'description': 'str',
        'id': 'str',
        'name': 'str',
        'scope': 'WorkflowScope',
        'task_id': 'str',
        'version': 'DocumentVersion',
        'workflows_for_issue_types': 'list[WorkflowMetadataAndIssueTypeRestModel]'
    }

    attribute_map = {
        'default_workflow': 'defaultWorkflow',
        'description': 'description',
        'id': 'id',
        'name': 'name',
        'scope': 'scope',
        'task_id': 'taskId',
        'version': 'version',
        'workflows_for_issue_types': 'workflowsForIssueTypes'
    }

    def __init__(self, default_workflow=None, description=None, id=None, name=None, scope=None, task_id=None, version=None, workflows_for_issue_types=None):  # noqa: E501
        """WorkflowSchemeReadResponse - a model defined in Swagger"""  # noqa: E501
        self._default_workflow = None
        self._description = None
        self._id = None
        self._name = None
        self._scope = None
        self._task_id = None
        self._version = None
        self._workflows_for_issue_types = None
        self.discriminator = None
        if default_workflow is not None:
            self.default_workflow = default_workflow
        if description is not None:
            self.description = description
        self.id = id
        self.name = name
        self.scope = scope
        if task_id is not None:
            self.task_id = task_id
        self.version = version
        self.workflows_for_issue_types = workflows_for_issue_types

    @property
    def default_workflow(self):
        """Gets the default_workflow of this WorkflowSchemeReadResponse.  # noqa: E501


        :return: The default_workflow of this WorkflowSchemeReadResponse.  # noqa: E501
        :rtype: WorkflowMetadataRestModel
        """
        return self._default_workflow

    @default_workflow.setter
    def default_workflow(self, default_workflow):
        """Sets the default_workflow of this WorkflowSchemeReadResponse.


        :param default_workflow: The default_workflow of this WorkflowSchemeReadResponse.  # noqa: E501
        :type: WorkflowMetadataRestModel
        """

        self._default_workflow = default_workflow

    @property
    def description(self):
        """Gets the description of this WorkflowSchemeReadResponse.  # noqa: E501

        The description of the workflow scheme.  # noqa: E501

        :return: The description of this WorkflowSchemeReadResponse.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this WorkflowSchemeReadResponse.

        The description of the workflow scheme.  # noqa: E501

        :param description: The description of this WorkflowSchemeReadResponse.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this WorkflowSchemeReadResponse.  # noqa: E501

        The ID of the workflow scheme.  # noqa: E501

        :return: The id of this WorkflowSchemeReadResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this WorkflowSchemeReadResponse.

        The ID of the workflow scheme.  # noqa: E501

        :param id: The id of this WorkflowSchemeReadResponse.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this WorkflowSchemeReadResponse.  # noqa: E501

        The name of the workflow scheme.  # noqa: E501

        :return: The name of this WorkflowSchemeReadResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WorkflowSchemeReadResponse.

        The name of the workflow scheme.  # noqa: E501

        :param name: The name of this WorkflowSchemeReadResponse.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def scope(self):
        """Gets the scope of this WorkflowSchemeReadResponse.  # noqa: E501


        :return: The scope of this WorkflowSchemeReadResponse.  # noqa: E501
        :rtype: WorkflowScope
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this WorkflowSchemeReadResponse.


        :param scope: The scope of this WorkflowSchemeReadResponse.  # noqa: E501
        :type: WorkflowScope
        """
        if scope is None:
            raise ValueError("Invalid value for `scope`, must not be `None`")  # noqa: E501

        self._scope = scope

    @property
    def task_id(self):
        """Gets the task_id of this WorkflowSchemeReadResponse.  # noqa: E501

        Indicates if there's an [asynchronous task](#async-operations) for this workflow scheme.  # noqa: E501

        :return: The task_id of this WorkflowSchemeReadResponse.  # noqa: E501
        :rtype: str
        """
        return self._task_id

    @task_id.setter
    def task_id(self, task_id):
        """Sets the task_id of this WorkflowSchemeReadResponse.

        Indicates if there's an [asynchronous task](#async-operations) for this workflow scheme.  # noqa: E501

        :param task_id: The task_id of this WorkflowSchemeReadResponse.  # noqa: E501
        :type: str
        """

        self._task_id = task_id

    @property
    def version(self):
        """Gets the version of this WorkflowSchemeReadResponse.  # noqa: E501


        :return: The version of this WorkflowSchemeReadResponse.  # noqa: E501
        :rtype: DocumentVersion
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this WorkflowSchemeReadResponse.


        :param version: The version of this WorkflowSchemeReadResponse.  # noqa: E501
        :type: DocumentVersion
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    @property
    def workflows_for_issue_types(self):
        """Gets the workflows_for_issue_types of this WorkflowSchemeReadResponse.  # noqa: E501

        Mappings from workflows to issue types.  # noqa: E501

        :return: The workflows_for_issue_types of this WorkflowSchemeReadResponse.  # noqa: E501
        :rtype: list[WorkflowMetadataAndIssueTypeRestModel]
        """
        return self._workflows_for_issue_types

    @workflows_for_issue_types.setter
    def workflows_for_issue_types(self, workflows_for_issue_types):
        """Sets the workflows_for_issue_types of this WorkflowSchemeReadResponse.

        Mappings from workflows to issue types.  # noqa: E501

        :param workflows_for_issue_types: The workflows_for_issue_types of this WorkflowSchemeReadResponse.  # noqa: E501
        :type: list[WorkflowMetadataAndIssueTypeRestModel]
        """
        if workflows_for_issue_types is None:
            raise ValueError("Invalid value for `workflows_for_issue_types`, must not be `None`")  # noqa: E501

        self._workflows_for_issue_types = workflows_for_issue_types

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WorkflowSchemeReadResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorkflowSchemeReadResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
