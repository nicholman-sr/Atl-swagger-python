# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from jira_client.api_client import ApiClient


class IssueSecuritySchemesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_security_level(self, body, scheme_id, **kwargs):  # noqa: E501
        """Add issue security levels  # noqa: E501

        Adds levels and levels' members to the issue security scheme. You can add up to 100 levels per request.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_security_level(body, scheme_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddSecuritySchemeLevelsRequestBean body: (required)
        :param str scheme_id: The ID of the issue security scheme. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_security_level_with_http_info(body, scheme_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_security_level_with_http_info(body, scheme_id, **kwargs)  # noqa: E501
            return data

    def add_security_level_with_http_info(self, body, scheme_id, **kwargs):  # noqa: E501
        """Add issue security levels  # noqa: E501

        Adds levels and levels' members to the issue security scheme. You can add up to 100 levels per request.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_security_level_with_http_info(body, scheme_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddSecuritySchemeLevelsRequestBean body: (required)
        :param str scheme_id: The ID of the issue security scheme. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'scheme_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_security_level" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_security_level`")  # noqa: E501
        # verify the required parameter 'scheme_id' is set
        if ('scheme_id' not in params or
                params['scheme_id'] is None):
            raise ValueError("Missing the required parameter `scheme_id` when calling `add_security_level`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'scheme_id' in params:
            path_params['schemeId'] = params['scheme_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rest/api/3/issuesecurityschemes/{schemeId}/level', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_security_level_members(self, body, scheme_id, level_id, **kwargs):  # noqa: E501
        """Add issue security level members  # noqa: E501

        Adds members to the issue security level. You can add up to 100 members per request.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_security_level_members(body, scheme_id, level_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SecuritySchemeMembersRequest body: (required)
        :param str scheme_id: The ID of the issue security scheme. (required)
        :param str level_id: The ID of the issue security level. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_security_level_members_with_http_info(body, scheme_id, level_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_security_level_members_with_http_info(body, scheme_id, level_id, **kwargs)  # noqa: E501
            return data

    def add_security_level_members_with_http_info(self, body, scheme_id, level_id, **kwargs):  # noqa: E501
        """Add issue security level members  # noqa: E501

        Adds members to the issue security level. You can add up to 100 members per request.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_security_level_members_with_http_info(body, scheme_id, level_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SecuritySchemeMembersRequest body: (required)
        :param str scheme_id: The ID of the issue security scheme. (required)
        :param str level_id: The ID of the issue security level. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'scheme_id', 'level_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_security_level_members" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_security_level_members`")  # noqa: E501
        # verify the required parameter 'scheme_id' is set
        if ('scheme_id' not in params or
                params['scheme_id'] is None):
            raise ValueError("Missing the required parameter `scheme_id` when calling `add_security_level_members`")  # noqa: E501
        # verify the required parameter 'level_id' is set
        if ('level_id' not in params or
                params['level_id'] is None):
            raise ValueError("Missing the required parameter `level_id` when calling `add_security_level_members`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'scheme_id' in params:
            path_params['schemeId'] = params['scheme_id']  # noqa: E501
        if 'level_id' in params:
            path_params['levelId'] = params['level_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rest/api/3/issuesecurityschemes/{schemeId}/level/{levelId}/member', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def associate_schemes_to_projects(self, body, **kwargs):  # noqa: E501
        """Associate security scheme to project  # noqa: E501

        Associates an issue security scheme with a project and remaps security levels of issues to the new levels, if provided.  This operation is [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.associate_schemes_to_projects(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AssociateSecuritySchemeWithProjectDetails body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.associate_schemes_to_projects_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.associate_schemes_to_projects_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def associate_schemes_to_projects_with_http_info(self, body, **kwargs):  # noqa: E501
        """Associate security scheme to project  # noqa: E501

        Associates an issue security scheme with a project and remaps security levels of issues to the new levels, if provided.  This operation is [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.associate_schemes_to_projects_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AssociateSecuritySchemeWithProjectDetails body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method associate_schemes_to_projects" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `associate_schemes_to_projects`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rest/api/3/issuesecurityschemes/project', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_issue_security_scheme(self, body, **kwargs):  # noqa: E501
        """Create issue security scheme  # noqa: E501

        Creates a security scheme with security scheme levels and levels' members. You can create up to 100 security scheme levels and security scheme levels' members per request.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_issue_security_scheme(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param dict(str, object) body: (required)
        :return: SecuritySchemeId
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_issue_security_scheme_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_issue_security_scheme_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_issue_security_scheme_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create issue security scheme  # noqa: E501

        Creates a security scheme with security scheme levels and levels' members. You can create up to 100 security scheme levels and security scheme levels' members per request.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_issue_security_scheme_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param dict(str, object) body: (required)
        :return: SecuritySchemeId
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_issue_security_scheme" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_issue_security_scheme`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rest/api/3/issuesecurityschemes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SecuritySchemeId',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_security_scheme(self, scheme_id, **kwargs):  # noqa: E501
        """Delete issue security scheme  # noqa: E501

        Deletes an issue security scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_security_scheme(scheme_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scheme_id: The ID of the issue security scheme. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_security_scheme_with_http_info(scheme_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_security_scheme_with_http_info(scheme_id, **kwargs)  # noqa: E501
            return data

    def delete_security_scheme_with_http_info(self, scheme_id, **kwargs):  # noqa: E501
        """Delete issue security scheme  # noqa: E501

        Deletes an issue security scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_security_scheme_with_http_info(scheme_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scheme_id: The ID of the issue security scheme. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['scheme_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_security_scheme" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'scheme_id' is set
        if ('scheme_id' not in params or
                params['scheme_id'] is None):
            raise ValueError("Missing the required parameter `scheme_id` when calling `delete_security_scheme`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'scheme_id' in params:
            path_params['schemeId'] = params['scheme_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rest/api/3/issuesecurityschemes/{schemeId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_issue_security_scheme(self, id, **kwargs):  # noqa: E501
        """Get issue security scheme  # noqa: E501

        Returns an issue security scheme along with its security levels.  **[Permissions](#permissions) required:**   *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  *  *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for a project that uses the requested issue security scheme.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_issue_security_scheme(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The ID of the issue security scheme. Use the [Get issue security schemes](#api-rest-api-3-issuesecurityschemes-get) operation to get a list of issue security scheme IDs. (required)
        :return: SecurityScheme
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_issue_security_scheme_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_issue_security_scheme_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_issue_security_scheme_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get issue security scheme  # noqa: E501

        Returns an issue security scheme along with its security levels.  **[Permissions](#permissions) required:**   *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  *  *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for a project that uses the requested issue security scheme.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_issue_security_scheme_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The ID of the issue security scheme. Use the [Get issue security schemes](#api-rest-api-3-issuesecurityschemes-get) operation to get a list of issue security scheme IDs. (required)
        :return: SecurityScheme
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_issue_security_scheme" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_issue_security_scheme`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rest/api/3/issuesecurityschemes/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SecurityScheme',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_issue_security_schemes(self, **kwargs):  # noqa: E501
        """Get issue security schemes  # noqa: E501

        Returns all [issue security schemes](https://confluence.atlassian.com/x/J4lKLg).  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_issue_security_schemes(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: SecuritySchemes
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_issue_security_schemes_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_issue_security_schemes_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_issue_security_schemes_with_http_info(self, **kwargs):  # noqa: E501
        """Get issue security schemes  # noqa: E501

        Returns all [issue security schemes](https://confluence.atlassian.com/x/J4lKLg).  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_issue_security_schemes_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: SecuritySchemes
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_issue_security_schemes" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rest/api/3/issuesecurityschemes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SecuritySchemes',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_security_level_members(self, **kwargs):  # noqa: E501
        """Get issue security level members  # noqa: E501

        Returns a [paginated](#pagination) list of issue security level members.  Only issue security level members in the context of classic projects are returned.  Filtering using parameters is inclusive: if you specify both security scheme IDs and level IDs, the result will include all issue security level members from the specified schemes and levels.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_security_level_members(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_at: The index of the first item to return in a page of results (page offset).
        :param str max_results: The maximum number of items to return per page.
        :param list[str] id: The list of issue security level member IDs. To include multiple issue security level members separate IDs with an ampersand: `id=10000&id=10001`.
        :param list[str] scheme_id: The list of issue security scheme IDs. To include multiple issue security schemes separate IDs with an ampersand: `schemeId=10000&schemeId=10001`.
        :param list[str] level_id: The list of issue security level IDs. To include multiple issue security levels separate IDs with an ampersand: `levelId=10000&levelId=10001`.
        :param str expand: Use expand to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:   *  `all` Returns all expandable information  *  `field` Returns information about the custom field granted the permission  *  `group` Returns information about the group that is granted the permission  *  `projectRole` Returns information about the project role granted the permission  *  `user` Returns information about the user who is granted the permission
        :return: PageBeanSecurityLevelMember
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_security_level_members_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_security_level_members_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_security_level_members_with_http_info(self, **kwargs):  # noqa: E501
        """Get issue security level members  # noqa: E501

        Returns a [paginated](#pagination) list of issue security level members.  Only issue security level members in the context of classic projects are returned.  Filtering using parameters is inclusive: if you specify both security scheme IDs and level IDs, the result will include all issue security level members from the specified schemes and levels.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_security_level_members_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_at: The index of the first item to return in a page of results (page offset).
        :param str max_results: The maximum number of items to return per page.
        :param list[str] id: The list of issue security level member IDs. To include multiple issue security level members separate IDs with an ampersand: `id=10000&id=10001`.
        :param list[str] scheme_id: The list of issue security scheme IDs. To include multiple issue security schemes separate IDs with an ampersand: `schemeId=10000&schemeId=10001`.
        :param list[str] level_id: The list of issue security level IDs. To include multiple issue security levels separate IDs with an ampersand: `levelId=10000&levelId=10001`.
        :param str expand: Use expand to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:   *  `all` Returns all expandable information  *  `field` Returns information about the custom field granted the permission  *  `group` Returns information about the group that is granted the permission  *  `projectRole` Returns information about the project role granted the permission  *  `user` Returns information about the user who is granted the permission
        :return: PageBeanSecurityLevelMember
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_at', 'max_results', 'id', 'scheme_id', 'level_id', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_security_level_members" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_at' in params:
            query_params.append(('startAt', params['start_at']))  # noqa: E501
        if 'max_results' in params:
            query_params.append(('maxResults', params['max_results']))  # noqa: E501
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
            collection_formats['id'] = 'multi'  # noqa: E501
        if 'scheme_id' in params:
            query_params.append(('schemeId', params['scheme_id']))  # noqa: E501
            collection_formats['schemeId'] = 'multi'  # noqa: E501
        if 'level_id' in params:
            query_params.append(('levelId', params['level_id']))  # noqa: E501
            collection_formats['levelId'] = 'multi'  # noqa: E501
        if 'expand' in params:
            query_params.append(('expand', params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rest/api/3/issuesecurityschemes/level/member', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PageBeanSecurityLevelMember',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_security_levels(self, **kwargs):  # noqa: E501
        """Get issue security levels  # noqa: E501

        Returns a [paginated](#pagination) list of issue security levels.  Only issue security levels in the context of classic projects are returned.  Filtering using IDs is inclusive: if you specify both security scheme IDs and level IDs, the result will include both specified issue security levels and all issue security levels from the specified schemes.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_security_levels(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_at: The index of the first item to return in a page of results (page offset).
        :param str max_results: The maximum number of items to return per page.
        :param list[str] id: The list of issue security scheme level IDs. To include multiple issue security levels, separate IDs with an ampersand: `id=10000&id=10001`.
        :param list[str] scheme_id: The list of issue security scheme IDs. To include multiple issue security schemes, separate IDs with an ampersand: `schemeId=10000&schemeId=10001`.
        :param bool only_default: When set to true, returns multiple default levels for each security scheme containing a default. If you provide scheme and level IDs not associated with the default, returns an empty page. The default value is false.
        :return: PageBeanSecurityLevel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_security_levels_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_security_levels_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_security_levels_with_http_info(self, **kwargs):  # noqa: E501
        """Get issue security levels  # noqa: E501

        Returns a [paginated](#pagination) list of issue security levels.  Only issue security levels in the context of classic projects are returned.  Filtering using IDs is inclusive: if you specify both security scheme IDs and level IDs, the result will include both specified issue security levels and all issue security levels from the specified schemes.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_security_levels_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_at: The index of the first item to return in a page of results (page offset).
        :param str max_results: The maximum number of items to return per page.
        :param list[str] id: The list of issue security scheme level IDs. To include multiple issue security levels, separate IDs with an ampersand: `id=10000&id=10001`.
        :param list[str] scheme_id: The list of issue security scheme IDs. To include multiple issue security schemes, separate IDs with an ampersand: `schemeId=10000&schemeId=10001`.
        :param bool only_default: When set to true, returns multiple default levels for each security scheme containing a default. If you provide scheme and level IDs not associated with the default, returns an empty page. The default value is false.
        :return: PageBeanSecurityLevel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_at', 'max_results', 'id', 'scheme_id', 'only_default']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_security_levels" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_at' in params:
            query_params.append(('startAt', params['start_at']))  # noqa: E501
        if 'max_results' in params:
            query_params.append(('maxResults', params['max_results']))  # noqa: E501
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
            collection_formats['id'] = 'multi'  # noqa: E501
        if 'scheme_id' in params:
            query_params.append(('schemeId', params['scheme_id']))  # noqa: E501
            collection_formats['schemeId'] = 'multi'  # noqa: E501
        if 'only_default' in params:
            query_params.append(('onlyDefault', params['only_default']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rest/api/3/issuesecurityschemes/level', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PageBeanSecurityLevel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_level(self, scheme_id, level_id, **kwargs):  # noqa: E501
        """Remove issue security level  # noqa: E501

        Deletes an issue security level.  This operation is [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_level(scheme_id, level_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scheme_id: The ID of the issue security scheme. (required)
        :param str level_id: The ID of the issue security level to remove. (required)
        :param str replace_with: The ID of the issue security level that will replace the currently selected level.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.remove_level_with_http_info(scheme_id, level_id, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_level_with_http_info(scheme_id, level_id, **kwargs)  # noqa: E501
            return data

    def remove_level_with_http_info(self, scheme_id, level_id, **kwargs):  # noqa: E501
        """Remove issue security level  # noqa: E501

        Deletes an issue security level.  This operation is [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_level_with_http_info(scheme_id, level_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scheme_id: The ID of the issue security scheme. (required)
        :param str level_id: The ID of the issue security level to remove. (required)
        :param str replace_with: The ID of the issue security level that will replace the currently selected level.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['scheme_id', 'level_id', 'replace_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_level" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'scheme_id' is set
        if ('scheme_id' not in params or
                params['scheme_id'] is None):
            raise ValueError("Missing the required parameter `scheme_id` when calling `remove_level`")  # noqa: E501
        # verify the required parameter 'level_id' is set
        if ('level_id' not in params or
                params['level_id'] is None):
            raise ValueError("Missing the required parameter `level_id` when calling `remove_level`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'scheme_id' in params:
            path_params['schemeId'] = params['scheme_id']  # noqa: E501
        if 'level_id' in params:
            path_params['levelId'] = params['level_id']  # noqa: E501

        query_params = []
        if 'replace_with' in params:
            query_params.append(('replaceWith', params['replace_with']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rest/api/3/issuesecurityschemes/{schemeId}/level/{levelId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_member_from_security_level(self, scheme_id, level_id, member_id, **kwargs):  # noqa: E501
        """Remove member from issue security level  # noqa: E501

        Removes an issue security level member from an issue security scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_member_from_security_level(scheme_id, level_id, member_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scheme_id: The ID of the issue security scheme. (required)
        :param str level_id: The ID of the issue security level. (required)
        :param str member_id: The ID of the issue security level member to be removed. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.remove_member_from_security_level_with_http_info(scheme_id, level_id, member_id, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_member_from_security_level_with_http_info(scheme_id, level_id, member_id, **kwargs)  # noqa: E501
            return data

    def remove_member_from_security_level_with_http_info(self, scheme_id, level_id, member_id, **kwargs):  # noqa: E501
        """Remove member from issue security level  # noqa: E501

        Removes an issue security level member from an issue security scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_member_from_security_level_with_http_info(scheme_id, level_id, member_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scheme_id: The ID of the issue security scheme. (required)
        :param str level_id: The ID of the issue security level. (required)
        :param str member_id: The ID of the issue security level member to be removed. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['scheme_id', 'level_id', 'member_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_member_from_security_level" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'scheme_id' is set
        if ('scheme_id' not in params or
                params['scheme_id'] is None):
            raise ValueError("Missing the required parameter `scheme_id` when calling `remove_member_from_security_level`")  # noqa: E501
        # verify the required parameter 'level_id' is set
        if ('level_id' not in params or
                params['level_id'] is None):
            raise ValueError("Missing the required parameter `level_id` when calling `remove_member_from_security_level`")  # noqa: E501
        # verify the required parameter 'member_id' is set
        if ('member_id' not in params or
                params['member_id'] is None):
            raise ValueError("Missing the required parameter `member_id` when calling `remove_member_from_security_level`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'scheme_id' in params:
            path_params['schemeId'] = params['scheme_id']  # noqa: E501
        if 'level_id' in params:
            path_params['levelId'] = params['level_id']  # noqa: E501
        if 'member_id' in params:
            path_params['memberId'] = params['member_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rest/api/3/issuesecurityschemes/{schemeId}/level/{levelId}/member/{memberId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_projects_using_security_schemes(self, **kwargs):  # noqa: E501
        """Get projects using issue security schemes  # noqa: E501

        Returns a [paginated](#pagination) mapping of projects that are using security schemes. You can provide either one or multiple security scheme IDs or project IDs to filter by. If you don't provide any, this will return a list of all mappings. Only issue security schemes in the context of classic projects are supported. **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_projects_using_security_schemes(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_at: The index of the first item to return in a page of results (page offset).
        :param str max_results: The maximum number of items to return per page.
        :param list[str] issue_security_scheme_id: The list of security scheme IDs to be filtered out.
        :param list[str] project_id: The list of project IDs to be filtered out.
        :return: PageBeanIssueSecuritySchemeToProjectMapping
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.search_projects_using_security_schemes_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.search_projects_using_security_schemes_with_http_info(**kwargs)  # noqa: E501
            return data

    def search_projects_using_security_schemes_with_http_info(self, **kwargs):  # noqa: E501
        """Get projects using issue security schemes  # noqa: E501

        Returns a [paginated](#pagination) mapping of projects that are using security schemes. You can provide either one or multiple security scheme IDs or project IDs to filter by. If you don't provide any, this will return a list of all mappings. Only issue security schemes in the context of classic projects are supported. **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_projects_using_security_schemes_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_at: The index of the first item to return in a page of results (page offset).
        :param str max_results: The maximum number of items to return per page.
        :param list[str] issue_security_scheme_id: The list of security scheme IDs to be filtered out.
        :param list[str] project_id: The list of project IDs to be filtered out.
        :return: PageBeanIssueSecuritySchemeToProjectMapping
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_at', 'max_results', 'issue_security_scheme_id', 'project_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_projects_using_security_schemes" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_at' in params:
            query_params.append(('startAt', params['start_at']))  # noqa: E501
        if 'max_results' in params:
            query_params.append(('maxResults', params['max_results']))  # noqa: E501
        if 'issue_security_scheme_id' in params:
            query_params.append(('issueSecuritySchemeId', params['issue_security_scheme_id']))  # noqa: E501
            collection_formats['issueSecuritySchemeId'] = 'multi'  # noqa: E501
        if 'project_id' in params:
            query_params.append(('projectId', params['project_id']))  # noqa: E501
            collection_formats['projectId'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rest/api/3/issuesecurityschemes/project', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PageBeanIssueSecuritySchemeToProjectMapping',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_security_schemes(self, **kwargs):  # noqa: E501
        """Search issue security schemes  # noqa: E501

        Returns a [paginated](#pagination) list of issue security schemes.   If you specify the project ID parameter, the result will contain issue security schemes and related project IDs you filter by. Use \\{@link IssueSecuritySchemeResource\\#searchProjectsUsingSecuritySchemes(String, String, Set, Set)\\} to obtain all projects related to scheme.  Only issue security schemes in the context of classic projects are returned.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_security_schemes(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_at: The index of the first item to return in a page of results (page offset).
        :param str max_results: The maximum number of items to return per page.
        :param list[str] id: The list of issue security scheme IDs. To include multiple issue security scheme IDs, separate IDs with an ampersand: `id=10000&id=10001`.
        :param list[str] project_id: The list of project IDs. To include multiple project IDs, separate IDs with an ampersand: `projectId=10000&projectId=10001`.
        :return: PageBeanSecuritySchemeWithProjects
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.search_security_schemes_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.search_security_schemes_with_http_info(**kwargs)  # noqa: E501
            return data

    def search_security_schemes_with_http_info(self, **kwargs):  # noqa: E501
        """Search issue security schemes  # noqa: E501

        Returns a [paginated](#pagination) list of issue security schemes.   If you specify the project ID parameter, the result will contain issue security schemes and related project IDs you filter by. Use \\{@link IssueSecuritySchemeResource\\#searchProjectsUsingSecuritySchemes(String, String, Set, Set)\\} to obtain all projects related to scheme.  Only issue security schemes in the context of classic projects are returned.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_security_schemes_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_at: The index of the first item to return in a page of results (page offset).
        :param str max_results: The maximum number of items to return per page.
        :param list[str] id: The list of issue security scheme IDs. To include multiple issue security scheme IDs, separate IDs with an ampersand: `id=10000&id=10001`.
        :param list[str] project_id: The list of project IDs. To include multiple project IDs, separate IDs with an ampersand: `projectId=10000&projectId=10001`.
        :return: PageBeanSecuritySchemeWithProjects
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_at', 'max_results', 'id', 'project_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_security_schemes" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_at' in params:
            query_params.append(('startAt', params['start_at']))  # noqa: E501
        if 'max_results' in params:
            query_params.append(('maxResults', params['max_results']))  # noqa: E501
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
            collection_formats['id'] = 'multi'  # noqa: E501
        if 'project_id' in params:
            query_params.append(('projectId', params['project_id']))  # noqa: E501
            collection_formats['projectId'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rest/api/3/issuesecurityschemes/search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PageBeanSecuritySchemeWithProjects',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_default_levels(self, body, **kwargs):  # noqa: E501
        """Set default issue security levels  # noqa: E501

        Sets default issue security levels for schemes.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_default_levels(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param dict(str, object) body: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.set_default_levels_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.set_default_levels_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def set_default_levels_with_http_info(self, body, **kwargs):  # noqa: E501
        """Set default issue security levels  # noqa: E501

        Sets default issue security levels for schemes.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_default_levels_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param dict(str, object) body: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_default_levels" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `set_default_levels`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rest/api/3/issuesecurityschemes/level/default', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_issue_security_scheme(self, body, id, **kwargs):  # noqa: E501
        """Update issue security scheme  # noqa: E501

        Updates the issue security scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_issue_security_scheme(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateIssueSecuritySchemeRequestBean body: (required)
        :param str id: The ID of the issue security scheme. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_issue_security_scheme_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_issue_security_scheme_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def update_issue_security_scheme_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """Update issue security scheme  # noqa: E501

        Updates the issue security scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_issue_security_scheme_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateIssueSecuritySchemeRequestBean body: (required)
        :param str id: The ID of the issue security scheme. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_issue_security_scheme" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_issue_security_scheme`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_issue_security_scheme`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rest/api/3/issuesecurityschemes/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_security_level(self, body, scheme_id, level_id, **kwargs):  # noqa: E501
        """Update issue security level  # noqa: E501

        Updates the issue security level.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_security_level(body, scheme_id, level_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param dict(str, object) body: (required)
        :param str scheme_id: The ID of the issue security scheme level belongs to. (required)
        :param str level_id: The ID of the issue security level to update. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_security_level_with_http_info(body, scheme_id, level_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_security_level_with_http_info(body, scheme_id, level_id, **kwargs)  # noqa: E501
            return data

    def update_security_level_with_http_info(self, body, scheme_id, level_id, **kwargs):  # noqa: E501
        """Update issue security level  # noqa: E501

        Updates the issue security level.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_security_level_with_http_info(body, scheme_id, level_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param dict(str, object) body: (required)
        :param str scheme_id: The ID of the issue security scheme level belongs to. (required)
        :param str level_id: The ID of the issue security level to update. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'scheme_id', 'level_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_security_level" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_security_level`")  # noqa: E501
        # verify the required parameter 'scheme_id' is set
        if ('scheme_id' not in params or
                params['scheme_id'] is None):
            raise ValueError("Missing the required parameter `scheme_id` when calling `update_security_level`")  # noqa: E501
        # verify the required parameter 'level_id' is set
        if ('level_id' not in params or
                params['level_id'] is None):
            raise ValueError("Missing the required parameter `level_id` when calling `update_security_level`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'scheme_id' in params:
            path_params['schemeId'] = params['scheme_id']  # noqa: E501
        if 'level_id' in params:
            path_params['levelId'] = params['level_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rest/api/3/issuesecurityschemes/{schemeId}/level/{levelId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
