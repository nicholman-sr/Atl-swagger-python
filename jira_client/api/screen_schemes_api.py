# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from jira_client.api_client import ApiClient


class ScreenSchemesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_screen_scheme(self, body, **kwargs):  # noqa: E501
        """Create screen scheme  # noqa: E501

        Creates a screen scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_screen_scheme(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ScreenSchemeDetails body: (required)
        :return: ScreenSchemeId
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_screen_scheme_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_screen_scheme_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_screen_scheme_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create screen scheme  # noqa: E501

        Creates a screen scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_screen_scheme_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ScreenSchemeDetails body: (required)
        :return: ScreenSchemeId
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_screen_scheme" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_screen_scheme`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rest/api/3/screenscheme', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ScreenSchemeId',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_screen_scheme(self, screen_scheme_id, **kwargs):  # noqa: E501
        """Delete screen scheme  # noqa: E501

        Deletes a screen scheme. A screen scheme cannot be deleted if it is used in an issue type screen scheme.  Only screens schemes used in classic projects can be deleted.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_screen_scheme(screen_scheme_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str screen_scheme_id: The ID of the screen scheme. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_screen_scheme_with_http_info(screen_scheme_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_screen_scheme_with_http_info(screen_scheme_id, **kwargs)  # noqa: E501
            return data

    def delete_screen_scheme_with_http_info(self, screen_scheme_id, **kwargs):  # noqa: E501
        """Delete screen scheme  # noqa: E501

        Deletes a screen scheme. A screen scheme cannot be deleted if it is used in an issue type screen scheme.  Only screens schemes used in classic projects can be deleted.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_screen_scheme_with_http_info(screen_scheme_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str screen_scheme_id: The ID of the screen scheme. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['screen_scheme_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_screen_scheme" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'screen_scheme_id' is set
        if ('screen_scheme_id' not in params or
                params['screen_scheme_id'] is None):
            raise ValueError("Missing the required parameter `screen_scheme_id` when calling `delete_screen_scheme`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'screen_scheme_id' in params:
            path_params['screenSchemeId'] = params['screen_scheme_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rest/api/3/screenscheme/{screenSchemeId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_screen_schemes(self, **kwargs):  # noqa: E501
        """Get screen schemes  # noqa: E501

        Returns a [paginated](#pagination) list of screen schemes.  Only screen schemes used in classic projects are returned.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_screen_schemes(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int start_at: The index of the first item to return in a page of results (page offset).
        :param int max_results: The maximum number of items to return per page.
        :param list[int] id: The list of screen scheme IDs. To include multiple IDs, provide an ampersand-separated list. For example, `id=10000&id=10001`.
        :param str expand: Use [expand](#expansion) include additional information in the response. This parameter accepts `issueTypeScreenSchemes` that, for each screen schemes, returns information about the issue type screen scheme the screen scheme is assigned to.
        :param str query_string: String used to perform a case-insensitive partial match with screen scheme name.
        :param str order_by: [Order](#ordering) the results by a field:   *  `id` Sorts by screen scheme ID.  *  `name` Sorts by screen scheme name.
        :return: PageBeanScreenScheme
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_screen_schemes_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_screen_schemes_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_screen_schemes_with_http_info(self, **kwargs):  # noqa: E501
        """Get screen schemes  # noqa: E501

        Returns a [paginated](#pagination) list of screen schemes.  Only screen schemes used in classic projects are returned.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_screen_schemes_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int start_at: The index of the first item to return in a page of results (page offset).
        :param int max_results: The maximum number of items to return per page.
        :param list[int] id: The list of screen scheme IDs. To include multiple IDs, provide an ampersand-separated list. For example, `id=10000&id=10001`.
        :param str expand: Use [expand](#expansion) include additional information in the response. This parameter accepts `issueTypeScreenSchemes` that, for each screen schemes, returns information about the issue type screen scheme the screen scheme is assigned to.
        :param str query_string: String used to perform a case-insensitive partial match with screen scheme name.
        :param str order_by: [Order](#ordering) the results by a field:   *  `id` Sorts by screen scheme ID.  *  `name` Sorts by screen scheme name.
        :return: PageBeanScreenScheme
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_at', 'max_results', 'id', 'expand', 'query_string', 'order_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_screen_schemes" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_at' in params:
            query_params.append(('startAt', params['start_at']))  # noqa: E501
        if 'max_results' in params:
            query_params.append(('maxResults', params['max_results']))  # noqa: E501
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
            collection_formats['id'] = 'multi'  # noqa: E501
        if 'expand' in params:
            query_params.append(('expand', params['expand']))  # noqa: E501
        if 'query_string' in params:
            query_params.append(('queryString', params['query_string']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('orderBy', params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rest/api/3/screenscheme', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PageBeanScreenScheme',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_screen_scheme(self, body, screen_scheme_id, **kwargs):  # noqa: E501
        """Update screen scheme  # noqa: E501

        Updates a screen scheme. Only screen schemes used in classic projects can be updated.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_screen_scheme(body, screen_scheme_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateScreenSchemeDetails body: The screen scheme update details. (required)
        :param str screen_scheme_id: The ID of the screen scheme. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_screen_scheme_with_http_info(body, screen_scheme_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_screen_scheme_with_http_info(body, screen_scheme_id, **kwargs)  # noqa: E501
            return data

    def update_screen_scheme_with_http_info(self, body, screen_scheme_id, **kwargs):  # noqa: E501
        """Update screen scheme  # noqa: E501

        Updates a screen scheme. Only screen schemes used in classic projects can be updated.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_screen_scheme_with_http_info(body, screen_scheme_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateScreenSchemeDetails body: The screen scheme update details. (required)
        :param str screen_scheme_id: The ID of the screen scheme. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'screen_scheme_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_screen_scheme" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_screen_scheme`")  # noqa: E501
        # verify the required parameter 'screen_scheme_id' is set
        if ('screen_scheme_id' not in params or
                params['screen_scheme_id'] is None):
            raise ValueError("Missing the required parameter `screen_scheme_id` when calling `update_screen_scheme`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'screen_scheme_id' in params:
            path_params['screenSchemeId'] = params['screen_scheme_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rest/api/3/screenscheme/{screenSchemeId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
