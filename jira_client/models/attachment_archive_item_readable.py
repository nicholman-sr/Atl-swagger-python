# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AttachmentArchiveItemReadable(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'index': 'int',
        'label': 'str',
        'media_type': 'str',
        'path': 'str',
        'size': 'str'
    }

    attribute_map = {
        'index': 'index',
        'label': 'label',
        'media_type': 'mediaType',
        'path': 'path',
        'size': 'size'
    }

    def __init__(self, index=None, label=None, media_type=None, path=None, size=None):  # noqa: E501
        """AttachmentArchiveItemReadable - a model defined in Swagger"""  # noqa: E501
        self._index = None
        self._label = None
        self._media_type = None
        self._path = None
        self._size = None
        self.discriminator = None
        if index is not None:
            self.index = index
        if label is not None:
            self.label = label
        if media_type is not None:
            self.media_type = media_type
        if path is not None:
            self.path = path
        if size is not None:
            self.size = size

    @property
    def index(self):
        """Gets the index of this AttachmentArchiveItemReadable.  # noqa: E501

        The position of the item within the archive.  # noqa: E501

        :return: The index of this AttachmentArchiveItemReadable.  # noqa: E501
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this AttachmentArchiveItemReadable.

        The position of the item within the archive.  # noqa: E501

        :param index: The index of this AttachmentArchiveItemReadable.  # noqa: E501
        :type: int
        """

        self._index = index

    @property
    def label(self):
        """Gets the label of this AttachmentArchiveItemReadable.  # noqa: E501

        The label for the archive item.  # noqa: E501

        :return: The label of this AttachmentArchiveItemReadable.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this AttachmentArchiveItemReadable.

        The label for the archive item.  # noqa: E501

        :param label: The label of this AttachmentArchiveItemReadable.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def media_type(self):
        """Gets the media_type of this AttachmentArchiveItemReadable.  # noqa: E501

        The MIME type of the archive item.  # noqa: E501

        :return: The media_type of this AttachmentArchiveItemReadable.  # noqa: E501
        :rtype: str
        """
        return self._media_type

    @media_type.setter
    def media_type(self, media_type):
        """Sets the media_type of this AttachmentArchiveItemReadable.

        The MIME type of the archive item.  # noqa: E501

        :param media_type: The media_type of this AttachmentArchiveItemReadable.  # noqa: E501
        :type: str
        """

        self._media_type = media_type

    @property
    def path(self):
        """Gets the path of this AttachmentArchiveItemReadable.  # noqa: E501

        The path of the archive item.  # noqa: E501

        :return: The path of this AttachmentArchiveItemReadable.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this AttachmentArchiveItemReadable.

        The path of the archive item.  # noqa: E501

        :param path: The path of this AttachmentArchiveItemReadable.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def size(self):
        """Gets the size of this AttachmentArchiveItemReadable.  # noqa: E501

        The size of the archive item.  # noqa: E501

        :return: The size of this AttachmentArchiveItemReadable.  # noqa: E501
        :rtype: str
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this AttachmentArchiveItemReadable.

        The size of the archive item.  # noqa: E501

        :param size: The size of this AttachmentArchiveItemReadable.  # noqa: E501
        :type: str
        """

        self._size = size

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AttachmentArchiveItemReadable, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AttachmentArchiveItemReadable):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
