# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AuditRecordBean(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'associated_items': 'list[AssociatedItemBean]',
        'author_key': 'str',
        'category': 'str',
        'changed_values': 'list[ChangedValueBean]',
        'created': 'datetime',
        'description': 'str',
        'event_source': 'str',
        'id': 'int',
        'object_item': 'AssociatedItemBean',
        'remote_address': 'str',
        'summary': 'str'
    }

    attribute_map = {
        'associated_items': 'associatedItems',
        'author_key': 'authorKey',
        'category': 'category',
        'changed_values': 'changedValues',
        'created': 'created',
        'description': 'description',
        'event_source': 'eventSource',
        'id': 'id',
        'object_item': 'objectItem',
        'remote_address': 'remoteAddress',
        'summary': 'summary'
    }

    def __init__(self, associated_items=None, author_key=None, category=None, changed_values=None, created=None, description=None, event_source=None, id=None, object_item=None, remote_address=None, summary=None):  # noqa: E501
        """AuditRecordBean - a model defined in Swagger"""  # noqa: E501
        self._associated_items = None
        self._author_key = None
        self._category = None
        self._changed_values = None
        self._created = None
        self._description = None
        self._event_source = None
        self._id = None
        self._object_item = None
        self._remote_address = None
        self._summary = None
        self.discriminator = None
        if associated_items is not None:
            self.associated_items = associated_items
        if author_key is not None:
            self.author_key = author_key
        if category is not None:
            self.category = category
        if changed_values is not None:
            self.changed_values = changed_values
        if created is not None:
            self.created = created
        if description is not None:
            self.description = description
        if event_source is not None:
            self.event_source = event_source
        if id is not None:
            self.id = id
        if object_item is not None:
            self.object_item = object_item
        if remote_address is not None:
            self.remote_address = remote_address
        if summary is not None:
            self.summary = summary

    @property
    def associated_items(self):
        """Gets the associated_items of this AuditRecordBean.  # noqa: E501

        The list of items associated with the changed record.  # noqa: E501

        :return: The associated_items of this AuditRecordBean.  # noqa: E501
        :rtype: list[AssociatedItemBean]
        """
        return self._associated_items

    @associated_items.setter
    def associated_items(self, associated_items):
        """Sets the associated_items of this AuditRecordBean.

        The list of items associated with the changed record.  # noqa: E501

        :param associated_items: The associated_items of this AuditRecordBean.  # noqa: E501
        :type: list[AssociatedItemBean]
        """

        self._associated_items = associated_items

    @property
    def author_key(self):
        """Gets the author_key of this AuditRecordBean.  # noqa: E501

        Deprecated, use `authorAccountId` instead. The key of the user who created the audit record.  # noqa: E501

        :return: The author_key of this AuditRecordBean.  # noqa: E501
        :rtype: str
        """
        return self._author_key

    @author_key.setter
    def author_key(self, author_key):
        """Sets the author_key of this AuditRecordBean.

        Deprecated, use `authorAccountId` instead. The key of the user who created the audit record.  # noqa: E501

        :param author_key: The author_key of this AuditRecordBean.  # noqa: E501
        :type: str
        """

        self._author_key = author_key

    @property
    def category(self):
        """Gets the category of this AuditRecordBean.  # noqa: E501

        The category of the audit record. For a list of these categories, see the help article [Auditing in Jira applications](https://confluence.atlassian.com/x/noXKM).  # noqa: E501

        :return: The category of this AuditRecordBean.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this AuditRecordBean.

        The category of the audit record. For a list of these categories, see the help article [Auditing in Jira applications](https://confluence.atlassian.com/x/noXKM).  # noqa: E501

        :param category: The category of this AuditRecordBean.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def changed_values(self):
        """Gets the changed_values of this AuditRecordBean.  # noqa: E501

        The list of values changed in the record event.  # noqa: E501

        :return: The changed_values of this AuditRecordBean.  # noqa: E501
        :rtype: list[ChangedValueBean]
        """
        return self._changed_values

    @changed_values.setter
    def changed_values(self, changed_values):
        """Sets the changed_values of this AuditRecordBean.

        The list of values changed in the record event.  # noqa: E501

        :param changed_values: The changed_values of this AuditRecordBean.  # noqa: E501
        :type: list[ChangedValueBean]
        """

        self._changed_values = changed_values

    @property
    def created(self):
        """Gets the created of this AuditRecordBean.  # noqa: E501

        The date and time on which the audit record was created.  # noqa: E501

        :return: The created of this AuditRecordBean.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this AuditRecordBean.

        The date and time on which the audit record was created.  # noqa: E501

        :param created: The created of this AuditRecordBean.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def description(self):
        """Gets the description of this AuditRecordBean.  # noqa: E501

        The description of the audit record.  # noqa: E501

        :return: The description of this AuditRecordBean.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AuditRecordBean.

        The description of the audit record.  # noqa: E501

        :param description: The description of this AuditRecordBean.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def event_source(self):
        """Gets the event_source of this AuditRecordBean.  # noqa: E501

        The event the audit record originated from.  # noqa: E501

        :return: The event_source of this AuditRecordBean.  # noqa: E501
        :rtype: str
        """
        return self._event_source

    @event_source.setter
    def event_source(self, event_source):
        """Sets the event_source of this AuditRecordBean.

        The event the audit record originated from.  # noqa: E501

        :param event_source: The event_source of this AuditRecordBean.  # noqa: E501
        :type: str
        """

        self._event_source = event_source

    @property
    def id(self):
        """Gets the id of this AuditRecordBean.  # noqa: E501

        The ID of the audit record.  # noqa: E501

        :return: The id of this AuditRecordBean.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AuditRecordBean.

        The ID of the audit record.  # noqa: E501

        :param id: The id of this AuditRecordBean.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def object_item(self):
        """Gets the object_item of this AuditRecordBean.  # noqa: E501


        :return: The object_item of this AuditRecordBean.  # noqa: E501
        :rtype: AssociatedItemBean
        """
        return self._object_item

    @object_item.setter
    def object_item(self, object_item):
        """Sets the object_item of this AuditRecordBean.


        :param object_item: The object_item of this AuditRecordBean.  # noqa: E501
        :type: AssociatedItemBean
        """

        self._object_item = object_item

    @property
    def remote_address(self):
        """Gets the remote_address of this AuditRecordBean.  # noqa: E501

        The URL of the computer where the creation of the audit record was initiated.  # noqa: E501

        :return: The remote_address of this AuditRecordBean.  # noqa: E501
        :rtype: str
        """
        return self._remote_address

    @remote_address.setter
    def remote_address(self, remote_address):
        """Sets the remote_address of this AuditRecordBean.

        The URL of the computer where the creation of the audit record was initiated.  # noqa: E501

        :param remote_address: The remote_address of this AuditRecordBean.  # noqa: E501
        :type: str
        """

        self._remote_address = remote_address

    @property
    def summary(self):
        """Gets the summary of this AuditRecordBean.  # noqa: E501

        The summary of the audit record.  # noqa: E501

        :return: The summary of this AuditRecordBean.  # noqa: E501
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this AuditRecordBean.

        The summary of the audit record.  # noqa: E501

        :param summary: The summary of this AuditRecordBean.  # noqa: E501
        :type: str
        """

        self._summary = summary

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AuditRecordBean, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AuditRecordBean):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
