# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ChangeDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'field': 'str',
        'field_id': 'str',
        'fieldtype': 'str',
        '_from': 'str',
        'from_string': 'str',
        'to': 'str',
        'to_string': 'str'
    }

    attribute_map = {
        'field': 'field',
        'field_id': 'fieldId',
        'fieldtype': 'fieldtype',
        '_from': 'from',
        'from_string': 'fromString',
        'to': 'to',
        'to_string': 'toString'
    }

    def __init__(self, field=None, field_id=None, fieldtype=None, _from=None, from_string=None, to=None, to_string=None):  # noqa: E501
        """ChangeDetails - a model defined in Swagger"""  # noqa: E501
        self._field = None
        self._field_id = None
        self._fieldtype = None
        self.__from = None
        self._from_string = None
        self._to = None
        self._to_string = None
        self.discriminator = None
        if field is not None:
            self.field = field
        if field_id is not None:
            self.field_id = field_id
        if fieldtype is not None:
            self.fieldtype = fieldtype
        if _from is not None:
            self._from = _from
        if from_string is not None:
            self.from_string = from_string
        if to is not None:
            self.to = to
        if to_string is not None:
            self.to_string = to_string

    @property
    def field(self):
        """Gets the field of this ChangeDetails.  # noqa: E501

        The name of the field changed.  # noqa: E501

        :return: The field of this ChangeDetails.  # noqa: E501
        :rtype: str
        """
        return self._field

    @field.setter
    def field(self, field):
        """Sets the field of this ChangeDetails.

        The name of the field changed.  # noqa: E501

        :param field: The field of this ChangeDetails.  # noqa: E501
        :type: str
        """

        self._field = field

    @property
    def field_id(self):
        """Gets the field_id of this ChangeDetails.  # noqa: E501

        The ID of the field changed.  # noqa: E501

        :return: The field_id of this ChangeDetails.  # noqa: E501
        :rtype: str
        """
        return self._field_id

    @field_id.setter
    def field_id(self, field_id):
        """Sets the field_id of this ChangeDetails.

        The ID of the field changed.  # noqa: E501

        :param field_id: The field_id of this ChangeDetails.  # noqa: E501
        :type: str
        """

        self._field_id = field_id

    @property
    def fieldtype(self):
        """Gets the fieldtype of this ChangeDetails.  # noqa: E501

        The type of the field changed.  # noqa: E501

        :return: The fieldtype of this ChangeDetails.  # noqa: E501
        :rtype: str
        """
        return self._fieldtype

    @fieldtype.setter
    def fieldtype(self, fieldtype):
        """Sets the fieldtype of this ChangeDetails.

        The type of the field changed.  # noqa: E501

        :param fieldtype: The fieldtype of this ChangeDetails.  # noqa: E501
        :type: str
        """

        self._fieldtype = fieldtype

    @property
    def _from(self):
        """Gets the _from of this ChangeDetails.  # noqa: E501

        The details of the original value.  # noqa: E501

        :return: The _from of this ChangeDetails.  # noqa: E501
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this ChangeDetails.

        The details of the original value.  # noqa: E501

        :param _from: The _from of this ChangeDetails.  # noqa: E501
        :type: str
        """

        self.__from = _from

    @property
    def from_string(self):
        """Gets the from_string of this ChangeDetails.  # noqa: E501

        The details of the original value as a string.  # noqa: E501

        :return: The from_string of this ChangeDetails.  # noqa: E501
        :rtype: str
        """
        return self._from_string

    @from_string.setter
    def from_string(self, from_string):
        """Sets the from_string of this ChangeDetails.

        The details of the original value as a string.  # noqa: E501

        :param from_string: The from_string of this ChangeDetails.  # noqa: E501
        :type: str
        """

        self._from_string = from_string

    @property
    def to(self):
        """Gets the to of this ChangeDetails.  # noqa: E501

        The details of the new value.  # noqa: E501

        :return: The to of this ChangeDetails.  # noqa: E501
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this ChangeDetails.

        The details of the new value.  # noqa: E501

        :param to: The to of this ChangeDetails.  # noqa: E501
        :type: str
        """

        self._to = to

    @property
    def to_string(self):
        """Gets the to_string of this ChangeDetails.  # noqa: E501

        The details of the new value as a string.  # noqa: E501

        :return: The to_string of this ChangeDetails.  # noqa: E501
        :rtype: str
        """
        return self._to_string

    @to_string.setter
    def to_string(self, to_string):
        """Sets the to_string of this ChangeDetails.

        The details of the new value as a string.  # noqa: E501

        :param to_string: The to_string of this ChangeDetails.  # noqa: E501
        :type: str
        """

        self._to_string = to_string

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ChangeDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ChangeDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
