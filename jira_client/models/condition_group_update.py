# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ConditionGroupUpdate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'condition_groups': 'list[ConditionGroupUpdate]',
        'conditions': 'list[WorkflowRuleConfiguration]',
        'operation': 'str'
    }

    attribute_map = {
        'condition_groups': 'conditionGroups',
        'conditions': 'conditions',
        'operation': 'operation'
    }

    def __init__(self, condition_groups=None, conditions=None, operation=None):  # noqa: E501
        """ConditionGroupUpdate - a model defined in Swagger"""  # noqa: E501
        self._condition_groups = None
        self._conditions = None
        self._operation = None
        self.discriminator = None
        if condition_groups is not None:
            self.condition_groups = condition_groups
        if conditions is not None:
            self.conditions = conditions
        self.operation = operation

    @property
    def condition_groups(self):
        """Gets the condition_groups of this ConditionGroupUpdate.  # noqa: E501

        The nested conditions of the condition group.  # noqa: E501

        :return: The condition_groups of this ConditionGroupUpdate.  # noqa: E501
        :rtype: list[ConditionGroupUpdate]
        """
        return self._condition_groups

    @condition_groups.setter
    def condition_groups(self, condition_groups):
        """Sets the condition_groups of this ConditionGroupUpdate.

        The nested conditions of the condition group.  # noqa: E501

        :param condition_groups: The condition_groups of this ConditionGroupUpdate.  # noqa: E501
        :type: list[ConditionGroupUpdate]
        """

        self._condition_groups = condition_groups

    @property
    def conditions(self):
        """Gets the conditions of this ConditionGroupUpdate.  # noqa: E501

        The rules for this condition.  # noqa: E501

        :return: The conditions of this ConditionGroupUpdate.  # noqa: E501
        :rtype: list[WorkflowRuleConfiguration]
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this ConditionGroupUpdate.

        The rules for this condition.  # noqa: E501

        :param conditions: The conditions of this ConditionGroupUpdate.  # noqa: E501
        :type: list[WorkflowRuleConfiguration]
        """

        self._conditions = conditions

    @property
    def operation(self):
        """Gets the operation of this ConditionGroupUpdate.  # noqa: E501

        Determines how the conditions in the group are evaluated. Accepts either `ANY` or `ALL`. If `ANY` is used, at least one condition in the group must be true for the group to evaluate to true. If `ALL` is used, all conditions in the group must be true for the group to evaluate to true.  # noqa: E501

        :return: The operation of this ConditionGroupUpdate.  # noqa: E501
        :rtype: str
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this ConditionGroupUpdate.

        Determines how the conditions in the group are evaluated. Accepts either `ANY` or `ALL`. If `ANY` is used, at least one condition in the group must be true for the group to evaluate to true. If `ALL` is used, all conditions in the group must be true for the group to evaluate to true.  # noqa: E501

        :param operation: The operation of this ConditionGroupUpdate.  # noqa: E501
        :type: str
        """
        if operation is None:
            raise ValueError("Invalid value for `operation`, must not be `None`")  # noqa: E501
        allowed_values = ["ANY", "ALL"]  # noqa: E501
        if operation not in allowed_values:
            raise ValueError(
                "Invalid value for `operation` ({0}), must be one of {1}"  # noqa: E501
                .format(operation, allowed_values)
            )

        self._operation = operation

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConditionGroupUpdate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConditionGroupUpdate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
