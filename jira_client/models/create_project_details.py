# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateProjectDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'assignee_type': 'str',
        'avatar_id': 'int',
        'category_id': 'int',
        'description': 'str',
        'field_configuration_scheme': 'int',
        'issue_security_scheme': 'int',
        'issue_type_scheme': 'int',
        'issue_type_screen_scheme': 'int',
        'key': 'str',
        'lead': 'str',
        'lead_account_id': 'str',
        'name': 'str',
        'notification_scheme': 'int',
        'permission_scheme': 'int',
        'project_template_key': 'str',
        'project_type_key': 'str',
        'url': 'str',
        'workflow_scheme': 'int'
    }

    attribute_map = {
        'assignee_type': 'assigneeType',
        'avatar_id': 'avatarId',
        'category_id': 'categoryId',
        'description': 'description',
        'field_configuration_scheme': 'fieldConfigurationScheme',
        'issue_security_scheme': 'issueSecurityScheme',
        'issue_type_scheme': 'issueTypeScheme',
        'issue_type_screen_scheme': 'issueTypeScreenScheme',
        'key': 'key',
        'lead': 'lead',
        'lead_account_id': 'leadAccountId',
        'name': 'name',
        'notification_scheme': 'notificationScheme',
        'permission_scheme': 'permissionScheme',
        'project_template_key': 'projectTemplateKey',
        'project_type_key': 'projectTypeKey',
        'url': 'url',
        'workflow_scheme': 'workflowScheme'
    }

    def __init__(self, assignee_type=None, avatar_id=None, category_id=None, description=None, field_configuration_scheme=None, issue_security_scheme=None, issue_type_scheme=None, issue_type_screen_scheme=None, key=None, lead=None, lead_account_id=None, name=None, notification_scheme=None, permission_scheme=None, project_template_key=None, project_type_key=None, url=None, workflow_scheme=None):  # noqa: E501
        """CreateProjectDetails - a model defined in Swagger"""  # noqa: E501
        self._assignee_type = None
        self._avatar_id = None
        self._category_id = None
        self._description = None
        self._field_configuration_scheme = None
        self._issue_security_scheme = None
        self._issue_type_scheme = None
        self._issue_type_screen_scheme = None
        self._key = None
        self._lead = None
        self._lead_account_id = None
        self._name = None
        self._notification_scheme = None
        self._permission_scheme = None
        self._project_template_key = None
        self._project_type_key = None
        self._url = None
        self._workflow_scheme = None
        self.discriminator = None
        if assignee_type is not None:
            self.assignee_type = assignee_type
        if avatar_id is not None:
            self.avatar_id = avatar_id
        if category_id is not None:
            self.category_id = category_id
        if description is not None:
            self.description = description
        if field_configuration_scheme is not None:
            self.field_configuration_scheme = field_configuration_scheme
        if issue_security_scheme is not None:
            self.issue_security_scheme = issue_security_scheme
        if issue_type_scheme is not None:
            self.issue_type_scheme = issue_type_scheme
        if issue_type_screen_scheme is not None:
            self.issue_type_screen_scheme = issue_type_screen_scheme
        self.key = key
        if lead is not None:
            self.lead = lead
        if lead_account_id is not None:
            self.lead_account_id = lead_account_id
        self.name = name
        if notification_scheme is not None:
            self.notification_scheme = notification_scheme
        if permission_scheme is not None:
            self.permission_scheme = permission_scheme
        if project_template_key is not None:
            self.project_template_key = project_template_key
        if project_type_key is not None:
            self.project_type_key = project_type_key
        if url is not None:
            self.url = url
        if workflow_scheme is not None:
            self.workflow_scheme = workflow_scheme

    @property
    def assignee_type(self):
        """Gets the assignee_type of this CreateProjectDetails.  # noqa: E501

        The default assignee when creating issues for this project.  # noqa: E501

        :return: The assignee_type of this CreateProjectDetails.  # noqa: E501
        :rtype: str
        """
        return self._assignee_type

    @assignee_type.setter
    def assignee_type(self, assignee_type):
        """Sets the assignee_type of this CreateProjectDetails.

        The default assignee when creating issues for this project.  # noqa: E501

        :param assignee_type: The assignee_type of this CreateProjectDetails.  # noqa: E501
        :type: str
        """
        allowed_values = ["PROJECT_LEAD", "UNASSIGNED"]  # noqa: E501
        if assignee_type not in allowed_values:
            raise ValueError(
                "Invalid value for `assignee_type` ({0}), must be one of {1}"  # noqa: E501
                .format(assignee_type, allowed_values)
            )

        self._assignee_type = assignee_type

    @property
    def avatar_id(self):
        """Gets the avatar_id of this CreateProjectDetails.  # noqa: E501

        An integer value for the project's avatar.  # noqa: E501

        :return: The avatar_id of this CreateProjectDetails.  # noqa: E501
        :rtype: int
        """
        return self._avatar_id

    @avatar_id.setter
    def avatar_id(self, avatar_id):
        """Sets the avatar_id of this CreateProjectDetails.

        An integer value for the project's avatar.  # noqa: E501

        :param avatar_id: The avatar_id of this CreateProjectDetails.  # noqa: E501
        :type: int
        """

        self._avatar_id = avatar_id

    @property
    def category_id(self):
        """Gets the category_id of this CreateProjectDetails.  # noqa: E501

        The ID of the project's category. A complete list of category IDs is found using the [Get all project categories](#api-rest-api-3-projectCategory-get) operation.  # noqa: E501

        :return: The category_id of this CreateProjectDetails.  # noqa: E501
        :rtype: int
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """Sets the category_id of this CreateProjectDetails.

        The ID of the project's category. A complete list of category IDs is found using the [Get all project categories](#api-rest-api-3-projectCategory-get) operation.  # noqa: E501

        :param category_id: The category_id of this CreateProjectDetails.  # noqa: E501
        :type: int
        """

        self._category_id = category_id

    @property
    def description(self):
        """Gets the description of this CreateProjectDetails.  # noqa: E501

        A brief description of the project.  # noqa: E501

        :return: The description of this CreateProjectDetails.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateProjectDetails.

        A brief description of the project.  # noqa: E501

        :param description: The description of this CreateProjectDetails.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def field_configuration_scheme(self):
        """Gets the field_configuration_scheme of this CreateProjectDetails.  # noqa: E501

        The ID of the field configuration scheme for the project. Use the [Get all field configuration schemes](#api-rest-api-3-fieldconfigurationscheme-get) operation to get a list of field configuration scheme IDs. If you specify the field configuration scheme you cannot specify the project template key.  # noqa: E501

        :return: The field_configuration_scheme of this CreateProjectDetails.  # noqa: E501
        :rtype: int
        """
        return self._field_configuration_scheme

    @field_configuration_scheme.setter
    def field_configuration_scheme(self, field_configuration_scheme):
        """Sets the field_configuration_scheme of this CreateProjectDetails.

        The ID of the field configuration scheme for the project. Use the [Get all field configuration schemes](#api-rest-api-3-fieldconfigurationscheme-get) operation to get a list of field configuration scheme IDs. If you specify the field configuration scheme you cannot specify the project template key.  # noqa: E501

        :param field_configuration_scheme: The field_configuration_scheme of this CreateProjectDetails.  # noqa: E501
        :type: int
        """

        self._field_configuration_scheme = field_configuration_scheme

    @property
    def issue_security_scheme(self):
        """Gets the issue_security_scheme of this CreateProjectDetails.  # noqa: E501

        The ID of the issue security scheme for the project, which enables you to control who can and cannot view issues. Use the [Get issue security schemes](#api-rest-api-3-issuesecurityschemes-get) resource to get all issue security scheme IDs.  # noqa: E501

        :return: The issue_security_scheme of this CreateProjectDetails.  # noqa: E501
        :rtype: int
        """
        return self._issue_security_scheme

    @issue_security_scheme.setter
    def issue_security_scheme(self, issue_security_scheme):
        """Sets the issue_security_scheme of this CreateProjectDetails.

        The ID of the issue security scheme for the project, which enables you to control who can and cannot view issues. Use the [Get issue security schemes](#api-rest-api-3-issuesecurityschemes-get) resource to get all issue security scheme IDs.  # noqa: E501

        :param issue_security_scheme: The issue_security_scheme of this CreateProjectDetails.  # noqa: E501
        :type: int
        """

        self._issue_security_scheme = issue_security_scheme

    @property
    def issue_type_scheme(self):
        """Gets the issue_type_scheme of this CreateProjectDetails.  # noqa: E501

        The ID of the issue type scheme for the project. Use the [Get all issue type schemes](#api-rest-api-3-issuetypescheme-get) operation to get a list of issue type scheme IDs. If you specify the issue type scheme you cannot specify the project template key.  # noqa: E501

        :return: The issue_type_scheme of this CreateProjectDetails.  # noqa: E501
        :rtype: int
        """
        return self._issue_type_scheme

    @issue_type_scheme.setter
    def issue_type_scheme(self, issue_type_scheme):
        """Sets the issue_type_scheme of this CreateProjectDetails.

        The ID of the issue type scheme for the project. Use the [Get all issue type schemes](#api-rest-api-3-issuetypescheme-get) operation to get a list of issue type scheme IDs. If you specify the issue type scheme you cannot specify the project template key.  # noqa: E501

        :param issue_type_scheme: The issue_type_scheme of this CreateProjectDetails.  # noqa: E501
        :type: int
        """

        self._issue_type_scheme = issue_type_scheme

    @property
    def issue_type_screen_scheme(self):
        """Gets the issue_type_screen_scheme of this CreateProjectDetails.  # noqa: E501

        The ID of the issue type screen scheme for the project. Use the [Get all issue type screen schemes](#api-rest-api-3-issuetypescreenscheme-get) operation to get a list of issue type screen scheme IDs. If you specify the issue type screen scheme you cannot specify the project template key.  # noqa: E501

        :return: The issue_type_screen_scheme of this CreateProjectDetails.  # noqa: E501
        :rtype: int
        """
        return self._issue_type_screen_scheme

    @issue_type_screen_scheme.setter
    def issue_type_screen_scheme(self, issue_type_screen_scheme):
        """Sets the issue_type_screen_scheme of this CreateProjectDetails.

        The ID of the issue type screen scheme for the project. Use the [Get all issue type screen schemes](#api-rest-api-3-issuetypescreenscheme-get) operation to get a list of issue type screen scheme IDs. If you specify the issue type screen scheme you cannot specify the project template key.  # noqa: E501

        :param issue_type_screen_scheme: The issue_type_screen_scheme of this CreateProjectDetails.  # noqa: E501
        :type: int
        """

        self._issue_type_screen_scheme = issue_type_screen_scheme

    @property
    def key(self):
        """Gets the key of this CreateProjectDetails.  # noqa: E501

        Project keys must be unique and start with an uppercase letter followed by one or more uppercase alphanumeric characters. The maximum length is 10 characters.  # noqa: E501

        :return: The key of this CreateProjectDetails.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this CreateProjectDetails.

        Project keys must be unique and start with an uppercase letter followed by one or more uppercase alphanumeric characters. The maximum length is 10 characters.  # noqa: E501

        :param key: The key of this CreateProjectDetails.  # noqa: E501
        :type: str
        """
        if key is None:
            raise ValueError("Invalid value for `key`, must not be `None`")  # noqa: E501

        self._key = key

    @property
    def lead(self):
        """Gets the lead of this CreateProjectDetails.  # noqa: E501

        This parameter is deprecated because of privacy changes. Use `leadAccountId` instead. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. The user name of the project lead. Either `lead` or `leadAccountId` must be set when creating a project. Cannot be provided with `leadAccountId`.  # noqa: E501

        :return: The lead of this CreateProjectDetails.  # noqa: E501
        :rtype: str
        """
        return self._lead

    @lead.setter
    def lead(self, lead):
        """Sets the lead of this CreateProjectDetails.

        This parameter is deprecated because of privacy changes. Use `leadAccountId` instead. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. The user name of the project lead. Either `lead` or `leadAccountId` must be set when creating a project. Cannot be provided with `leadAccountId`.  # noqa: E501

        :param lead: The lead of this CreateProjectDetails.  # noqa: E501
        :type: str
        """

        self._lead = lead

    @property
    def lead_account_id(self):
        """Gets the lead_account_id of this CreateProjectDetails.  # noqa: E501

        The account ID of the project lead. Either `lead` or `leadAccountId` must be set when creating a project. Cannot be provided with `lead`.  # noqa: E501

        :return: The lead_account_id of this CreateProjectDetails.  # noqa: E501
        :rtype: str
        """
        return self._lead_account_id

    @lead_account_id.setter
    def lead_account_id(self, lead_account_id):
        """Sets the lead_account_id of this CreateProjectDetails.

        The account ID of the project lead. Either `lead` or `leadAccountId` must be set when creating a project. Cannot be provided with `lead`.  # noqa: E501

        :param lead_account_id: The lead_account_id of this CreateProjectDetails.  # noqa: E501
        :type: str
        """

        self._lead_account_id = lead_account_id

    @property
    def name(self):
        """Gets the name of this CreateProjectDetails.  # noqa: E501

        The name of the project.  # noqa: E501

        :return: The name of this CreateProjectDetails.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateProjectDetails.

        The name of the project.  # noqa: E501

        :param name: The name of this CreateProjectDetails.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def notification_scheme(self):
        """Gets the notification_scheme of this CreateProjectDetails.  # noqa: E501

        The ID of the notification scheme for the project. Use the [Get notification schemes](#api-rest-api-3-notificationscheme-get) resource to get a list of notification scheme IDs.  # noqa: E501

        :return: The notification_scheme of this CreateProjectDetails.  # noqa: E501
        :rtype: int
        """
        return self._notification_scheme

    @notification_scheme.setter
    def notification_scheme(self, notification_scheme):
        """Sets the notification_scheme of this CreateProjectDetails.

        The ID of the notification scheme for the project. Use the [Get notification schemes](#api-rest-api-3-notificationscheme-get) resource to get a list of notification scheme IDs.  # noqa: E501

        :param notification_scheme: The notification_scheme of this CreateProjectDetails.  # noqa: E501
        :type: int
        """

        self._notification_scheme = notification_scheme

    @property
    def permission_scheme(self):
        """Gets the permission_scheme of this CreateProjectDetails.  # noqa: E501

        The ID of the permission scheme for the project. Use the [Get all permission schemes](#api-rest-api-3-permissionscheme-get) resource to see a list of all permission scheme IDs.  # noqa: E501

        :return: The permission_scheme of this CreateProjectDetails.  # noqa: E501
        :rtype: int
        """
        return self._permission_scheme

    @permission_scheme.setter
    def permission_scheme(self, permission_scheme):
        """Sets the permission_scheme of this CreateProjectDetails.

        The ID of the permission scheme for the project. Use the [Get all permission schemes](#api-rest-api-3-permissionscheme-get) resource to see a list of all permission scheme IDs.  # noqa: E501

        :param permission_scheme: The permission_scheme of this CreateProjectDetails.  # noqa: E501
        :type: int
        """

        self._permission_scheme = permission_scheme

    @property
    def project_template_key(self):
        """Gets the project_template_key of this CreateProjectDetails.  # noqa: E501

        A predefined configuration for a project. The type of the `projectTemplateKey` must match with the type of the `projectTypeKey`.  # noqa: E501

        :return: The project_template_key of this CreateProjectDetails.  # noqa: E501
        :rtype: str
        """
        return self._project_template_key

    @project_template_key.setter
    def project_template_key(self, project_template_key):
        """Sets the project_template_key of this CreateProjectDetails.

        A predefined configuration for a project. The type of the `projectTemplateKey` must match with the type of the `projectTypeKey`.  # noqa: E501

        :param project_template_key: The project_template_key of this CreateProjectDetails.  # noqa: E501
        :type: str
        """
        allowed_values = ["com.pyxis.greenhopper.jira:gh-simplified-agility-kanban", "com.pyxis.greenhopper.jira:gh-simplified-agility-scrum", "com.pyxis.greenhopper.jira:gh-simplified-basic", "com.pyxis.greenhopper.jira:gh-simplified-kanban-classic", "com.pyxis.greenhopper.jira:gh-simplified-scrum-classic", "com.pyxis.greenhopper.jira:gh-cross-team-template", "com.pyxis.greenhopper.jira:gh-cross-team-planning-template", "com.atlassian.servicedesk:simplified-it-service-management", "com.atlassian.servicedesk:simplified-it-service-management-basic", "com.atlassian.servicedesk:simplified-it-service-management-operations", "com.atlassian.servicedesk:simplified-general-service-desk", "com.atlassian.servicedesk:simplified-general-service-desk-it", "com.atlassian.servicedesk:simplified-general-service-desk-business", "com.atlassian.servicedesk:simplified-internal-service-desk", "com.atlassian.servicedesk:simplified-external-service-desk", "com.atlassian.servicedesk:simplified-hr-service-desk", "com.atlassian.servicedesk:simplified-facilities-service-desk", "com.atlassian.servicedesk:simplified-legal-service-desk", "com.atlassian.servicedesk:simplified-marketing-service-desk", "com.atlassian.servicedesk:simplified-finance-service-desk", "com.atlassian.servicedesk:simplified-analytics-service-desk", "com.atlassian.servicedesk:simplified-design-service-desk", "com.atlassian.servicedesk:simplified-sales-service-desk", "com.atlassian.servicedesk:simplified-halp-service-desk", "com.atlassian.servicedesk:simplified-blank-project-it", "com.atlassian.servicedesk:simplified-blank-project-business", "com.atlassian.servicedesk:next-gen-it-service-desk", "com.atlassian.servicedesk:next-gen-hr-service-desk", "com.atlassian.servicedesk:next-gen-legal-service-desk", "com.atlassian.servicedesk:next-gen-marketing-service-desk", "com.atlassian.servicedesk:next-gen-facilities-service-desk", "com.atlassian.servicedesk:next-gen-general-service-desk", "com.atlassian.servicedesk:next-gen-general-it-service-desk", "com.atlassian.servicedesk:next-gen-general-business-service-desk", "com.atlassian.servicedesk:next-gen-analytics-service-desk", "com.atlassian.servicedesk:next-gen-finance-service-desk", "com.atlassian.servicedesk:next-gen-design-service-desk", "com.atlassian.servicedesk:next-gen-sales-service-desk", "com.atlassian.jira-core-project-templates:jira-core-simplified-content-management", "com.atlassian.jira-core-project-templates:jira-core-simplified-document-approval", "com.atlassian.jira-core-project-templates:jira-core-simplified-lead-tracking", "com.atlassian.jira-core-project-templates:jira-core-simplified-process-control", "com.atlassian.jira-core-project-templates:jira-core-simplified-procurement", "com.atlassian.jira-core-project-templates:jira-core-simplified-project-management", "com.atlassian.jira-core-project-templates:jira-core-simplified-recruitment", "com.atlassian.jira-core-project-templates:jira-core-simplified-task-"]  # noqa: E501
        if project_template_key not in allowed_values:
            raise ValueError(
                "Invalid value for `project_template_key` ({0}), must be one of {1}"  # noqa: E501
                .format(project_template_key, allowed_values)
            )

        self._project_template_key = project_template_key

    @property
    def project_type_key(self):
        """Gets the project_type_key of this CreateProjectDetails.  # noqa: E501

        The [project type](https://confluence.atlassian.com/x/GwiiLQ#Jiraapplicationsoverview-Productfeaturesandprojecttypes), which defines the application-specific feature set. If you don't specify the project template you have to specify the project type.  # noqa: E501

        :return: The project_type_key of this CreateProjectDetails.  # noqa: E501
        :rtype: str
        """
        return self._project_type_key

    @project_type_key.setter
    def project_type_key(self, project_type_key):
        """Sets the project_type_key of this CreateProjectDetails.

        The [project type](https://confluence.atlassian.com/x/GwiiLQ#Jiraapplicationsoverview-Productfeaturesandprojecttypes), which defines the application-specific feature set. If you don't specify the project template you have to specify the project type.  # noqa: E501

        :param project_type_key: The project_type_key of this CreateProjectDetails.  # noqa: E501
        :type: str
        """
        allowed_values = ["software", "service_desk", "business"]  # noqa: E501
        if project_type_key not in allowed_values:
            raise ValueError(
                "Invalid value for `project_type_key` ({0}), must be one of {1}"  # noqa: E501
                .format(project_type_key, allowed_values)
            )

        self._project_type_key = project_type_key

    @property
    def url(self):
        """Gets the url of this CreateProjectDetails.  # noqa: E501

        A link to information about this project, such as project documentation  # noqa: E501

        :return: The url of this CreateProjectDetails.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this CreateProjectDetails.

        A link to information about this project, such as project documentation  # noqa: E501

        :param url: The url of this CreateProjectDetails.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def workflow_scheme(self):
        """Gets the workflow_scheme of this CreateProjectDetails.  # noqa: E501

        The ID of the workflow scheme for the project. Use the [Get all workflow schemes](#api-rest-api-3-workflowscheme-get) operation to get a list of workflow scheme IDs. If you specify the workflow scheme you cannot specify the project template key.  # noqa: E501

        :return: The workflow_scheme of this CreateProjectDetails.  # noqa: E501
        :rtype: int
        """
        return self._workflow_scheme

    @workflow_scheme.setter
    def workflow_scheme(self, workflow_scheme):
        """Sets the workflow_scheme of this CreateProjectDetails.

        The ID of the workflow scheme for the project. Use the [Get all workflow schemes](#api-rest-api-3-workflowscheme-get) operation to get a list of workflow scheme IDs. If you specify the workflow scheme you cannot specify the project template key.  # noqa: E501

        :param workflow_scheme: The workflow_scheme of this CreateProjectDetails.  # noqa: E501
        :type: int
        """

        self._workflow_scheme = workflow_scheme

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateProjectDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateProjectDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
