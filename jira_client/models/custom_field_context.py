# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CustomFieldContext(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'id': 'str',
        'is_any_issue_type': 'bool',
        'is_global_context': 'bool',
        'name': 'str'
    }

    attribute_map = {
        'description': 'description',
        'id': 'id',
        'is_any_issue_type': 'isAnyIssueType',
        'is_global_context': 'isGlobalContext',
        'name': 'name'
    }

    def __init__(self, description=None, id=None, is_any_issue_type=None, is_global_context=None, name=None):  # noqa: E501
        """CustomFieldContext - a model defined in Swagger"""  # noqa: E501
        self._description = None
        self._id = None
        self._is_any_issue_type = None
        self._is_global_context = None
        self._name = None
        self.discriminator = None
        self.description = description
        self.id = id
        self.is_any_issue_type = is_any_issue_type
        self.is_global_context = is_global_context
        self.name = name

    @property
    def description(self):
        """Gets the description of this CustomFieldContext.  # noqa: E501

        The description of the context.  # noqa: E501

        :return: The description of this CustomFieldContext.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CustomFieldContext.

        The description of the context.  # noqa: E501

        :param description: The description of this CustomFieldContext.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def id(self):
        """Gets the id of this CustomFieldContext.  # noqa: E501

        The ID of the context.  # noqa: E501

        :return: The id of this CustomFieldContext.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CustomFieldContext.

        The ID of the context.  # noqa: E501

        :param id: The id of this CustomFieldContext.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def is_any_issue_type(self):
        """Gets the is_any_issue_type of this CustomFieldContext.  # noqa: E501

        Whether the context apply to all issue types.  # noqa: E501

        :return: The is_any_issue_type of this CustomFieldContext.  # noqa: E501
        :rtype: bool
        """
        return self._is_any_issue_type

    @is_any_issue_type.setter
    def is_any_issue_type(self, is_any_issue_type):
        """Sets the is_any_issue_type of this CustomFieldContext.

        Whether the context apply to all issue types.  # noqa: E501

        :param is_any_issue_type: The is_any_issue_type of this CustomFieldContext.  # noqa: E501
        :type: bool
        """
        if is_any_issue_type is None:
            raise ValueError("Invalid value for `is_any_issue_type`, must not be `None`")  # noqa: E501

        self._is_any_issue_type = is_any_issue_type

    @property
    def is_global_context(self):
        """Gets the is_global_context of this CustomFieldContext.  # noqa: E501

        Whether the context is global.  # noqa: E501

        :return: The is_global_context of this CustomFieldContext.  # noqa: E501
        :rtype: bool
        """
        return self._is_global_context

    @is_global_context.setter
    def is_global_context(self, is_global_context):
        """Sets the is_global_context of this CustomFieldContext.

        Whether the context is global.  # noqa: E501

        :param is_global_context: The is_global_context of this CustomFieldContext.  # noqa: E501
        :type: bool
        """
        if is_global_context is None:
            raise ValueError("Invalid value for `is_global_context`, must not be `None`")  # noqa: E501

        self._is_global_context = is_global_context

    @property
    def name(self):
        """Gets the name of this CustomFieldContext.  # noqa: E501

        The name of the context.  # noqa: E501

        :return: The name of this CustomFieldContext.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CustomFieldContext.

        The name of the context.  # noqa: E501

        :param name: The name of this CustomFieldContext.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CustomFieldContext, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomFieldContext):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
