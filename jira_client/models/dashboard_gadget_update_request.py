# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DashboardGadgetUpdateRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'color': 'str',
        'position': 'AllOfDashboardGadgetUpdateRequestPosition',
        'title': 'str'
    }

    attribute_map = {
        'color': 'color',
        'position': 'position',
        'title': 'title'
    }

    def __init__(self, color=None, position=None, title=None):  # noqa: E501
        """DashboardGadgetUpdateRequest - a model defined in Swagger"""  # noqa: E501
        self._color = None
        self._position = None
        self._title = None
        self.discriminator = None
        if color is not None:
            self.color = color
        if position is not None:
            self.position = position
        if title is not None:
            self.title = title

    @property
    def color(self):
        """Gets the color of this DashboardGadgetUpdateRequest.  # noqa: E501

        The color of the gadget. Should be one of `blue`, `red`, `yellow`, `green`, `cyan`, `purple`, `gray`, or `white`.  # noqa: E501

        :return: The color of this DashboardGadgetUpdateRequest.  # noqa: E501
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this DashboardGadgetUpdateRequest.

        The color of the gadget. Should be one of `blue`, `red`, `yellow`, `green`, `cyan`, `purple`, `gray`, or `white`.  # noqa: E501

        :param color: The color of this DashboardGadgetUpdateRequest.  # noqa: E501
        :type: str
        """

        self._color = color

    @property
    def position(self):
        """Gets the position of this DashboardGadgetUpdateRequest.  # noqa: E501

        The position of the gadget.  # noqa: E501

        :return: The position of this DashboardGadgetUpdateRequest.  # noqa: E501
        :rtype: AllOfDashboardGadgetUpdateRequestPosition
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this DashboardGadgetUpdateRequest.

        The position of the gadget.  # noqa: E501

        :param position: The position of this DashboardGadgetUpdateRequest.  # noqa: E501
        :type: AllOfDashboardGadgetUpdateRequestPosition
        """

        self._position = position

    @property
    def title(self):
        """Gets the title of this DashboardGadgetUpdateRequest.  # noqa: E501

        The title of the gadget.  # noqa: E501

        :return: The title of this DashboardGadgetUpdateRequest.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this DashboardGadgetUpdateRequest.

        The title of the gadget.  # noqa: E501

        :param title: The title of this DashboardGadgetUpdateRequest.  # noqa: E501
        :type: str
        """

        self._title = title

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DashboardGadgetUpdateRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DashboardGadgetUpdateRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
