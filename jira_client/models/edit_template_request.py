# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EditTemplateRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'template_description': 'str',
        'template_generation_options': 'CustomTemplateOptions',
        'template_key': 'str',
        'template_name': 'str'
    }

    attribute_map = {
        'template_description': 'templateDescription',
        'template_generation_options': 'templateGenerationOptions',
        'template_key': 'templateKey',
        'template_name': 'templateName'
    }

    def __init__(self, template_description=None, template_generation_options=None, template_key=None, template_name=None):  # noqa: E501
        """EditTemplateRequest - a model defined in Swagger"""  # noqa: E501
        self._template_description = None
        self._template_generation_options = None
        self._template_key = None
        self._template_name = None
        self.discriminator = None
        if template_description is not None:
            self.template_description = template_description
        if template_generation_options is not None:
            self.template_generation_options = template_generation_options
        if template_key is not None:
            self.template_key = template_key
        if template_name is not None:
            self.template_name = template_name

    @property
    def template_description(self):
        """Gets the template_description of this EditTemplateRequest.  # noqa: E501

        The description of the template  # noqa: E501

        :return: The template_description of this EditTemplateRequest.  # noqa: E501
        :rtype: str
        """
        return self._template_description

    @template_description.setter
    def template_description(self, template_description):
        """Sets the template_description of this EditTemplateRequest.

        The description of the template  # noqa: E501

        :param template_description: The template_description of this EditTemplateRequest.  # noqa: E501
        :type: str
        """

        self._template_description = template_description

    @property
    def template_generation_options(self):
        """Gets the template_generation_options of this EditTemplateRequest.  # noqa: E501


        :return: The template_generation_options of this EditTemplateRequest.  # noqa: E501
        :rtype: CustomTemplateOptions
        """
        return self._template_generation_options

    @template_generation_options.setter
    def template_generation_options(self, template_generation_options):
        """Sets the template_generation_options of this EditTemplateRequest.


        :param template_generation_options: The template_generation_options of this EditTemplateRequest.  # noqa: E501
        :type: CustomTemplateOptions
        """

        self._template_generation_options = template_generation_options

    @property
    def template_key(self):
        """Gets the template_key of this EditTemplateRequest.  # noqa: E501

        The unique identifier of the template  # noqa: E501

        :return: The template_key of this EditTemplateRequest.  # noqa: E501
        :rtype: str
        """
        return self._template_key

    @template_key.setter
    def template_key(self, template_key):
        """Sets the template_key of this EditTemplateRequest.

        The unique identifier of the template  # noqa: E501

        :param template_key: The template_key of this EditTemplateRequest.  # noqa: E501
        :type: str
        """

        self._template_key = template_key

    @property
    def template_name(self):
        """Gets the template_name of this EditTemplateRequest.  # noqa: E501

        The name of the template  # noqa: E501

        :return: The template_name of this EditTemplateRequest.  # noqa: E501
        :rtype: str
        """
        return self._template_name

    @template_name.setter
    def template_name(self, template_name):
        """Sets the template_name of this EditTemplateRequest.

        The name of the template  # noqa: E501

        :param template_name: The template_name of this EditTemplateRequest.  # noqa: E501
        :type: str
        """

        self._template_name = template_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EditTemplateRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EditTemplateRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
