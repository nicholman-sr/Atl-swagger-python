# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ExportArchivedIssuesTaskProgressResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'file_url': 'str',
        'payload': 'str',
        'progress': 'int',
        'status': 'str',
        'submitted_time': 'datetime',
        'task_id': 'str'
    }

    attribute_map = {
        'file_url': 'fileUrl',
        'payload': 'payload',
        'progress': 'progress',
        'status': 'status',
        'submitted_time': 'submittedTime',
        'task_id': 'taskId'
    }

    def __init__(self, file_url=None, payload=None, progress=None, status=None, submitted_time=None, task_id=None):  # noqa: E501
        """ExportArchivedIssuesTaskProgressResponse - a model defined in Swagger"""  # noqa: E501
        self._file_url = None
        self._payload = None
        self._progress = None
        self._status = None
        self._submitted_time = None
        self._task_id = None
        self.discriminator = None
        if file_url is not None:
            self.file_url = file_url
        if payload is not None:
            self.payload = payload
        if progress is not None:
            self.progress = progress
        if status is not None:
            self.status = status
        if submitted_time is not None:
            self.submitted_time = submitted_time
        if task_id is not None:
            self.task_id = task_id

    @property
    def file_url(self):
        """Gets the file_url of this ExportArchivedIssuesTaskProgressResponse.  # noqa: E501


        :return: The file_url of this ExportArchivedIssuesTaskProgressResponse.  # noqa: E501
        :rtype: str
        """
        return self._file_url

    @file_url.setter
    def file_url(self, file_url):
        """Sets the file_url of this ExportArchivedIssuesTaskProgressResponse.


        :param file_url: The file_url of this ExportArchivedIssuesTaskProgressResponse.  # noqa: E501
        :type: str
        """

        self._file_url = file_url

    @property
    def payload(self):
        """Gets the payload of this ExportArchivedIssuesTaskProgressResponse.  # noqa: E501


        :return: The payload of this ExportArchivedIssuesTaskProgressResponse.  # noqa: E501
        :rtype: str
        """
        return self._payload

    @payload.setter
    def payload(self, payload):
        """Sets the payload of this ExportArchivedIssuesTaskProgressResponse.


        :param payload: The payload of this ExportArchivedIssuesTaskProgressResponse.  # noqa: E501
        :type: str
        """

        self._payload = payload

    @property
    def progress(self):
        """Gets the progress of this ExportArchivedIssuesTaskProgressResponse.  # noqa: E501


        :return: The progress of this ExportArchivedIssuesTaskProgressResponse.  # noqa: E501
        :rtype: int
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """Sets the progress of this ExportArchivedIssuesTaskProgressResponse.


        :param progress: The progress of this ExportArchivedIssuesTaskProgressResponse.  # noqa: E501
        :type: int
        """

        self._progress = progress

    @property
    def status(self):
        """Gets the status of this ExportArchivedIssuesTaskProgressResponse.  # noqa: E501


        :return: The status of this ExportArchivedIssuesTaskProgressResponse.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ExportArchivedIssuesTaskProgressResponse.


        :param status: The status of this ExportArchivedIssuesTaskProgressResponse.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def submitted_time(self):
        """Gets the submitted_time of this ExportArchivedIssuesTaskProgressResponse.  # noqa: E501


        :return: The submitted_time of this ExportArchivedIssuesTaskProgressResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._submitted_time

    @submitted_time.setter
    def submitted_time(self, submitted_time):
        """Sets the submitted_time of this ExportArchivedIssuesTaskProgressResponse.


        :param submitted_time: The submitted_time of this ExportArchivedIssuesTaskProgressResponse.  # noqa: E501
        :type: datetime
        """

        self._submitted_time = submitted_time

    @property
    def task_id(self):
        """Gets the task_id of this ExportArchivedIssuesTaskProgressResponse.  # noqa: E501


        :return: The task_id of this ExportArchivedIssuesTaskProgressResponse.  # noqa: E501
        :rtype: str
        """
        return self._task_id

    @task_id.setter
    def task_id(self, task_id):
        """Sets the task_id of this ExportArchivedIssuesTaskProgressResponse.


        :param task_id: The task_id of this ExportArchivedIssuesTaskProgressResponse.  # noqa: E501
        :type: str
        """

        self._task_id = task_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExportArchivedIssuesTaskProgressResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExportArchivedIssuesTaskProgressResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
