# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FailedWebhooks(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'max_results': 'int',
        'next': 'str',
        'values': 'list[FailedWebhook]'
    }

    attribute_map = {
        'max_results': 'maxResults',
        'next': 'next',
        'values': 'values'
    }

    def __init__(self, max_results=None, next=None, values=None):  # noqa: E501
        """FailedWebhooks - a model defined in Swagger"""  # noqa: E501
        self._max_results = None
        self._next = None
        self._values = None
        self.discriminator = None
        self.max_results = max_results
        if next is not None:
            self.next = next
        self.values = values

    @property
    def max_results(self):
        """Gets the max_results of this FailedWebhooks.  # noqa: E501

        The maximum number of items on the page. If the list of values is shorter than this number, then there are no more pages.  # noqa: E501

        :return: The max_results of this FailedWebhooks.  # noqa: E501
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this FailedWebhooks.

        The maximum number of items on the page. If the list of values is shorter than this number, then there are no more pages.  # noqa: E501

        :param max_results: The max_results of this FailedWebhooks.  # noqa: E501
        :type: int
        """
        if max_results is None:
            raise ValueError("Invalid value for `max_results`, must not be `None`")  # noqa: E501

        self._max_results = max_results

    @property
    def next(self):
        """Gets the next of this FailedWebhooks.  # noqa: E501

        The URL to the next page of results. Present only if the request returned at least one result.The next page may be empty at the time of receiving the response, but new failed webhooks may appear in time. You can save the URL to the next page and query for new results periodically (for example, every hour).  # noqa: E501

        :return: The next of this FailedWebhooks.  # noqa: E501
        :rtype: str
        """
        return self._next

    @next.setter
    def next(self, next):
        """Sets the next of this FailedWebhooks.

        The URL to the next page of results. Present only if the request returned at least one result.The next page may be empty at the time of receiving the response, but new failed webhooks may appear in time. You can save the URL to the next page and query for new results periodically (for example, every hour).  # noqa: E501

        :param next: The next of this FailedWebhooks.  # noqa: E501
        :type: str
        """

        self._next = next

    @property
    def values(self):
        """Gets the values of this FailedWebhooks.  # noqa: E501

        The list of webhooks.  # noqa: E501

        :return: The values of this FailedWebhooks.  # noqa: E501
        :rtype: list[FailedWebhook]
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this FailedWebhooks.

        The list of webhooks.  # noqa: E501

        :param values: The values of this FailedWebhooks.  # noqa: E501
        :type: list[FailedWebhook]
        """
        if values is None:
            raise ValueError("Invalid value for `values`, must not be `None`")  # noqa: E501

        self._values = values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FailedWebhooks, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FailedWebhooks):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
