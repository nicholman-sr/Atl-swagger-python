# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FilterDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'approximate_last_used': 'datetime',
        'description': 'str',
        'edit_permissions': 'list[SharePermission]',
        'expand': 'str',
        'favourite': 'bool',
        'favourited_count': 'int',
        'id': 'str',
        'jql': 'str',
        'name': 'str',
        'owner': 'AllOfFilterDetailsOwner',
        'search_url': 'str',
        '_self': 'str',
        'share_permissions': 'list[SharePermission]',
        'subscriptions': 'list[FilterSubscription]',
        'view_url': 'str'
    }

    attribute_map = {
        'approximate_last_used': 'approximateLastUsed',
        'description': 'description',
        'edit_permissions': 'editPermissions',
        'expand': 'expand',
        'favourite': 'favourite',
        'favourited_count': 'favouritedCount',
        'id': 'id',
        'jql': 'jql',
        'name': 'name',
        'owner': 'owner',
        'search_url': 'searchUrl',
        '_self': 'self',
        'share_permissions': 'sharePermissions',
        'subscriptions': 'subscriptions',
        'view_url': 'viewUrl'
    }

    def __init__(self, approximate_last_used=None, description=None, edit_permissions=None, expand=None, favourite=None, favourited_count=None, id=None, jql=None, name=None, owner=None, search_url=None, _self=None, share_permissions=None, subscriptions=None, view_url=None):  # noqa: E501
        """FilterDetails - a model defined in Swagger"""  # noqa: E501
        self._approximate_last_used = None
        self._description = None
        self._edit_permissions = None
        self._expand = None
        self._favourite = None
        self._favourited_count = None
        self._id = None
        self._jql = None
        self._name = None
        self._owner = None
        self._search_url = None
        self.__self = None
        self._share_permissions = None
        self._subscriptions = None
        self._view_url = None
        self.discriminator = None
        if approximate_last_used is not None:
            self.approximate_last_used = approximate_last_used
        if description is not None:
            self.description = description
        if edit_permissions is not None:
            self.edit_permissions = edit_permissions
        if expand is not None:
            self.expand = expand
        if favourite is not None:
            self.favourite = favourite
        if favourited_count is not None:
            self.favourited_count = favourited_count
        if id is not None:
            self.id = id
        if jql is not None:
            self.jql = jql
        self.name = name
        if owner is not None:
            self.owner = owner
        if search_url is not None:
            self.search_url = search_url
        if _self is not None:
            self._self = _self
        if share_permissions is not None:
            self.share_permissions = share_permissions
        if subscriptions is not None:
            self.subscriptions = subscriptions
        if view_url is not None:
            self.view_url = view_url

    @property
    def approximate_last_used(self):
        """Gets the approximate_last_used of this FilterDetails.  # noqa: E501

        \\[Experimental\\] Approximate last used time. Returns the date and time when the filter was last used. Returns `null` if the filter hasn't been used after tracking was enabled. For performance reasons, timestamps aren't updated in real time and therefore may not be exactly accurate.  # noqa: E501

        :return: The approximate_last_used of this FilterDetails.  # noqa: E501
        :rtype: datetime
        """
        return self._approximate_last_used

    @approximate_last_used.setter
    def approximate_last_used(self, approximate_last_used):
        """Sets the approximate_last_used of this FilterDetails.

        \\[Experimental\\] Approximate last used time. Returns the date and time when the filter was last used. Returns `null` if the filter hasn't been used after tracking was enabled. For performance reasons, timestamps aren't updated in real time and therefore may not be exactly accurate.  # noqa: E501

        :param approximate_last_used: The approximate_last_used of this FilterDetails.  # noqa: E501
        :type: datetime
        """

        self._approximate_last_used = approximate_last_used

    @property
    def description(self):
        """Gets the description of this FilterDetails.  # noqa: E501

        The description of the filter.  # noqa: E501

        :return: The description of this FilterDetails.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this FilterDetails.

        The description of the filter.  # noqa: E501

        :param description: The description of this FilterDetails.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def edit_permissions(self):
        """Gets the edit_permissions of this FilterDetails.  # noqa: E501

        The groups and projects that can edit the filter. This can be specified when updating a filter, but not when creating a filter.  # noqa: E501

        :return: The edit_permissions of this FilterDetails.  # noqa: E501
        :rtype: list[SharePermission]
        """
        return self._edit_permissions

    @edit_permissions.setter
    def edit_permissions(self, edit_permissions):
        """Sets the edit_permissions of this FilterDetails.

        The groups and projects that can edit the filter. This can be specified when updating a filter, but not when creating a filter.  # noqa: E501

        :param edit_permissions: The edit_permissions of this FilterDetails.  # noqa: E501
        :type: list[SharePermission]
        """

        self._edit_permissions = edit_permissions

    @property
    def expand(self):
        """Gets the expand of this FilterDetails.  # noqa: E501

        Expand options that include additional filter details in the response.  # noqa: E501

        :return: The expand of this FilterDetails.  # noqa: E501
        :rtype: str
        """
        return self._expand

    @expand.setter
    def expand(self, expand):
        """Sets the expand of this FilterDetails.

        Expand options that include additional filter details in the response.  # noqa: E501

        :param expand: The expand of this FilterDetails.  # noqa: E501
        :type: str
        """

        self._expand = expand

    @property
    def favourite(self):
        """Gets the favourite of this FilterDetails.  # noqa: E501

        Whether the filter is selected as a favorite by any users, not including the filter owner.  # noqa: E501

        :return: The favourite of this FilterDetails.  # noqa: E501
        :rtype: bool
        """
        return self._favourite

    @favourite.setter
    def favourite(self, favourite):
        """Sets the favourite of this FilterDetails.

        Whether the filter is selected as a favorite by any users, not including the filter owner.  # noqa: E501

        :param favourite: The favourite of this FilterDetails.  # noqa: E501
        :type: bool
        """

        self._favourite = favourite

    @property
    def favourited_count(self):
        """Gets the favourited_count of this FilterDetails.  # noqa: E501

        The count of how many users have selected this filter as a favorite, including the filter owner.  # noqa: E501

        :return: The favourited_count of this FilterDetails.  # noqa: E501
        :rtype: int
        """
        return self._favourited_count

    @favourited_count.setter
    def favourited_count(self, favourited_count):
        """Sets the favourited_count of this FilterDetails.

        The count of how many users have selected this filter as a favorite, including the filter owner.  # noqa: E501

        :param favourited_count: The favourited_count of this FilterDetails.  # noqa: E501
        :type: int
        """

        self._favourited_count = favourited_count

    @property
    def id(self):
        """Gets the id of this FilterDetails.  # noqa: E501

        The unique identifier for the filter.  # noqa: E501

        :return: The id of this FilterDetails.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FilterDetails.

        The unique identifier for the filter.  # noqa: E501

        :param id: The id of this FilterDetails.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def jql(self):
        """Gets the jql of this FilterDetails.  # noqa: E501

        The JQL query for the filter. For example, *project = SSP AND issuetype = Bug*.  # noqa: E501

        :return: The jql of this FilterDetails.  # noqa: E501
        :rtype: str
        """
        return self._jql

    @jql.setter
    def jql(self, jql):
        """Sets the jql of this FilterDetails.

        The JQL query for the filter. For example, *project = SSP AND issuetype = Bug*.  # noqa: E501

        :param jql: The jql of this FilterDetails.  # noqa: E501
        :type: str
        """

        self._jql = jql

    @property
    def name(self):
        """Gets the name of this FilterDetails.  # noqa: E501

        The name of the filter.  # noqa: E501

        :return: The name of this FilterDetails.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FilterDetails.

        The name of the filter.  # noqa: E501

        :param name: The name of this FilterDetails.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def owner(self):
        """Gets the owner of this FilterDetails.  # noqa: E501

        The user who owns the filter. Defaults to the creator of the filter, however, Jira administrators can change the owner of a shared filter in the admin settings.  # noqa: E501

        :return: The owner of this FilterDetails.  # noqa: E501
        :rtype: AllOfFilterDetailsOwner
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this FilterDetails.

        The user who owns the filter. Defaults to the creator of the filter, however, Jira administrators can change the owner of a shared filter in the admin settings.  # noqa: E501

        :param owner: The owner of this FilterDetails.  # noqa: E501
        :type: AllOfFilterDetailsOwner
        """

        self._owner = owner

    @property
    def search_url(self):
        """Gets the search_url of this FilterDetails.  # noqa: E501

        A URL to view the filter results in Jira, using the [Search for issues using JQL](#api-rest-api-3-filter-search-get) operation with the filter's JQL string to return the filter results. For example, *https://your-domain.atlassian.net/rest/api/3/search?jql=project+%3D+SSP+AND+issuetype+%3D+Bug*.  # noqa: E501

        :return: The search_url of this FilterDetails.  # noqa: E501
        :rtype: str
        """
        return self._search_url

    @search_url.setter
    def search_url(self, search_url):
        """Sets the search_url of this FilterDetails.

        A URL to view the filter results in Jira, using the [Search for issues using JQL](#api-rest-api-3-filter-search-get) operation with the filter's JQL string to return the filter results. For example, *https://your-domain.atlassian.net/rest/api/3/search?jql=project+%3D+SSP+AND+issuetype+%3D+Bug*.  # noqa: E501

        :param search_url: The search_url of this FilterDetails.  # noqa: E501
        :type: str
        """

        self._search_url = search_url

    @property
    def _self(self):
        """Gets the _self of this FilterDetails.  # noqa: E501

        The URL of the filter.  # noqa: E501

        :return: The _self of this FilterDetails.  # noqa: E501
        :rtype: str
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this FilterDetails.

        The URL of the filter.  # noqa: E501

        :param _self: The _self of this FilterDetails.  # noqa: E501
        :type: str
        """

        self.__self = _self

    @property
    def share_permissions(self):
        """Gets the share_permissions of this FilterDetails.  # noqa: E501

        The groups and projects that the filter is shared with. This can be specified when updating a filter, but not when creating a filter.  # noqa: E501

        :return: The share_permissions of this FilterDetails.  # noqa: E501
        :rtype: list[SharePermission]
        """
        return self._share_permissions

    @share_permissions.setter
    def share_permissions(self, share_permissions):
        """Sets the share_permissions of this FilterDetails.

        The groups and projects that the filter is shared with. This can be specified when updating a filter, but not when creating a filter.  # noqa: E501

        :param share_permissions: The share_permissions of this FilterDetails.  # noqa: E501
        :type: list[SharePermission]
        """

        self._share_permissions = share_permissions

    @property
    def subscriptions(self):
        """Gets the subscriptions of this FilterDetails.  # noqa: E501

        The users that are subscribed to the filter.  # noqa: E501

        :return: The subscriptions of this FilterDetails.  # noqa: E501
        :rtype: list[FilterSubscription]
        """
        return self._subscriptions

    @subscriptions.setter
    def subscriptions(self, subscriptions):
        """Sets the subscriptions of this FilterDetails.

        The users that are subscribed to the filter.  # noqa: E501

        :param subscriptions: The subscriptions of this FilterDetails.  # noqa: E501
        :type: list[FilterSubscription]
        """

        self._subscriptions = subscriptions

    @property
    def view_url(self):
        """Gets the view_url of this FilterDetails.  # noqa: E501

        A URL to view the filter results in Jira, using the ID of the filter. For example, *https://your-domain.atlassian.net/issues/?filter=10100*.  # noqa: E501

        :return: The view_url of this FilterDetails.  # noqa: E501
        :rtype: str
        """
        return self._view_url

    @view_url.setter
    def view_url(self, view_url):
        """Sets the view_url of this FilterDetails.

        A URL to view the filter results in Jira, using the ID of the filter. For example, *https://your-domain.atlassian.net/issues/?filter=10100*.  # noqa: E501

        :param view_url: The view_url of this FilterDetails.  # noqa: E501
        :type: str
        """

        self._view_url = view_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FilterDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FilterDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
