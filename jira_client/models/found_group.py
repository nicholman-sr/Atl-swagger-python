# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FoundGroup(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'avatar_url': 'str',
        'group_id': 'str',
        'html': 'str',
        'labels': 'list[GroupLabel]',
        'managed_by': 'str',
        'name': 'str',
        'usage_type': 'str'
    }

    attribute_map = {
        'avatar_url': 'avatarUrl',
        'group_id': 'groupId',
        'html': 'html',
        'labels': 'labels',
        'managed_by': 'managedBy',
        'name': 'name',
        'usage_type': 'usageType'
    }

    def __init__(self, avatar_url=None, group_id=None, html=None, labels=None, managed_by=None, name=None, usage_type=None):  # noqa: E501
        """FoundGroup - a model defined in Swagger"""  # noqa: E501
        self._avatar_url = None
        self._group_id = None
        self._html = None
        self._labels = None
        self._managed_by = None
        self._name = None
        self._usage_type = None
        self.discriminator = None
        if avatar_url is not None:
            self.avatar_url = avatar_url
        if group_id is not None:
            self.group_id = group_id
        if html is not None:
            self.html = html
        if labels is not None:
            self.labels = labels
        if managed_by is not None:
            self.managed_by = managed_by
        if name is not None:
            self.name = name
        if usage_type is not None:
            self.usage_type = usage_type

    @property
    def avatar_url(self):
        """Gets the avatar_url of this FoundGroup.  # noqa: E501

        Avatar url for the group/team if present.  # noqa: E501

        :return: The avatar_url of this FoundGroup.  # noqa: E501
        :rtype: str
        """
        return self._avatar_url

    @avatar_url.setter
    def avatar_url(self, avatar_url):
        """Sets the avatar_url of this FoundGroup.

        Avatar url for the group/team if present.  # noqa: E501

        :param avatar_url: The avatar_url of this FoundGroup.  # noqa: E501
        :type: str
        """

        self._avatar_url = avatar_url

    @property
    def group_id(self):
        """Gets the group_id of this FoundGroup.  # noqa: E501

        The ID of the group, which uniquely identifies the group across all Atlassian products. For example, *952d12c3-5b5b-4d04-bb32-44d383afc4b2*.  # noqa: E501

        :return: The group_id of this FoundGroup.  # noqa: E501
        :rtype: str
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this FoundGroup.

        The ID of the group, which uniquely identifies the group across all Atlassian products. For example, *952d12c3-5b5b-4d04-bb32-44d383afc4b2*.  # noqa: E501

        :param group_id: The group_id of this FoundGroup.  # noqa: E501
        :type: str
        """

        self._group_id = group_id

    @property
    def html(self):
        """Gets the html of this FoundGroup.  # noqa: E501

        The group name with the matched query string highlighted with the HTML bold tag.  # noqa: E501

        :return: The html of this FoundGroup.  # noqa: E501
        :rtype: str
        """
        return self._html

    @html.setter
    def html(self, html):
        """Sets the html of this FoundGroup.

        The group name with the matched query string highlighted with the HTML bold tag.  # noqa: E501

        :param html: The html of this FoundGroup.  # noqa: E501
        :type: str
        """

        self._html = html

    @property
    def labels(self):
        """Gets the labels of this FoundGroup.  # noqa: E501


        :return: The labels of this FoundGroup.  # noqa: E501
        :rtype: list[GroupLabel]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this FoundGroup.


        :param labels: The labels of this FoundGroup.  # noqa: E501
        :type: list[GroupLabel]
        """

        self._labels = labels

    @property
    def managed_by(self):
        """Gets the managed_by of this FoundGroup.  # noqa: E501

        Describes who/how the team is managed. The possible values are   \\* external - when team is synced from an external directory like SCIM or HRIS, and team members cannot be modified.   \\* admins - when a team is managed by an admin (team members can only be modified by admins).   \\* team-members - managed by existing team members, new members need to be invited to join.   \\* open - anyone can join or modify this team.  # noqa: E501

        :return: The managed_by of this FoundGroup.  # noqa: E501
        :rtype: str
        """
        return self._managed_by

    @managed_by.setter
    def managed_by(self, managed_by):
        """Sets the managed_by of this FoundGroup.

        Describes who/how the team is managed. The possible values are   \\* external - when team is synced from an external directory like SCIM or HRIS, and team members cannot be modified.   \\* admins - when a team is managed by an admin (team members can only be modified by admins).   \\* team-members - managed by existing team members, new members need to be invited to join.   \\* open - anyone can join or modify this team.  # noqa: E501

        :param managed_by: The managed_by of this FoundGroup.  # noqa: E501
        :type: str
        """
        allowed_values = ["EXTERNAL", "ADMINS", "TEAM_MEMBERS", "OPEN"]  # noqa: E501
        if managed_by not in allowed_values:
            raise ValueError(
                "Invalid value for `managed_by` ({0}), must be one of {1}"  # noqa: E501
                .format(managed_by, allowed_values)
            )

        self._managed_by = managed_by

    @property
    def name(self):
        """Gets the name of this FoundGroup.  # noqa: E501

        The name of the group. The name of a group is mutable, to reliably identify a group use ``groupId`.`  # noqa: E501

        :return: The name of this FoundGroup.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FoundGroup.

        The name of the group. The name of a group is mutable, to reliably identify a group use ``groupId`.`  # noqa: E501

        :param name: The name of this FoundGroup.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def usage_type(self):
        """Gets the usage_type of this FoundGroup.  # noqa: E501

        Describes the type of group. The possible values are   \\* team-collaboration - A platform team managed in people directory.   \\* userbase-group - a group of users created in adminhub.   \\* admin-oversight - currently unused.  # noqa: E501

        :return: The usage_type of this FoundGroup.  # noqa: E501
        :rtype: str
        """
        return self._usage_type

    @usage_type.setter
    def usage_type(self, usage_type):
        """Sets the usage_type of this FoundGroup.

        Describes the type of group. The possible values are   \\* team-collaboration - A platform team managed in people directory.   \\* userbase-group - a group of users created in adminhub.   \\* admin-oversight - currently unused.  # noqa: E501

        :param usage_type: The usage_type of this FoundGroup.  # noqa: E501
        :type: str
        """
        allowed_values = ["USERBASE_GROUP", "TEAM_COLLABORATION", "ADMIN_OVERSIGHT"]  # noqa: E501
        if usage_type not in allowed_values:
            raise ValueError(
                "Invalid value for `usage_type` ({0}), must be one of {1}"  # noqa: E501
                .format(usage_type, allowed_values)
            )

        self._usage_type = usage_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FoundGroup, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FoundGroup):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
