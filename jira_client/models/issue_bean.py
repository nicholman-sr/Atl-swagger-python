# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IssueBean(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'changelog': 'AllOfIssueBeanChangelog',
        'editmeta': 'AllOfIssueBeanEditmeta',
        'expand': 'str',
        'fields': 'dict(str, object)',
        'fields_to_include': 'IncludedFields',
        'id': 'str',
        'key': 'str',
        'names': 'dict(str, str)',
        'operations': 'AllOfIssueBeanOperations',
        'properties': 'dict(str, object)',
        'rendered_fields': 'dict(str, object)',
        'schema': 'dict(str, JsonTypeBean)',
        '_self': 'str',
        'transitions': 'list[IssueTransition]',
        'versioned_representations': 'dict(str, dict(str, object))'
    }

    attribute_map = {
        'changelog': 'changelog',
        'editmeta': 'editmeta',
        'expand': 'expand',
        'fields': 'fields',
        'fields_to_include': 'fieldsToInclude',
        'id': 'id',
        'key': 'key',
        'names': 'names',
        'operations': 'operations',
        'properties': 'properties',
        'rendered_fields': 'renderedFields',
        'schema': 'schema',
        '_self': 'self',
        'transitions': 'transitions',
        'versioned_representations': 'versionedRepresentations'
    }

    def __init__(self, changelog=None, editmeta=None, expand=None, fields=None, fields_to_include=None, id=None, key=None, names=None, operations=None, properties=None, rendered_fields=None, schema=None, _self=None, transitions=None, versioned_representations=None):  # noqa: E501
        """IssueBean - a model defined in Swagger"""  # noqa: E501
        self._changelog = None
        self._editmeta = None
        self._expand = None
        self._fields = None
        self._fields_to_include = None
        self._id = None
        self._key = None
        self._names = None
        self._operations = None
        self._properties = None
        self._rendered_fields = None
        self._schema = None
        self.__self = None
        self._transitions = None
        self._versioned_representations = None
        self.discriminator = None
        if changelog is not None:
            self.changelog = changelog
        if editmeta is not None:
            self.editmeta = editmeta
        if expand is not None:
            self.expand = expand
        if fields is not None:
            self.fields = fields
        if fields_to_include is not None:
            self.fields_to_include = fields_to_include
        if id is not None:
            self.id = id
        if key is not None:
            self.key = key
        if names is not None:
            self.names = names
        if operations is not None:
            self.operations = operations
        if properties is not None:
            self.properties = properties
        if rendered_fields is not None:
            self.rendered_fields = rendered_fields
        if schema is not None:
            self.schema = schema
        if _self is not None:
            self._self = _self
        if transitions is not None:
            self.transitions = transitions
        if versioned_representations is not None:
            self.versioned_representations = versioned_representations

    @property
    def changelog(self):
        """Gets the changelog of this IssueBean.  # noqa: E501

        Details of changelogs associated with the issue.  # noqa: E501

        :return: The changelog of this IssueBean.  # noqa: E501
        :rtype: AllOfIssueBeanChangelog
        """
        return self._changelog

    @changelog.setter
    def changelog(self, changelog):
        """Sets the changelog of this IssueBean.

        Details of changelogs associated with the issue.  # noqa: E501

        :param changelog: The changelog of this IssueBean.  # noqa: E501
        :type: AllOfIssueBeanChangelog
        """

        self._changelog = changelog

    @property
    def editmeta(self):
        """Gets the editmeta of this IssueBean.  # noqa: E501

        The metadata for the fields on the issue that can be amended.  # noqa: E501

        :return: The editmeta of this IssueBean.  # noqa: E501
        :rtype: AllOfIssueBeanEditmeta
        """
        return self._editmeta

    @editmeta.setter
    def editmeta(self, editmeta):
        """Sets the editmeta of this IssueBean.

        The metadata for the fields on the issue that can be amended.  # noqa: E501

        :param editmeta: The editmeta of this IssueBean.  # noqa: E501
        :type: AllOfIssueBeanEditmeta
        """

        self._editmeta = editmeta

    @property
    def expand(self):
        """Gets the expand of this IssueBean.  # noqa: E501

        Expand options that include additional issue details in the response.  # noqa: E501

        :return: The expand of this IssueBean.  # noqa: E501
        :rtype: str
        """
        return self._expand

    @expand.setter
    def expand(self, expand):
        """Sets the expand of this IssueBean.

        Expand options that include additional issue details in the response.  # noqa: E501

        :param expand: The expand of this IssueBean.  # noqa: E501
        :type: str
        """

        self._expand = expand

    @property
    def fields(self):
        """Gets the fields of this IssueBean.  # noqa: E501


        :return: The fields of this IssueBean.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this IssueBean.


        :param fields: The fields of this IssueBean.  # noqa: E501
        :type: dict(str, object)
        """

        self._fields = fields

    @property
    def fields_to_include(self):
        """Gets the fields_to_include of this IssueBean.  # noqa: E501


        :return: The fields_to_include of this IssueBean.  # noqa: E501
        :rtype: IncludedFields
        """
        return self._fields_to_include

    @fields_to_include.setter
    def fields_to_include(self, fields_to_include):
        """Sets the fields_to_include of this IssueBean.


        :param fields_to_include: The fields_to_include of this IssueBean.  # noqa: E501
        :type: IncludedFields
        """

        self._fields_to_include = fields_to_include

    @property
    def id(self):
        """Gets the id of this IssueBean.  # noqa: E501

        The ID of the issue.  # noqa: E501

        :return: The id of this IssueBean.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this IssueBean.

        The ID of the issue.  # noqa: E501

        :param id: The id of this IssueBean.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def key(self):
        """Gets the key of this IssueBean.  # noqa: E501

        The key of the issue.  # noqa: E501

        :return: The key of this IssueBean.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this IssueBean.

        The key of the issue.  # noqa: E501

        :param key: The key of this IssueBean.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def names(self):
        """Gets the names of this IssueBean.  # noqa: E501

        The ID and name of each field present on the issue.  # noqa: E501

        :return: The names of this IssueBean.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._names

    @names.setter
    def names(self, names):
        """Sets the names of this IssueBean.

        The ID and name of each field present on the issue.  # noqa: E501

        :param names: The names of this IssueBean.  # noqa: E501
        :type: dict(str, str)
        """

        self._names = names

    @property
    def operations(self):
        """Gets the operations of this IssueBean.  # noqa: E501

        The operations that can be performed on the issue.  # noqa: E501

        :return: The operations of this IssueBean.  # noqa: E501
        :rtype: AllOfIssueBeanOperations
        """
        return self._operations

    @operations.setter
    def operations(self, operations):
        """Sets the operations of this IssueBean.

        The operations that can be performed on the issue.  # noqa: E501

        :param operations: The operations of this IssueBean.  # noqa: E501
        :type: AllOfIssueBeanOperations
        """

        self._operations = operations

    @property
    def properties(self):
        """Gets the properties of this IssueBean.  # noqa: E501

        Details of the issue properties identified in the request.  # noqa: E501

        :return: The properties of this IssueBean.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this IssueBean.

        Details of the issue properties identified in the request.  # noqa: E501

        :param properties: The properties of this IssueBean.  # noqa: E501
        :type: dict(str, object)
        """

        self._properties = properties

    @property
    def rendered_fields(self):
        """Gets the rendered_fields of this IssueBean.  # noqa: E501

        The rendered value of each field present on the issue.  # noqa: E501

        :return: The rendered_fields of this IssueBean.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._rendered_fields

    @rendered_fields.setter
    def rendered_fields(self, rendered_fields):
        """Sets the rendered_fields of this IssueBean.

        The rendered value of each field present on the issue.  # noqa: E501

        :param rendered_fields: The rendered_fields of this IssueBean.  # noqa: E501
        :type: dict(str, object)
        """

        self._rendered_fields = rendered_fields

    @property
    def schema(self):
        """Gets the schema of this IssueBean.  # noqa: E501

        The schema describing each field present on the issue.  # noqa: E501

        :return: The schema of this IssueBean.  # noqa: E501
        :rtype: dict(str, JsonTypeBean)
        """
        return self._schema

    @schema.setter
    def schema(self, schema):
        """Sets the schema of this IssueBean.

        The schema describing each field present on the issue.  # noqa: E501

        :param schema: The schema of this IssueBean.  # noqa: E501
        :type: dict(str, JsonTypeBean)
        """

        self._schema = schema

    @property
    def _self(self):
        """Gets the _self of this IssueBean.  # noqa: E501

        The URL of the issue details.  # noqa: E501

        :return: The _self of this IssueBean.  # noqa: E501
        :rtype: str
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this IssueBean.

        The URL of the issue details.  # noqa: E501

        :param _self: The _self of this IssueBean.  # noqa: E501
        :type: str
        """

        self.__self = _self

    @property
    def transitions(self):
        """Gets the transitions of this IssueBean.  # noqa: E501

        The transitions that can be performed on the issue.  # noqa: E501

        :return: The transitions of this IssueBean.  # noqa: E501
        :rtype: list[IssueTransition]
        """
        return self._transitions

    @transitions.setter
    def transitions(self, transitions):
        """Sets the transitions of this IssueBean.

        The transitions that can be performed on the issue.  # noqa: E501

        :param transitions: The transitions of this IssueBean.  # noqa: E501
        :type: list[IssueTransition]
        """

        self._transitions = transitions

    @property
    def versioned_representations(self):
        """Gets the versioned_representations of this IssueBean.  # noqa: E501

        The versions of each field on the issue.  # noqa: E501

        :return: The versioned_representations of this IssueBean.  # noqa: E501
        :rtype: dict(str, dict(str, object))
        """
        return self._versioned_representations

    @versioned_representations.setter
    def versioned_representations(self, versioned_representations):
        """Sets the versioned_representations of this IssueBean.

        The versions of each field on the issue.  # noqa: E501

        :param versioned_representations: The versioned_representations of this IssueBean.  # noqa: E501
        :type: dict(str, dict(str, object))
        """

        self._versioned_representations = versioned_representations

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IssueBean, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IssueBean):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
