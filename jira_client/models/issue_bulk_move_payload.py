# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IssueBulkMovePayload(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'send_bulk_notification': 'bool',
        'target_to_sources_mapping': 'dict(str, TargetToSourcesMapping)'
    }

    attribute_map = {
        'send_bulk_notification': 'sendBulkNotification',
        'target_to_sources_mapping': 'targetToSourcesMapping'
    }

    def __init__(self, send_bulk_notification=True, target_to_sources_mapping=None):  # noqa: E501
        """IssueBulkMovePayload - a model defined in Swagger"""  # noqa: E501
        self._send_bulk_notification = None
        self._target_to_sources_mapping = None
        self.discriminator = None
        if send_bulk_notification is not None:
            self.send_bulk_notification = send_bulk_notification
        if target_to_sources_mapping is not None:
            self.target_to_sources_mapping = target_to_sources_mapping

    @property
    def send_bulk_notification(self):
        """Gets the send_bulk_notification of this IssueBulkMovePayload.  # noqa: E501

        A boolean value that indicates whether to send a bulk change notification when the issues are being moved.  If `true`, dispatches a bulk notification email to users about the updates.  # noqa: E501

        :return: The send_bulk_notification of this IssueBulkMovePayload.  # noqa: E501
        :rtype: bool
        """
        return self._send_bulk_notification

    @send_bulk_notification.setter
    def send_bulk_notification(self, send_bulk_notification):
        """Sets the send_bulk_notification of this IssueBulkMovePayload.

        A boolean value that indicates whether to send a bulk change notification when the issues are being moved.  If `true`, dispatches a bulk notification email to users about the updates.  # noqa: E501

        :param send_bulk_notification: The send_bulk_notification of this IssueBulkMovePayload.  # noqa: E501
        :type: bool
        """

        self._send_bulk_notification = send_bulk_notification

    @property
    def target_to_sources_mapping(self):
        """Gets the target_to_sources_mapping of this IssueBulkMovePayload.  # noqa: E501

        An object representing the mapping of issues and data related to destination entities, like fields and statuses, that are required during a bulk move.  The key is a string that is created by concatenating the following three entities in order, separated by commas. The format is `<project ID or key>,<issueType ID>,<parent ID or key>`. It should be unique across mappings provided in the payload. If you provide multiple mappings for the same key, only one will be processed. However, the operation won't fail, so the error may be hard to track down.   *  ***Destination project*** (Required): ID or key of the project to which the issues are being moved.  *  ***Destination issueType*** (Required): ID of the issueType to which the issues are being moved.  *  ***Destination parent ID or key*** (Optional): ID or key of the issue which will become the parent of the issues being moved. Only required when the destination issueType is a subtask.  # noqa: E501

        :return: The target_to_sources_mapping of this IssueBulkMovePayload.  # noqa: E501
        :rtype: dict(str, TargetToSourcesMapping)
        """
        return self._target_to_sources_mapping

    @target_to_sources_mapping.setter
    def target_to_sources_mapping(self, target_to_sources_mapping):
        """Sets the target_to_sources_mapping of this IssueBulkMovePayload.

        An object representing the mapping of issues and data related to destination entities, like fields and statuses, that are required during a bulk move.  The key is a string that is created by concatenating the following three entities in order, separated by commas. The format is `<project ID or key>,<issueType ID>,<parent ID or key>`. It should be unique across mappings provided in the payload. If you provide multiple mappings for the same key, only one will be processed. However, the operation won't fail, so the error may be hard to track down.   *  ***Destination project*** (Required): ID or key of the project to which the issues are being moved.  *  ***Destination issueType*** (Required): ID of the issueType to which the issues are being moved.  *  ***Destination parent ID or key*** (Optional): ID or key of the issue which will become the parent of the issues being moved. Only required when the destination issueType is a subtask.  # noqa: E501

        :param target_to_sources_mapping: The target_to_sources_mapping of this IssueBulkMovePayload.  # noqa: E501
        :type: dict(str, TargetToSourcesMapping)
        """

        self._target_to_sources_mapping = target_to_sources_mapping

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IssueBulkMovePayload, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IssueBulkMovePayload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
