# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IssueBulkTransitionForWorkflow(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'is_transitions_filtered': 'bool',
        'issues': 'list[str]',
        'transitions': 'list[SimplifiedIssueTransition]'
    }

    attribute_map = {
        'is_transitions_filtered': 'isTransitionsFiltered',
        'issues': 'issues',
        'transitions': 'transitions'
    }

    def __init__(self, is_transitions_filtered=None, issues=None, transitions=None):  # noqa: E501
        """IssueBulkTransitionForWorkflow - a model defined in Swagger"""  # noqa: E501
        self._is_transitions_filtered = None
        self._issues = None
        self._transitions = None
        self.discriminator = None
        if is_transitions_filtered is not None:
            self.is_transitions_filtered = is_transitions_filtered
        if issues is not None:
            self.issues = issues
        if transitions is not None:
            self.transitions = transitions

    @property
    def is_transitions_filtered(self):
        """Gets the is_transitions_filtered of this IssueBulkTransitionForWorkflow.  # noqa: E501

        Indicates whether all the transitions of this workflow are available in the transitions list or not.  # noqa: E501

        :return: The is_transitions_filtered of this IssueBulkTransitionForWorkflow.  # noqa: E501
        :rtype: bool
        """
        return self._is_transitions_filtered

    @is_transitions_filtered.setter
    def is_transitions_filtered(self, is_transitions_filtered):
        """Sets the is_transitions_filtered of this IssueBulkTransitionForWorkflow.

        Indicates whether all the transitions of this workflow are available in the transitions list or not.  # noqa: E501

        :param is_transitions_filtered: The is_transitions_filtered of this IssueBulkTransitionForWorkflow.  # noqa: E501
        :type: bool
        """

        self._is_transitions_filtered = is_transitions_filtered

    @property
    def issues(self):
        """Gets the issues of this IssueBulkTransitionForWorkflow.  # noqa: E501

        List of issue keys from the request which are associated with this workflow.  # noqa: E501

        :return: The issues of this IssueBulkTransitionForWorkflow.  # noqa: E501
        :rtype: list[str]
        """
        return self._issues

    @issues.setter
    def issues(self, issues):
        """Sets the issues of this IssueBulkTransitionForWorkflow.

        List of issue keys from the request which are associated with this workflow.  # noqa: E501

        :param issues: The issues of this IssueBulkTransitionForWorkflow.  # noqa: E501
        :type: list[str]
        """

        self._issues = issues

    @property
    def transitions(self):
        """Gets the transitions of this IssueBulkTransitionForWorkflow.  # noqa: E501

        List of transitions available for issues from the request which are associated with this workflow.   **This list includes only those transitions that are common across the issues in this workflow and do not involve any additional field updates.**   # noqa: E501

        :return: The transitions of this IssueBulkTransitionForWorkflow.  # noqa: E501
        :rtype: list[SimplifiedIssueTransition]
        """
        return self._transitions

    @transitions.setter
    def transitions(self, transitions):
        """Sets the transitions of this IssueBulkTransitionForWorkflow.

        List of transitions available for issues from the request which are associated with this workflow.   **This list includes only those transitions that are common across the issues in this workflow and do not involve any additional field updates.**   # noqa: E501

        :param transitions: The transitions of this IssueBulkTransitionForWorkflow.  # noqa: E501
        :type: list[SimplifiedIssueTransition]
        """

        self._transitions = transitions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IssueBulkTransitionForWorkflow, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IssueBulkTransitionForWorkflow):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
