# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IssueFieldOptionScopeBean(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_global': 'AllOfIssueFieldOptionScopeBeanGlobal',
        'projects': 'list[int]',
        'projects2': 'list[ProjectScopeBean]'
    }

    attribute_map = {
        '_global': 'global',
        'projects': 'projects',
        'projects2': 'projects2'
    }

    def __init__(self, _global=None, projects=None, projects2=None):  # noqa: E501
        """IssueFieldOptionScopeBean - a model defined in Swagger"""  # noqa: E501
        self.__global = None
        self._projects = None
        self._projects2 = None
        self.discriminator = None
        if _global is not None:
            self._global = _global
        if projects is not None:
            self.projects = projects
        if projects2 is not None:
            self.projects2 = projects2

    @property
    def _global(self):
        """Gets the _global of this IssueFieldOptionScopeBean.  # noqa: E501

        Defines the behavior of the option within the global context. If this property is set, even if set to an empty object, then the option is available in all projects.  # noqa: E501

        :return: The _global of this IssueFieldOptionScopeBean.  # noqa: E501
        :rtype: AllOfIssueFieldOptionScopeBeanGlobal
        """
        return self.__global

    @_global.setter
    def _global(self, _global):
        """Sets the _global of this IssueFieldOptionScopeBean.

        Defines the behavior of the option within the global context. If this property is set, even if set to an empty object, then the option is available in all projects.  # noqa: E501

        :param _global: The _global of this IssueFieldOptionScopeBean.  # noqa: E501
        :type: AllOfIssueFieldOptionScopeBeanGlobal
        """

        self.__global = _global

    @property
    def projects(self):
        """Gets the projects of this IssueFieldOptionScopeBean.  # noqa: E501

        DEPRECATED  # noqa: E501

        :return: The projects of this IssueFieldOptionScopeBean.  # noqa: E501
        :rtype: list[int]
        """
        return self._projects

    @projects.setter
    def projects(self, projects):
        """Sets the projects of this IssueFieldOptionScopeBean.

        DEPRECATED  # noqa: E501

        :param projects: The projects of this IssueFieldOptionScopeBean.  # noqa: E501
        :type: list[int]
        """

        self._projects = projects

    @property
    def projects2(self):
        """Gets the projects2 of this IssueFieldOptionScopeBean.  # noqa: E501

        Defines the projects in which the option is available and the behavior of the option within each project. Specify one object per project. The behavior of the option in a project context overrides the behavior in the global context.  # noqa: E501

        :return: The projects2 of this IssueFieldOptionScopeBean.  # noqa: E501
        :rtype: list[ProjectScopeBean]
        """
        return self._projects2

    @projects2.setter
    def projects2(self, projects2):
        """Sets the projects2 of this IssueFieldOptionScopeBean.

        Defines the projects in which the option is available and the behavior of the option within each project. Specify one object per project. The behavior of the option in a project context overrides the behavior in the global context.  # noqa: E501

        :param projects2: The projects2 of this IssueFieldOptionScopeBean.  # noqa: E501
        :type: list[ProjectScopeBean]
        """

        self._projects2 = projects2

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IssueFieldOptionScopeBean, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IssueFieldOptionScopeBean):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
