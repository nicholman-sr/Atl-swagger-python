# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IssueLayoutPayload(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'container_id': 'ProjectCreateResourceIdentifier',
        'issue_layout_type': 'str',
        'items': 'list[IssueLayoutItemPayload]',
        'pcri': 'ProjectCreateResourceIdentifier'
    }

    attribute_map = {
        'container_id': 'containerId',
        'issue_layout_type': 'issueLayoutType',
        'items': 'items',
        'pcri': 'pcri'
    }

    def __init__(self, container_id=None, issue_layout_type=None, items=None, pcri=None):  # noqa: E501
        """IssueLayoutPayload - a model defined in Swagger"""  # noqa: E501
        self._container_id = None
        self._issue_layout_type = None
        self._items = None
        self._pcri = None
        self.discriminator = None
        if container_id is not None:
            self.container_id = container_id
        if issue_layout_type is not None:
            self.issue_layout_type = issue_layout_type
        if items is not None:
            self.items = items
        if pcri is not None:
            self.pcri = pcri

    @property
    def container_id(self):
        """Gets the container_id of this IssueLayoutPayload.  # noqa: E501


        :return: The container_id of this IssueLayoutPayload.  # noqa: E501
        :rtype: ProjectCreateResourceIdentifier
        """
        return self._container_id

    @container_id.setter
    def container_id(self, container_id):
        """Sets the container_id of this IssueLayoutPayload.


        :param container_id: The container_id of this IssueLayoutPayload.  # noqa: E501
        :type: ProjectCreateResourceIdentifier
        """

        self._container_id = container_id

    @property
    def issue_layout_type(self):
        """Gets the issue_layout_type of this IssueLayoutPayload.  # noqa: E501

        The issue layout type  # noqa: E501

        :return: The issue_layout_type of this IssueLayoutPayload.  # noqa: E501
        :rtype: str
        """
        return self._issue_layout_type

    @issue_layout_type.setter
    def issue_layout_type(self, issue_layout_type):
        """Sets the issue_layout_type of this IssueLayoutPayload.

        The issue layout type  # noqa: E501

        :param issue_layout_type: The issue_layout_type of this IssueLayoutPayload.  # noqa: E501
        :type: str
        """
        allowed_values = ["ISSUE_VIEW", "ISSUE_CREATE", "REQUEST_FORM"]  # noqa: E501
        if issue_layout_type not in allowed_values:
            raise ValueError(
                "Invalid value for `issue_layout_type` ({0}), must be one of {1}"  # noqa: E501
                .format(issue_layout_type, allowed_values)
            )

        self._issue_layout_type = issue_layout_type

    @property
    def items(self):
        """Gets the items of this IssueLayoutPayload.  # noqa: E501

        The configuration of items in the issue layout  # noqa: E501

        :return: The items of this IssueLayoutPayload.  # noqa: E501
        :rtype: list[IssueLayoutItemPayload]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this IssueLayoutPayload.

        The configuration of items in the issue layout  # noqa: E501

        :param items: The items of this IssueLayoutPayload.  # noqa: E501
        :type: list[IssueLayoutItemPayload]
        """

        self._items = items

    @property
    def pcri(self):
        """Gets the pcri of this IssueLayoutPayload.  # noqa: E501


        :return: The pcri of this IssueLayoutPayload.  # noqa: E501
        :rtype: ProjectCreateResourceIdentifier
        """
        return self._pcri

    @pcri.setter
    def pcri(self, pcri):
        """Sets the pcri of this IssueLayoutPayload.


        :param pcri: The pcri of this IssueLayoutPayload.  # noqa: E501
        :type: ProjectCreateResourceIdentifier
        """

        self._pcri = pcri

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IssueLayoutPayload, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IssueLayoutPayload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
