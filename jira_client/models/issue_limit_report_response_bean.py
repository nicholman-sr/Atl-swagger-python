# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IssueLimitReportResponseBean(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'issues_approaching_limit': 'dict(str, dict(str, int))',
        'issues_breaching_limit': 'dict(str, dict(str, int))',
        'limits': 'dict(str, int)'
    }

    attribute_map = {
        'issues_approaching_limit': 'issuesApproachingLimit',
        'issues_breaching_limit': 'issuesBreachingLimit',
        'limits': 'limits'
    }

    def __init__(self, issues_approaching_limit=None, issues_breaching_limit=None, limits=None):  # noqa: E501
        """IssueLimitReportResponseBean - a model defined in Swagger"""  # noqa: E501
        self._issues_approaching_limit = None
        self._issues_breaching_limit = None
        self._limits = None
        self.discriminator = None
        if issues_approaching_limit is not None:
            self.issues_approaching_limit = issues_approaching_limit
        if issues_breaching_limit is not None:
            self.issues_breaching_limit = issues_breaching_limit
        if limits is not None:
            self.limits = limits

    @property
    def issues_approaching_limit(self):
        """Gets the issues_approaching_limit of this IssueLimitReportResponseBean.  # noqa: E501

        A list of ids of issues approaching the limit and their field count  # noqa: E501

        :return: The issues_approaching_limit of this IssueLimitReportResponseBean.  # noqa: E501
        :rtype: dict(str, dict(str, int))
        """
        return self._issues_approaching_limit

    @issues_approaching_limit.setter
    def issues_approaching_limit(self, issues_approaching_limit):
        """Sets the issues_approaching_limit of this IssueLimitReportResponseBean.

        A list of ids of issues approaching the limit and their field count  # noqa: E501

        :param issues_approaching_limit: The issues_approaching_limit of this IssueLimitReportResponseBean.  # noqa: E501
        :type: dict(str, dict(str, int))
        """

        self._issues_approaching_limit = issues_approaching_limit

    @property
    def issues_breaching_limit(self):
        """Gets the issues_breaching_limit of this IssueLimitReportResponseBean.  # noqa: E501

        A list of ids of issues breaching the limit and their field count  # noqa: E501

        :return: The issues_breaching_limit of this IssueLimitReportResponseBean.  # noqa: E501
        :rtype: dict(str, dict(str, int))
        """
        return self._issues_breaching_limit

    @issues_breaching_limit.setter
    def issues_breaching_limit(self, issues_breaching_limit):
        """Sets the issues_breaching_limit of this IssueLimitReportResponseBean.

        A list of ids of issues breaching the limit and their field count  # noqa: E501

        :param issues_breaching_limit: The issues_breaching_limit of this IssueLimitReportResponseBean.  # noqa: E501
        :type: dict(str, dict(str, int))
        """

        self._issues_breaching_limit = issues_breaching_limit

    @property
    def limits(self):
        """Gets the limits of this IssueLimitReportResponseBean.  # noqa: E501

        The fields and their defined limits  # noqa: E501

        :return: The limits of this IssueLimitReportResponseBean.  # noqa: E501
        :rtype: dict(str, int)
        """
        return self._limits

    @limits.setter
    def limits(self, limits):
        """Sets the limits of this IssueLimitReportResponseBean.

        The fields and their defined limits  # noqa: E501

        :param limits: The limits of this IssueLimitReportResponseBean.  # noqa: E501
        :type: dict(str, int)
        """

        self._limits = limits

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IssueLimitReportResponseBean, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IssueLimitReportResponseBean):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
