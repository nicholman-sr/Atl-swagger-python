# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IssueSecurityLevelMember(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'holder': 'AllOfIssueSecurityLevelMemberHolder',
        'id': 'int',
        'issue_security_level_id': 'int'
    }

    attribute_map = {
        'holder': 'holder',
        'id': 'id',
        'issue_security_level_id': 'issueSecurityLevelId'
    }

    def __init__(self, holder=None, id=None, issue_security_level_id=None):  # noqa: E501
        """IssueSecurityLevelMember - a model defined in Swagger"""  # noqa: E501
        self._holder = None
        self._id = None
        self._issue_security_level_id = None
        self.discriminator = None
        self.holder = holder
        self.id = id
        self.issue_security_level_id = issue_security_level_id

    @property
    def holder(self):
        """Gets the holder of this IssueSecurityLevelMember.  # noqa: E501

        The user or group being granted the permission. It consists of a `type` and a type-dependent `parameter`. See [Holder object](../api-group-permission-schemes/#holder-object) in *Get all permission schemes* for more information.  # noqa: E501

        :return: The holder of this IssueSecurityLevelMember.  # noqa: E501
        :rtype: AllOfIssueSecurityLevelMemberHolder
        """
        return self._holder

    @holder.setter
    def holder(self, holder):
        """Sets the holder of this IssueSecurityLevelMember.

        The user or group being granted the permission. It consists of a `type` and a type-dependent `parameter`. See [Holder object](../api-group-permission-schemes/#holder-object) in *Get all permission schemes* for more information.  # noqa: E501

        :param holder: The holder of this IssueSecurityLevelMember.  # noqa: E501
        :type: AllOfIssueSecurityLevelMemberHolder
        """
        if holder is None:
            raise ValueError("Invalid value for `holder`, must not be `None`")  # noqa: E501

        self._holder = holder

    @property
    def id(self):
        """Gets the id of this IssueSecurityLevelMember.  # noqa: E501

        The ID of the issue security level member.  # noqa: E501

        :return: The id of this IssueSecurityLevelMember.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this IssueSecurityLevelMember.

        The ID of the issue security level member.  # noqa: E501

        :param id: The id of this IssueSecurityLevelMember.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def issue_security_level_id(self):
        """Gets the issue_security_level_id of this IssueSecurityLevelMember.  # noqa: E501

        The ID of the issue security level.  # noqa: E501

        :return: The issue_security_level_id of this IssueSecurityLevelMember.  # noqa: E501
        :rtype: int
        """
        return self._issue_security_level_id

    @issue_security_level_id.setter
    def issue_security_level_id(self, issue_security_level_id):
        """Sets the issue_security_level_id of this IssueSecurityLevelMember.

        The ID of the issue security level.  # noqa: E501

        :param issue_security_level_id: The issue_security_level_id of this IssueSecurityLevelMember.  # noqa: E501
        :type: int
        """
        if issue_security_level_id is None:
            raise ValueError("Invalid value for `issue_security_level_id`, must not be `None`")  # noqa: E501

        self._issue_security_level_id = issue_security_level_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IssueSecurityLevelMember, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IssueSecurityLevelMember):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
