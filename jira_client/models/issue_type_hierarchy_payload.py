# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IssueTypeHierarchyPayload(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'hierarchy_level': 'int',
        'name': 'str',
        'on_conflict': 'str',
        'pcri': 'ProjectCreateResourceIdentifier'
    }

    attribute_map = {
        'hierarchy_level': 'hierarchyLevel',
        'name': 'name',
        'on_conflict': 'onConflict',
        'pcri': 'pcri'
    }

    def __init__(self, hierarchy_level=None, name=None, on_conflict=None, pcri=None):  # noqa: E501
        """IssueTypeHierarchyPayload - a model defined in Swagger"""  # noqa: E501
        self._hierarchy_level = None
        self._name = None
        self._on_conflict = None
        self._pcri = None
        self.discriminator = None
        if hierarchy_level is not None:
            self.hierarchy_level = hierarchy_level
        if name is not None:
            self.name = name
        if on_conflict is not None:
            self.on_conflict = on_conflict
        if pcri is not None:
            self.pcri = pcri

    @property
    def hierarchy_level(self):
        """Gets the hierarchy_level of this IssueTypeHierarchyPayload.  # noqa: E501

        The hierarchy level of the issue type. 0, 1, 2, 3 .. n; Negative values for subtasks  # noqa: E501

        :return: The hierarchy_level of this IssueTypeHierarchyPayload.  # noqa: E501
        :rtype: int
        """
        return self._hierarchy_level

    @hierarchy_level.setter
    def hierarchy_level(self, hierarchy_level):
        """Sets the hierarchy_level of this IssueTypeHierarchyPayload.

        The hierarchy level of the issue type. 0, 1, 2, 3 .. n; Negative values for subtasks  # noqa: E501

        :param hierarchy_level: The hierarchy_level of this IssueTypeHierarchyPayload.  # noqa: E501
        :type: int
        """

        self._hierarchy_level = hierarchy_level

    @property
    def name(self):
        """Gets the name of this IssueTypeHierarchyPayload.  # noqa: E501

        The name of the issue type  # noqa: E501

        :return: The name of this IssueTypeHierarchyPayload.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IssueTypeHierarchyPayload.

        The name of the issue type  # noqa: E501

        :param name: The name of this IssueTypeHierarchyPayload.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def on_conflict(self):
        """Gets the on_conflict of this IssueTypeHierarchyPayload.  # noqa: E501

        The conflict strategy to use when the issue type already exists. FAIL - Fail execution, this always needs to be unique; USE - Use the existing entity and ignore new entity parameters  # noqa: E501

        :return: The on_conflict of this IssueTypeHierarchyPayload.  # noqa: E501
        :rtype: str
        """
        return self._on_conflict

    @on_conflict.setter
    def on_conflict(self, on_conflict):
        """Sets the on_conflict of this IssueTypeHierarchyPayload.

        The conflict strategy to use when the issue type already exists. FAIL - Fail execution, this always needs to be unique; USE - Use the existing entity and ignore new entity parameters  # noqa: E501

        :param on_conflict: The on_conflict of this IssueTypeHierarchyPayload.  # noqa: E501
        :type: str
        """
        allowed_values = ["FAIL", "USE", "NEW"]  # noqa: E501
        if on_conflict not in allowed_values:
            raise ValueError(
                "Invalid value for `on_conflict` ({0}), must be one of {1}"  # noqa: E501
                .format(on_conflict, allowed_values)
            )

        self._on_conflict = on_conflict

    @property
    def pcri(self):
        """Gets the pcri of this IssueTypeHierarchyPayload.  # noqa: E501


        :return: The pcri of this IssueTypeHierarchyPayload.  # noqa: E501
        :rtype: ProjectCreateResourceIdentifier
        """
        return self._pcri

    @pcri.setter
    def pcri(self, pcri):
        """Sets the pcri of this IssueTypeHierarchyPayload.


        :param pcri: The pcri of this IssueTypeHierarchyPayload.  # noqa: E501
        :type: ProjectCreateResourceIdentifier
        """

        self._pcri = pcri

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IssueTypeHierarchyPayload, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IssueTypeHierarchyPayload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
