# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IssueTypeWorkflowMapping(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'issue_type': 'str',
        'update_draft_if_needed': 'bool',
        'workflow': 'str'
    }

    attribute_map = {
        'issue_type': 'issueType',
        'update_draft_if_needed': 'updateDraftIfNeeded',
        'workflow': 'workflow'
    }

    def __init__(self, issue_type=None, update_draft_if_needed=None, workflow=None):  # noqa: E501
        """IssueTypeWorkflowMapping - a model defined in Swagger"""  # noqa: E501
        self._issue_type = None
        self._update_draft_if_needed = None
        self._workflow = None
        self.discriminator = None
        if issue_type is not None:
            self.issue_type = issue_type
        if update_draft_if_needed is not None:
            self.update_draft_if_needed = update_draft_if_needed
        if workflow is not None:
            self.workflow = workflow

    @property
    def issue_type(self):
        """Gets the issue_type of this IssueTypeWorkflowMapping.  # noqa: E501

        The ID of the issue type. Not required if updating the issue type-workflow mapping.  # noqa: E501

        :return: The issue_type of this IssueTypeWorkflowMapping.  # noqa: E501
        :rtype: str
        """
        return self._issue_type

    @issue_type.setter
    def issue_type(self, issue_type):
        """Sets the issue_type of this IssueTypeWorkflowMapping.

        The ID of the issue type. Not required if updating the issue type-workflow mapping.  # noqa: E501

        :param issue_type: The issue_type of this IssueTypeWorkflowMapping.  # noqa: E501
        :type: str
        """

        self._issue_type = issue_type

    @property
    def update_draft_if_needed(self):
        """Gets the update_draft_if_needed of this IssueTypeWorkflowMapping.  # noqa: E501

        Set to true to create or update the draft of a workflow scheme and update the mapping in the draft, when the workflow scheme cannot be edited. Defaults to `false`. Only applicable when updating the workflow-issue types mapping.  # noqa: E501

        :return: The update_draft_if_needed of this IssueTypeWorkflowMapping.  # noqa: E501
        :rtype: bool
        """
        return self._update_draft_if_needed

    @update_draft_if_needed.setter
    def update_draft_if_needed(self, update_draft_if_needed):
        """Sets the update_draft_if_needed of this IssueTypeWorkflowMapping.

        Set to true to create or update the draft of a workflow scheme and update the mapping in the draft, when the workflow scheme cannot be edited. Defaults to `false`. Only applicable when updating the workflow-issue types mapping.  # noqa: E501

        :param update_draft_if_needed: The update_draft_if_needed of this IssueTypeWorkflowMapping.  # noqa: E501
        :type: bool
        """

        self._update_draft_if_needed = update_draft_if_needed

    @property
    def workflow(self):
        """Gets the workflow of this IssueTypeWorkflowMapping.  # noqa: E501

        The name of the workflow.  # noqa: E501

        :return: The workflow of this IssueTypeWorkflowMapping.  # noqa: E501
        :rtype: str
        """
        return self._workflow

    @workflow.setter
    def workflow(self, workflow):
        """Sets the workflow of this IssueTypeWorkflowMapping.

        The name of the workflow.  # noqa: E501

        :param workflow: The workflow of this IssueTypeWorkflowMapping.  # noqa: E501
        :type: str
        """

        self._workflow = workflow

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IssueTypeWorkflowMapping, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IssueTypeWorkflowMapping):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
