# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class JexpEvaluateCtxJqlIssues(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'max_results': 'int',
        'next_page_token': 'str',
        'query': 'str'
    }

    attribute_map = {
        'max_results': 'maxResults',
        'next_page_token': 'nextPageToken',
        'query': 'query'
    }

    def __init__(self, max_results=None, next_page_token=None, query=None):  # noqa: E501
        """JexpEvaluateCtxJqlIssues - a model defined in Swagger"""  # noqa: E501
        self._max_results = None
        self._next_page_token = None
        self._query = None
        self.discriminator = None
        if max_results is not None:
            self.max_results = max_results
        if next_page_token is not None:
            self.next_page_token = next_page_token
        if query is not None:
            self.query = query

    @property
    def max_results(self):
        """Gets the max_results of this JexpEvaluateCtxJqlIssues.  # noqa: E501

        The maximum number of issues to return from the JQL query. max results value considered may be lower than the number specific here.  # noqa: E501

        :return: The max_results of this JexpEvaluateCtxJqlIssues.  # noqa: E501
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this JexpEvaluateCtxJqlIssues.

        The maximum number of issues to return from the JQL query. max results value considered may be lower than the number specific here.  # noqa: E501

        :param max_results: The max_results of this JexpEvaluateCtxJqlIssues.  # noqa: E501
        :type: int
        """

        self._max_results = max_results

    @property
    def next_page_token(self):
        """Gets the next_page_token of this JexpEvaluateCtxJqlIssues.  # noqa: E501

        The token for a page to fetch that is not the first page. The first page has a `nextPageToken` of `null`. Use the `nextPageToken` to fetch the next page of issues.  # noqa: E501

        :return: The next_page_token of this JexpEvaluateCtxJqlIssues.  # noqa: E501
        :rtype: str
        """
        return self._next_page_token

    @next_page_token.setter
    def next_page_token(self, next_page_token):
        """Sets the next_page_token of this JexpEvaluateCtxJqlIssues.

        The token for a page to fetch that is not the first page. The first page has a `nextPageToken` of `null`. Use the `nextPageToken` to fetch the next page of issues.  # noqa: E501

        :param next_page_token: The next_page_token of this JexpEvaluateCtxJqlIssues.  # noqa: E501
        :type: str
        """

        self._next_page_token = next_page_token

    @property
    def query(self):
        """Gets the query of this JexpEvaluateCtxJqlIssues.  # noqa: E501

        The JQL query, required to be bounded. Additionally, `orderBy` clause can contain a maximum of 7 fields  # noqa: E501

        :return: The query of this JexpEvaluateCtxJqlIssues.  # noqa: E501
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this JexpEvaluateCtxJqlIssues.

        The JQL query, required to be bounded. Additionally, `orderBy` clause can contain a maximum of 7 fields  # noqa: E501

        :param query: The query of this JexpEvaluateCtxJqlIssues.  # noqa: E501
        :type: str
        """

        self._query = query

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JexpEvaluateCtxJqlIssues, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JexpEvaluateCtxJqlIssues):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
