# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class JiraExpressionAnalysis(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'complexity': 'JiraExpressionComplexity',
        'errors': 'list[JiraExpressionValidationError]',
        'expression': 'str',
        'type': 'str',
        'valid': 'bool'
    }

    attribute_map = {
        'complexity': 'complexity',
        'errors': 'errors',
        'expression': 'expression',
        'type': 'type',
        'valid': 'valid'
    }

    def __init__(self, complexity=None, errors=None, expression=None, type=None, valid=None):  # noqa: E501
        """JiraExpressionAnalysis - a model defined in Swagger"""  # noqa: E501
        self._complexity = None
        self._errors = None
        self._expression = None
        self._type = None
        self._valid = None
        self.discriminator = None
        if complexity is not None:
            self.complexity = complexity
        if errors is not None:
            self.errors = errors
        self.expression = expression
        if type is not None:
            self.type = type
        self.valid = valid

    @property
    def complexity(self):
        """Gets the complexity of this JiraExpressionAnalysis.  # noqa: E501


        :return: The complexity of this JiraExpressionAnalysis.  # noqa: E501
        :rtype: JiraExpressionComplexity
        """
        return self._complexity

    @complexity.setter
    def complexity(self, complexity):
        """Sets the complexity of this JiraExpressionAnalysis.


        :param complexity: The complexity of this JiraExpressionAnalysis.  # noqa: E501
        :type: JiraExpressionComplexity
        """

        self._complexity = complexity

    @property
    def errors(self):
        """Gets the errors of this JiraExpressionAnalysis.  # noqa: E501

        A list of validation errors. Not included if the expression is valid.  # noqa: E501

        :return: The errors of this JiraExpressionAnalysis.  # noqa: E501
        :rtype: list[JiraExpressionValidationError]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this JiraExpressionAnalysis.

        A list of validation errors. Not included if the expression is valid.  # noqa: E501

        :param errors: The errors of this JiraExpressionAnalysis.  # noqa: E501
        :type: list[JiraExpressionValidationError]
        """

        self._errors = errors

    @property
    def expression(self):
        """Gets the expression of this JiraExpressionAnalysis.  # noqa: E501

        The analysed expression.  # noqa: E501

        :return: The expression of this JiraExpressionAnalysis.  # noqa: E501
        :rtype: str
        """
        return self._expression

    @expression.setter
    def expression(self, expression):
        """Sets the expression of this JiraExpressionAnalysis.

        The analysed expression.  # noqa: E501

        :param expression: The expression of this JiraExpressionAnalysis.  # noqa: E501
        :type: str
        """
        if expression is None:
            raise ValueError("Invalid value for `expression`, must not be `None`")  # noqa: E501

        self._expression = expression

    @property
    def type(self):
        """Gets the type of this JiraExpressionAnalysis.  # noqa: E501

        EXPERIMENTAL. The inferred type of the expression.  # noqa: E501

        :return: The type of this JiraExpressionAnalysis.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this JiraExpressionAnalysis.

        EXPERIMENTAL. The inferred type of the expression.  # noqa: E501

        :param type: The type of this JiraExpressionAnalysis.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def valid(self):
        """Gets the valid of this JiraExpressionAnalysis.  # noqa: E501

        Whether the expression is valid and the interpreter will evaluate it. Note that the expression may fail at runtime (for example, if it executes too many expensive operations).  # noqa: E501

        :return: The valid of this JiraExpressionAnalysis.  # noqa: E501
        :rtype: bool
        """
        return self._valid

    @valid.setter
    def valid(self, valid):
        """Sets the valid of this JiraExpressionAnalysis.

        Whether the expression is valid and the interpreter will evaluate it. Note that the expression may fail at runtime (for example, if it executes too many expensive operations).  # noqa: E501

        :param valid: The valid of this JiraExpressionAnalysis.  # noqa: E501
        :type: bool
        """
        if valid is None:
            raise ValueError("Invalid value for `valid`, must not be `None`")  # noqa: E501

        self._valid = valid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JiraExpressionAnalysis, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JiraExpressionAnalysis):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
