# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class JiraExpressionEvaluateContextBean(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'board': 'int',
        'custom': 'list[CustomContextVariable]',
        'customer_request': 'int',
        'issue': 'AllOfJiraExpressionEvaluateContextBeanIssue',
        'issues': 'AllOfJiraExpressionEvaluateContextBeanIssues',
        'project': 'AllOfJiraExpressionEvaluateContextBeanProject',
        'service_desk': 'int',
        'sprint': 'int'
    }

    attribute_map = {
        'board': 'board',
        'custom': 'custom',
        'customer_request': 'customerRequest',
        'issue': 'issue',
        'issues': 'issues',
        'project': 'project',
        'service_desk': 'serviceDesk',
        'sprint': 'sprint'
    }

    def __init__(self, board=None, custom=None, customer_request=None, issue=None, issues=None, project=None, service_desk=None, sprint=None):  # noqa: E501
        """JiraExpressionEvaluateContextBean - a model defined in Swagger"""  # noqa: E501
        self._board = None
        self._custom = None
        self._customer_request = None
        self._issue = None
        self._issues = None
        self._project = None
        self._service_desk = None
        self._sprint = None
        self.discriminator = None
        if board is not None:
            self.board = board
        if custom is not None:
            self.custom = custom
        if customer_request is not None:
            self.customer_request = customer_request
        if issue is not None:
            self.issue = issue
        if issues is not None:
            self.issues = issues
        if project is not None:
            self.project = project
        if service_desk is not None:
            self.service_desk = service_desk
        if sprint is not None:
            self.sprint = sprint

    @property
    def board(self):
        """Gets the board of this JiraExpressionEvaluateContextBean.  # noqa: E501

        The ID of the board that is available under the `board` variable when evaluating the expression.  # noqa: E501

        :return: The board of this JiraExpressionEvaluateContextBean.  # noqa: E501
        :rtype: int
        """
        return self._board

    @board.setter
    def board(self, board):
        """Sets the board of this JiraExpressionEvaluateContextBean.

        The ID of the board that is available under the `board` variable when evaluating the expression.  # noqa: E501

        :param board: The board of this JiraExpressionEvaluateContextBean.  # noqa: E501
        :type: int
        """

        self._board = board

    @property
    def custom(self):
        """Gets the custom of this JiraExpressionEvaluateContextBean.  # noqa: E501

        Custom context variables and their types. These variable types are available for use in a custom context:   *  `user`: A [user](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#user) specified as an Atlassian account ID.  *  `issue`: An [issue](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#issue) specified by ID or key. All the fields of the issue object are available in the Jira expression.  *  `json`: A JSON object containing custom content.  *  `list`: A JSON list of `user`, `issue`, or `json` variable types.  # noqa: E501

        :return: The custom of this JiraExpressionEvaluateContextBean.  # noqa: E501
        :rtype: list[CustomContextVariable]
        """
        return self._custom

    @custom.setter
    def custom(self, custom):
        """Sets the custom of this JiraExpressionEvaluateContextBean.

        Custom context variables and their types. These variable types are available for use in a custom context:   *  `user`: A [user](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#user) specified as an Atlassian account ID.  *  `issue`: An [issue](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#issue) specified by ID or key. All the fields of the issue object are available in the Jira expression.  *  `json`: A JSON object containing custom content.  *  `list`: A JSON list of `user`, `issue`, or `json` variable types.  # noqa: E501

        :param custom: The custom of this JiraExpressionEvaluateContextBean.  # noqa: E501
        :type: list[CustomContextVariable]
        """

        self._custom = custom

    @property
    def customer_request(self):
        """Gets the customer_request of this JiraExpressionEvaluateContextBean.  # noqa: E501

        The ID of the customer request that is available under the `customerRequest` variable when evaluating the expression. This is the same as the ID of the underlying Jira issue, but the customer request context variable will have a different type.  # noqa: E501

        :return: The customer_request of this JiraExpressionEvaluateContextBean.  # noqa: E501
        :rtype: int
        """
        return self._customer_request

    @customer_request.setter
    def customer_request(self, customer_request):
        """Sets the customer_request of this JiraExpressionEvaluateContextBean.

        The ID of the customer request that is available under the `customerRequest` variable when evaluating the expression. This is the same as the ID of the underlying Jira issue, but the customer request context variable will have a different type.  # noqa: E501

        :param customer_request: The customer_request of this JiraExpressionEvaluateContextBean.  # noqa: E501
        :type: int
        """

        self._customer_request = customer_request

    @property
    def issue(self):
        """Gets the issue of this JiraExpressionEvaluateContextBean.  # noqa: E501

        The issue that is available under the `issue` variable when evaluating the expression.  # noqa: E501

        :return: The issue of this JiraExpressionEvaluateContextBean.  # noqa: E501
        :rtype: AllOfJiraExpressionEvaluateContextBeanIssue
        """
        return self._issue

    @issue.setter
    def issue(self, issue):
        """Sets the issue of this JiraExpressionEvaluateContextBean.

        The issue that is available under the `issue` variable when evaluating the expression.  # noqa: E501

        :param issue: The issue of this JiraExpressionEvaluateContextBean.  # noqa: E501
        :type: AllOfJiraExpressionEvaluateContextBeanIssue
        """

        self._issue = issue

    @property
    def issues(self):
        """Gets the issues of this JiraExpressionEvaluateContextBean.  # noqa: E501

        The collection of issues that is available under the `issues` variable when evaluating the expression.  # noqa: E501

        :return: The issues of this JiraExpressionEvaluateContextBean.  # noqa: E501
        :rtype: AllOfJiraExpressionEvaluateContextBeanIssues
        """
        return self._issues

    @issues.setter
    def issues(self, issues):
        """Sets the issues of this JiraExpressionEvaluateContextBean.

        The collection of issues that is available under the `issues` variable when evaluating the expression.  # noqa: E501

        :param issues: The issues of this JiraExpressionEvaluateContextBean.  # noqa: E501
        :type: AllOfJiraExpressionEvaluateContextBeanIssues
        """

        self._issues = issues

    @property
    def project(self):
        """Gets the project of this JiraExpressionEvaluateContextBean.  # noqa: E501

        The project that is available under the `project` variable when evaluating the expression.  # noqa: E501

        :return: The project of this JiraExpressionEvaluateContextBean.  # noqa: E501
        :rtype: AllOfJiraExpressionEvaluateContextBeanProject
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this JiraExpressionEvaluateContextBean.

        The project that is available under the `project` variable when evaluating the expression.  # noqa: E501

        :param project: The project of this JiraExpressionEvaluateContextBean.  # noqa: E501
        :type: AllOfJiraExpressionEvaluateContextBeanProject
        """

        self._project = project

    @property
    def service_desk(self):
        """Gets the service_desk of this JiraExpressionEvaluateContextBean.  # noqa: E501

        The ID of the service desk that is available under the `serviceDesk` variable when evaluating the expression.  # noqa: E501

        :return: The service_desk of this JiraExpressionEvaluateContextBean.  # noqa: E501
        :rtype: int
        """
        return self._service_desk

    @service_desk.setter
    def service_desk(self, service_desk):
        """Sets the service_desk of this JiraExpressionEvaluateContextBean.

        The ID of the service desk that is available under the `serviceDesk` variable when evaluating the expression.  # noqa: E501

        :param service_desk: The service_desk of this JiraExpressionEvaluateContextBean.  # noqa: E501
        :type: int
        """

        self._service_desk = service_desk

    @property
    def sprint(self):
        """Gets the sprint of this JiraExpressionEvaluateContextBean.  # noqa: E501

        The ID of the sprint that is available under the `sprint` variable when evaluating the expression.  # noqa: E501

        :return: The sprint of this JiraExpressionEvaluateContextBean.  # noqa: E501
        :rtype: int
        """
        return self._sprint

    @sprint.setter
    def sprint(self, sprint):
        """Sets the sprint of this JiraExpressionEvaluateContextBean.

        The ID of the sprint that is available under the `sprint` variable when evaluating the expression.  # noqa: E501

        :param sprint: The sprint of this JiraExpressionEvaluateContextBean.  # noqa: E501
        :type: int
        """

        self._sprint = sprint

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JiraExpressionEvaluateContextBean, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JiraExpressionEvaluateContextBean):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
