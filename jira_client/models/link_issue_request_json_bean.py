# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LinkIssueRequestJsonBean(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'comment': 'Comment',
        'inward_issue': 'LinkedIssue',
        'outward_issue': 'LinkedIssue',
        'type': 'IssueLinkType'
    }

    attribute_map = {
        'comment': 'comment',
        'inward_issue': 'inwardIssue',
        'outward_issue': 'outwardIssue',
        'type': 'type'
    }

    def __init__(self, comment=None, inward_issue=None, outward_issue=None, type=None):  # noqa: E501
        """LinkIssueRequestJsonBean - a model defined in Swagger"""  # noqa: E501
        self._comment = None
        self._inward_issue = None
        self._outward_issue = None
        self._type = None
        self.discriminator = None
        if comment is not None:
            self.comment = comment
        self.inward_issue = inward_issue
        self.outward_issue = outward_issue
        self.type = type

    @property
    def comment(self):
        """Gets the comment of this LinkIssueRequestJsonBean.  # noqa: E501


        :return: The comment of this LinkIssueRequestJsonBean.  # noqa: E501
        :rtype: Comment
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this LinkIssueRequestJsonBean.


        :param comment: The comment of this LinkIssueRequestJsonBean.  # noqa: E501
        :type: Comment
        """

        self._comment = comment

    @property
    def inward_issue(self):
        """Gets the inward_issue of this LinkIssueRequestJsonBean.  # noqa: E501


        :return: The inward_issue of this LinkIssueRequestJsonBean.  # noqa: E501
        :rtype: LinkedIssue
        """
        return self._inward_issue

    @inward_issue.setter
    def inward_issue(self, inward_issue):
        """Sets the inward_issue of this LinkIssueRequestJsonBean.


        :param inward_issue: The inward_issue of this LinkIssueRequestJsonBean.  # noqa: E501
        :type: LinkedIssue
        """
        if inward_issue is None:
            raise ValueError("Invalid value for `inward_issue`, must not be `None`")  # noqa: E501

        self._inward_issue = inward_issue

    @property
    def outward_issue(self):
        """Gets the outward_issue of this LinkIssueRequestJsonBean.  # noqa: E501


        :return: The outward_issue of this LinkIssueRequestJsonBean.  # noqa: E501
        :rtype: LinkedIssue
        """
        return self._outward_issue

    @outward_issue.setter
    def outward_issue(self, outward_issue):
        """Sets the outward_issue of this LinkIssueRequestJsonBean.


        :param outward_issue: The outward_issue of this LinkIssueRequestJsonBean.  # noqa: E501
        :type: LinkedIssue
        """
        if outward_issue is None:
            raise ValueError("Invalid value for `outward_issue`, must not be `None`")  # noqa: E501

        self._outward_issue = outward_issue

    @property
    def type(self):
        """Gets the type of this LinkIssueRequestJsonBean.  # noqa: E501


        :return: The type of this LinkIssueRequestJsonBean.  # noqa: E501
        :rtype: IssueLinkType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this LinkIssueRequestJsonBean.


        :param type: The type of this LinkIssueRequestJsonBean.  # noqa: E501
        :type: IssueLinkType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LinkIssueRequestJsonBean, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LinkIssueRequestJsonBean):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
