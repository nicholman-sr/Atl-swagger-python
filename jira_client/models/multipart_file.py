# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MultipartFile(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bytes': 'list[str]',
        'content_type': 'str',
        'empty': 'bool',
        'input_stream': 'object',
        'name': 'str',
        'original_filename': 'str',
        'resource': 'Resource',
        'size': 'int'
    }

    attribute_map = {
        'bytes': 'bytes',
        'content_type': 'contentType',
        'empty': 'empty',
        'input_stream': 'inputStream',
        'name': 'name',
        'original_filename': 'originalFilename',
        'resource': 'resource',
        'size': 'size'
    }

    def __init__(self, bytes=None, content_type=None, empty=None, input_stream=None, name=None, original_filename=None, resource=None, size=None):  # noqa: E501
        """MultipartFile - a model defined in Swagger"""  # noqa: E501
        self._bytes = None
        self._content_type = None
        self._empty = None
        self._input_stream = None
        self._name = None
        self._original_filename = None
        self._resource = None
        self._size = None
        self.discriminator = None
        if bytes is not None:
            self.bytes = bytes
        if content_type is not None:
            self.content_type = content_type
        if empty is not None:
            self.empty = empty
        if input_stream is not None:
            self.input_stream = input_stream
        if name is not None:
            self.name = name
        if original_filename is not None:
            self.original_filename = original_filename
        if resource is not None:
            self.resource = resource
        if size is not None:
            self.size = size

    @property
    def bytes(self):
        """Gets the bytes of this MultipartFile.  # noqa: E501


        :return: The bytes of this MultipartFile.  # noqa: E501
        :rtype: list[str]
        """
        return self._bytes

    @bytes.setter
    def bytes(self, bytes):
        """Sets the bytes of this MultipartFile.


        :param bytes: The bytes of this MultipartFile.  # noqa: E501
        :type: list[str]
        """

        self._bytes = bytes

    @property
    def content_type(self):
        """Gets the content_type of this MultipartFile.  # noqa: E501


        :return: The content_type of this MultipartFile.  # noqa: E501
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this MultipartFile.


        :param content_type: The content_type of this MultipartFile.  # noqa: E501
        :type: str
        """

        self._content_type = content_type

    @property
    def empty(self):
        """Gets the empty of this MultipartFile.  # noqa: E501


        :return: The empty of this MultipartFile.  # noqa: E501
        :rtype: bool
        """
        return self._empty

    @empty.setter
    def empty(self, empty):
        """Sets the empty of this MultipartFile.


        :param empty: The empty of this MultipartFile.  # noqa: E501
        :type: bool
        """

        self._empty = empty

    @property
    def input_stream(self):
        """Gets the input_stream of this MultipartFile.  # noqa: E501


        :return: The input_stream of this MultipartFile.  # noqa: E501
        :rtype: object
        """
        return self._input_stream

    @input_stream.setter
    def input_stream(self, input_stream):
        """Sets the input_stream of this MultipartFile.


        :param input_stream: The input_stream of this MultipartFile.  # noqa: E501
        :type: object
        """

        self._input_stream = input_stream

    @property
    def name(self):
        """Gets the name of this MultipartFile.  # noqa: E501


        :return: The name of this MultipartFile.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MultipartFile.


        :param name: The name of this MultipartFile.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def original_filename(self):
        """Gets the original_filename of this MultipartFile.  # noqa: E501


        :return: The original_filename of this MultipartFile.  # noqa: E501
        :rtype: str
        """
        return self._original_filename

    @original_filename.setter
    def original_filename(self, original_filename):
        """Sets the original_filename of this MultipartFile.


        :param original_filename: The original_filename of this MultipartFile.  # noqa: E501
        :type: str
        """

        self._original_filename = original_filename

    @property
    def resource(self):
        """Gets the resource of this MultipartFile.  # noqa: E501


        :return: The resource of this MultipartFile.  # noqa: E501
        :rtype: Resource
        """
        return self._resource

    @resource.setter
    def resource(self, resource):
        """Sets the resource of this MultipartFile.


        :param resource: The resource of this MultipartFile.  # noqa: E501
        :type: Resource
        """

        self._resource = resource

    @property
    def size(self):
        """Gets the size of this MultipartFile.  # noqa: E501


        :return: The size of this MultipartFile.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this MultipartFile.


        :param size: The size of this MultipartFile.  # noqa: E501
        :type: int
        """

        self._size = size

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MultipartFile, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MultipartFile):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
