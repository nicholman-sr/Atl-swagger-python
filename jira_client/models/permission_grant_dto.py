# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PermissionGrantDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'application_access': 'list[str]',
        'group_custom_fields': 'list[ProjectCreateResourceIdentifier]',
        'groups': 'list[ProjectCreateResourceIdentifier]',
        'permission_keys': 'list[str]',
        'project_roles': 'list[ProjectCreateResourceIdentifier]',
        'special_grants': 'list[str]',
        'user_custom_fields': 'list[ProjectCreateResourceIdentifier]',
        'users': 'list[ProjectCreateResourceIdentifier]'
    }

    attribute_map = {
        'application_access': 'applicationAccess',
        'group_custom_fields': 'groupCustomFields',
        'groups': 'groups',
        'permission_keys': 'permissionKeys',
        'project_roles': 'projectRoles',
        'special_grants': 'specialGrants',
        'user_custom_fields': 'userCustomFields',
        'users': 'users'
    }

    def __init__(self, application_access=None, group_custom_fields=None, groups=None, permission_keys=None, project_roles=None, special_grants=None, user_custom_fields=None, users=None):  # noqa: E501
        """PermissionGrantDTO - a model defined in Swagger"""  # noqa: E501
        self._application_access = None
        self._group_custom_fields = None
        self._groups = None
        self._permission_keys = None
        self._project_roles = None
        self._special_grants = None
        self._user_custom_fields = None
        self._users = None
        self.discriminator = None
        if application_access is not None:
            self.application_access = application_access
        if group_custom_fields is not None:
            self.group_custom_fields = group_custom_fields
        if groups is not None:
            self.groups = groups
        if permission_keys is not None:
            self.permission_keys = permission_keys
        if project_roles is not None:
            self.project_roles = project_roles
        if special_grants is not None:
            self.special_grants = special_grants
        if user_custom_fields is not None:
            self.user_custom_fields = user_custom_fields
        if users is not None:
            self.users = users

    @property
    def application_access(self):
        """Gets the application_access of this PermissionGrantDTO.  # noqa: E501


        :return: The application_access of this PermissionGrantDTO.  # noqa: E501
        :rtype: list[str]
        """
        return self._application_access

    @application_access.setter
    def application_access(self, application_access):
        """Sets the application_access of this PermissionGrantDTO.


        :param application_access: The application_access of this PermissionGrantDTO.  # noqa: E501
        :type: list[str]
        """

        self._application_access = application_access

    @property
    def group_custom_fields(self):
        """Gets the group_custom_fields of this PermissionGrantDTO.  # noqa: E501


        :return: The group_custom_fields of this PermissionGrantDTO.  # noqa: E501
        :rtype: list[ProjectCreateResourceIdentifier]
        """
        return self._group_custom_fields

    @group_custom_fields.setter
    def group_custom_fields(self, group_custom_fields):
        """Sets the group_custom_fields of this PermissionGrantDTO.


        :param group_custom_fields: The group_custom_fields of this PermissionGrantDTO.  # noqa: E501
        :type: list[ProjectCreateResourceIdentifier]
        """

        self._group_custom_fields = group_custom_fields

    @property
    def groups(self):
        """Gets the groups of this PermissionGrantDTO.  # noqa: E501


        :return: The groups of this PermissionGrantDTO.  # noqa: E501
        :rtype: list[ProjectCreateResourceIdentifier]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this PermissionGrantDTO.


        :param groups: The groups of this PermissionGrantDTO.  # noqa: E501
        :type: list[ProjectCreateResourceIdentifier]
        """

        self._groups = groups

    @property
    def permission_keys(self):
        """Gets the permission_keys of this PermissionGrantDTO.  # noqa: E501


        :return: The permission_keys of this PermissionGrantDTO.  # noqa: E501
        :rtype: list[str]
        """
        return self._permission_keys

    @permission_keys.setter
    def permission_keys(self, permission_keys):
        """Sets the permission_keys of this PermissionGrantDTO.


        :param permission_keys: The permission_keys of this PermissionGrantDTO.  # noqa: E501
        :type: list[str]
        """

        self._permission_keys = permission_keys

    @property
    def project_roles(self):
        """Gets the project_roles of this PermissionGrantDTO.  # noqa: E501


        :return: The project_roles of this PermissionGrantDTO.  # noqa: E501
        :rtype: list[ProjectCreateResourceIdentifier]
        """
        return self._project_roles

    @project_roles.setter
    def project_roles(self, project_roles):
        """Sets the project_roles of this PermissionGrantDTO.


        :param project_roles: The project_roles of this PermissionGrantDTO.  # noqa: E501
        :type: list[ProjectCreateResourceIdentifier]
        """

        self._project_roles = project_roles

    @property
    def special_grants(self):
        """Gets the special_grants of this PermissionGrantDTO.  # noqa: E501


        :return: The special_grants of this PermissionGrantDTO.  # noqa: E501
        :rtype: list[str]
        """
        return self._special_grants

    @special_grants.setter
    def special_grants(self, special_grants):
        """Sets the special_grants of this PermissionGrantDTO.


        :param special_grants: The special_grants of this PermissionGrantDTO.  # noqa: E501
        :type: list[str]
        """

        self._special_grants = special_grants

    @property
    def user_custom_fields(self):
        """Gets the user_custom_fields of this PermissionGrantDTO.  # noqa: E501


        :return: The user_custom_fields of this PermissionGrantDTO.  # noqa: E501
        :rtype: list[ProjectCreateResourceIdentifier]
        """
        return self._user_custom_fields

    @user_custom_fields.setter
    def user_custom_fields(self, user_custom_fields):
        """Sets the user_custom_fields of this PermissionGrantDTO.


        :param user_custom_fields: The user_custom_fields of this PermissionGrantDTO.  # noqa: E501
        :type: list[ProjectCreateResourceIdentifier]
        """

        self._user_custom_fields = user_custom_fields

    @property
    def users(self):
        """Gets the users of this PermissionGrantDTO.  # noqa: E501


        :return: The users of this PermissionGrantDTO.  # noqa: E501
        :rtype: list[ProjectCreateResourceIdentifier]
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this PermissionGrantDTO.


        :param users: The users of this PermissionGrantDTO.  # noqa: E501
        :type: list[ProjectCreateResourceIdentifier]
        """

        self._users = users

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PermissionGrantDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PermissionGrantDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
