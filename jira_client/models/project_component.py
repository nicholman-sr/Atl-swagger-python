# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProjectComponent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ari': 'str',
        'assignee': 'AllOfProjectComponentAssignee',
        'assignee_type': 'str',
        'description': 'str',
        'id': 'str',
        'is_assignee_type_valid': 'bool',
        'lead': 'AllOfProjectComponentLead',
        'lead_account_id': 'str',
        'lead_user_name': 'str',
        'metadata': 'dict(str, str)',
        'name': 'str',
        'project': 'str',
        'project_id': 'int',
        'real_assignee': 'AllOfProjectComponentRealAssignee',
        'real_assignee_type': 'str',
        '_self': 'str'
    }

    attribute_map = {
        'ari': 'ari',
        'assignee': 'assignee',
        'assignee_type': 'assigneeType',
        'description': 'description',
        'id': 'id',
        'is_assignee_type_valid': 'isAssigneeTypeValid',
        'lead': 'lead',
        'lead_account_id': 'leadAccountId',
        'lead_user_name': 'leadUserName',
        'metadata': 'metadata',
        'name': 'name',
        'project': 'project',
        'project_id': 'projectId',
        'real_assignee': 'realAssignee',
        'real_assignee_type': 'realAssigneeType',
        '_self': 'self'
    }

    def __init__(self, ari=None, assignee=None, assignee_type=None, description=None, id=None, is_assignee_type_valid=None, lead=None, lead_account_id=None, lead_user_name=None, metadata=None, name=None, project=None, project_id=None, real_assignee=None, real_assignee_type=None, _self=None):  # noqa: E501
        """ProjectComponent - a model defined in Swagger"""  # noqa: E501
        self._ari = None
        self._assignee = None
        self._assignee_type = None
        self._description = None
        self._id = None
        self._is_assignee_type_valid = None
        self._lead = None
        self._lead_account_id = None
        self._lead_user_name = None
        self._metadata = None
        self._name = None
        self._project = None
        self._project_id = None
        self._real_assignee = None
        self._real_assignee_type = None
        self.__self = None
        self.discriminator = None
        if ari is not None:
            self.ari = ari
        if assignee is not None:
            self.assignee = assignee
        if assignee_type is not None:
            self.assignee_type = assignee_type
        if description is not None:
            self.description = description
        if id is not None:
            self.id = id
        if is_assignee_type_valid is not None:
            self.is_assignee_type_valid = is_assignee_type_valid
        if lead is not None:
            self.lead = lead
        if lead_account_id is not None:
            self.lead_account_id = lead_account_id
        if lead_user_name is not None:
            self.lead_user_name = lead_user_name
        if metadata is not None:
            self.metadata = metadata
        if name is not None:
            self.name = name
        if project is not None:
            self.project = project
        if project_id is not None:
            self.project_id = project_id
        if real_assignee is not None:
            self.real_assignee = real_assignee
        if real_assignee_type is not None:
            self.real_assignee_type = real_assignee_type
        if _self is not None:
            self._self = _self

    @property
    def ari(self):
        """Gets the ari of this ProjectComponent.  # noqa: E501

        Compass component's ID. Can't be updated. Not required for creating a Project Component.  # noqa: E501

        :return: The ari of this ProjectComponent.  # noqa: E501
        :rtype: str
        """
        return self._ari

    @ari.setter
    def ari(self, ari):
        """Sets the ari of this ProjectComponent.

        Compass component's ID. Can't be updated. Not required for creating a Project Component.  # noqa: E501

        :param ari: The ari of this ProjectComponent.  # noqa: E501
        :type: str
        """

        self._ari = ari

    @property
    def assignee(self):
        """Gets the assignee of this ProjectComponent.  # noqa: E501

        The details of the user associated with `assigneeType`, if any. See `realAssignee` for details of the user assigned to issues created with this component.  # noqa: E501

        :return: The assignee of this ProjectComponent.  # noqa: E501
        :rtype: AllOfProjectComponentAssignee
        """
        return self._assignee

    @assignee.setter
    def assignee(self, assignee):
        """Sets the assignee of this ProjectComponent.

        The details of the user associated with `assigneeType`, if any. See `realAssignee` for details of the user assigned to issues created with this component.  # noqa: E501

        :param assignee: The assignee of this ProjectComponent.  # noqa: E501
        :type: AllOfProjectComponentAssignee
        """

        self._assignee = assignee

    @property
    def assignee_type(self):
        """Gets the assignee_type of this ProjectComponent.  # noqa: E501

        The nominal user type used to determine the assignee for issues created with this component. See `realAssigneeType` for details on how the type of the user, and hence the user, assigned to issues is determined. Can take the following values:   *  `PROJECT_LEAD` the assignee to any issues created with this component is nominally the lead for the project the component is in.  *  `COMPONENT_LEAD` the assignee to any issues created with this component is nominally the lead for the component.  *  `UNASSIGNED` an assignee is not set for issues created with this component.  *  `PROJECT_DEFAULT` the assignee to any issues created with this component is nominally the default assignee for the project that the component is in.  Default value: `PROJECT_DEFAULT`.   Optional when creating or updating a component.  # noqa: E501

        :return: The assignee_type of this ProjectComponent.  # noqa: E501
        :rtype: str
        """
        return self._assignee_type

    @assignee_type.setter
    def assignee_type(self, assignee_type):
        """Sets the assignee_type of this ProjectComponent.

        The nominal user type used to determine the assignee for issues created with this component. See `realAssigneeType` for details on how the type of the user, and hence the user, assigned to issues is determined. Can take the following values:   *  `PROJECT_LEAD` the assignee to any issues created with this component is nominally the lead for the project the component is in.  *  `COMPONENT_LEAD` the assignee to any issues created with this component is nominally the lead for the component.  *  `UNASSIGNED` an assignee is not set for issues created with this component.  *  `PROJECT_DEFAULT` the assignee to any issues created with this component is nominally the default assignee for the project that the component is in.  Default value: `PROJECT_DEFAULT`.   Optional when creating or updating a component.  # noqa: E501

        :param assignee_type: The assignee_type of this ProjectComponent.  # noqa: E501
        :type: str
        """
        allowed_values = ["PROJECT_DEFAULT", "COMPONENT_LEAD", "PROJECT_LEAD", "UNASSIGNED"]  # noqa: E501
        if assignee_type not in allowed_values:
            raise ValueError(
                "Invalid value for `assignee_type` ({0}), must be one of {1}"  # noqa: E501
                .format(assignee_type, allowed_values)
            )

        self._assignee_type = assignee_type

    @property
    def description(self):
        """Gets the description of this ProjectComponent.  # noqa: E501

        The description for the component. Optional when creating or updating a component.  # noqa: E501

        :return: The description of this ProjectComponent.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ProjectComponent.

        The description for the component. Optional when creating or updating a component.  # noqa: E501

        :param description: The description of this ProjectComponent.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this ProjectComponent.  # noqa: E501

        The unique identifier for the component.  # noqa: E501

        :return: The id of this ProjectComponent.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProjectComponent.

        The unique identifier for the component.  # noqa: E501

        :param id: The id of this ProjectComponent.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def is_assignee_type_valid(self):
        """Gets the is_assignee_type_valid of this ProjectComponent.  # noqa: E501

        Whether a user is associated with `assigneeType`. For example, if the `assigneeType` is set to `COMPONENT_LEAD` but the component lead is not set, then `false` is returned.  # noqa: E501

        :return: The is_assignee_type_valid of this ProjectComponent.  # noqa: E501
        :rtype: bool
        """
        return self._is_assignee_type_valid

    @is_assignee_type_valid.setter
    def is_assignee_type_valid(self, is_assignee_type_valid):
        """Sets the is_assignee_type_valid of this ProjectComponent.

        Whether a user is associated with `assigneeType`. For example, if the `assigneeType` is set to `COMPONENT_LEAD` but the component lead is not set, then `false` is returned.  # noqa: E501

        :param is_assignee_type_valid: The is_assignee_type_valid of this ProjectComponent.  # noqa: E501
        :type: bool
        """

        self._is_assignee_type_valid = is_assignee_type_valid

    @property
    def lead(self):
        """Gets the lead of this ProjectComponent.  # noqa: E501

        The user details for the component's lead user.  # noqa: E501

        :return: The lead of this ProjectComponent.  # noqa: E501
        :rtype: AllOfProjectComponentLead
        """
        return self._lead

    @lead.setter
    def lead(self, lead):
        """Sets the lead of this ProjectComponent.

        The user details for the component's lead user.  # noqa: E501

        :param lead: The lead of this ProjectComponent.  # noqa: E501
        :type: AllOfProjectComponentLead
        """

        self._lead = lead

    @property
    def lead_account_id(self):
        """Gets the lead_account_id of this ProjectComponent.  # noqa: E501

        The accountId of the component's lead user. The accountId uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.  # noqa: E501

        :return: The lead_account_id of this ProjectComponent.  # noqa: E501
        :rtype: str
        """
        return self._lead_account_id

    @lead_account_id.setter
    def lead_account_id(self, lead_account_id):
        """Sets the lead_account_id of this ProjectComponent.

        The accountId of the component's lead user. The accountId uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.  # noqa: E501

        :param lead_account_id: The lead_account_id of this ProjectComponent.  # noqa: E501
        :type: str
        """

        self._lead_account_id = lead_account_id

    @property
    def lead_user_name(self):
        """Gets the lead_user_name of this ProjectComponent.  # noqa: E501

        This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.  # noqa: E501

        :return: The lead_user_name of this ProjectComponent.  # noqa: E501
        :rtype: str
        """
        return self._lead_user_name

    @lead_user_name.setter
    def lead_user_name(self, lead_user_name):
        """Sets the lead_user_name of this ProjectComponent.

        This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.  # noqa: E501

        :param lead_user_name: The lead_user_name of this ProjectComponent.  # noqa: E501
        :type: str
        """

        self._lead_user_name = lead_user_name

    @property
    def metadata(self):
        """Gets the metadata of this ProjectComponent.  # noqa: E501

        Compass component's metadata. Can't be updated. Not required for creating a Project Component.  # noqa: E501

        :return: The metadata of this ProjectComponent.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this ProjectComponent.

        Compass component's metadata. Can't be updated. Not required for creating a Project Component.  # noqa: E501

        :param metadata: The metadata of this ProjectComponent.  # noqa: E501
        :type: dict(str, str)
        """

        self._metadata = metadata

    @property
    def name(self):
        """Gets the name of this ProjectComponent.  # noqa: E501

        The unique name for the component in the project. Required when creating a component. Optional when updating a component. The maximum length is 255 characters.  # noqa: E501

        :return: The name of this ProjectComponent.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProjectComponent.

        The unique name for the component in the project. Required when creating a component. Optional when updating a component. The maximum length is 255 characters.  # noqa: E501

        :param name: The name of this ProjectComponent.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def project(self):
        """Gets the project of this ProjectComponent.  # noqa: E501

        The key of the project the component is assigned to. Required when creating a component. Can't be updated.  # noqa: E501

        :return: The project of this ProjectComponent.  # noqa: E501
        :rtype: str
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this ProjectComponent.

        The key of the project the component is assigned to. Required when creating a component. Can't be updated.  # noqa: E501

        :param project: The project of this ProjectComponent.  # noqa: E501
        :type: str
        """

        self._project = project

    @property
    def project_id(self):
        """Gets the project_id of this ProjectComponent.  # noqa: E501

        The ID of the project the component is assigned to.  # noqa: E501

        :return: The project_id of this ProjectComponent.  # noqa: E501
        :rtype: int
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this ProjectComponent.

        The ID of the project the component is assigned to.  # noqa: E501

        :param project_id: The project_id of this ProjectComponent.  # noqa: E501
        :type: int
        """

        self._project_id = project_id

    @property
    def real_assignee(self):
        """Gets the real_assignee of this ProjectComponent.  # noqa: E501

        The user assigned to issues created with this component, when `assigneeType` does not identify a valid assignee.  # noqa: E501

        :return: The real_assignee of this ProjectComponent.  # noqa: E501
        :rtype: AllOfProjectComponentRealAssignee
        """
        return self._real_assignee

    @real_assignee.setter
    def real_assignee(self, real_assignee):
        """Sets the real_assignee of this ProjectComponent.

        The user assigned to issues created with this component, when `assigneeType` does not identify a valid assignee.  # noqa: E501

        :param real_assignee: The real_assignee of this ProjectComponent.  # noqa: E501
        :type: AllOfProjectComponentRealAssignee
        """

        self._real_assignee = real_assignee

    @property
    def real_assignee_type(self):
        """Gets the real_assignee_type of this ProjectComponent.  # noqa: E501

        The type of the assignee that is assigned to issues created with this component, when an assignee cannot be set from the `assigneeType`. For example, `assigneeType` is set to `COMPONENT_LEAD` but no component lead is set. This property is set to one of the following values:   *  `PROJECT_LEAD` when `assigneeType` is `PROJECT_LEAD` and the project lead has permission to be assigned issues in the project that the component is in.  *  `COMPONENT_LEAD` when `assignee`Type is `COMPONENT_LEAD` and the component lead has permission to be assigned issues in the project that the component is in.  *  `UNASSIGNED` when `assigneeType` is `UNASSIGNED` and Jira is configured to allow unassigned issues.  *  `PROJECT_DEFAULT` when none of the preceding cases are true.  # noqa: E501

        :return: The real_assignee_type of this ProjectComponent.  # noqa: E501
        :rtype: str
        """
        return self._real_assignee_type

    @real_assignee_type.setter
    def real_assignee_type(self, real_assignee_type):
        """Sets the real_assignee_type of this ProjectComponent.

        The type of the assignee that is assigned to issues created with this component, when an assignee cannot be set from the `assigneeType`. For example, `assigneeType` is set to `COMPONENT_LEAD` but no component lead is set. This property is set to one of the following values:   *  `PROJECT_LEAD` when `assigneeType` is `PROJECT_LEAD` and the project lead has permission to be assigned issues in the project that the component is in.  *  `COMPONENT_LEAD` when `assignee`Type is `COMPONENT_LEAD` and the component lead has permission to be assigned issues in the project that the component is in.  *  `UNASSIGNED` when `assigneeType` is `UNASSIGNED` and Jira is configured to allow unassigned issues.  *  `PROJECT_DEFAULT` when none of the preceding cases are true.  # noqa: E501

        :param real_assignee_type: The real_assignee_type of this ProjectComponent.  # noqa: E501
        :type: str
        """
        allowed_values = ["PROJECT_DEFAULT", "COMPONENT_LEAD", "PROJECT_LEAD", "UNASSIGNED"]  # noqa: E501
        if real_assignee_type not in allowed_values:
            raise ValueError(
                "Invalid value for `real_assignee_type` ({0}), must be one of {1}"  # noqa: E501
                .format(real_assignee_type, allowed_values)
            )

        self._real_assignee_type = real_assignee_type

    @property
    def _self(self):
        """Gets the _self of this ProjectComponent.  # noqa: E501

        The URL of the component.  # noqa: E501

        :return: The _self of this ProjectComponent.  # noqa: E501
        :rtype: str
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this ProjectComponent.

        The URL of the component.  # noqa: E501

        :param _self: The _self of this ProjectComponent.  # noqa: E501
        :type: str
        """

        self.__self = _self

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProjectComponent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProjectComponent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
