# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProjectIssueCreateMetadata(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'avatar_urls': 'AllOfProjectIssueCreateMetadataAvatarUrls',
        'expand': 'str',
        'id': 'str',
        'issuetypes': 'list[IssueTypeIssueCreateMetadata]',
        'key': 'str',
        'name': 'str',
        '_self': 'str'
    }

    attribute_map = {
        'avatar_urls': 'avatarUrls',
        'expand': 'expand',
        'id': 'id',
        'issuetypes': 'issuetypes',
        'key': 'key',
        'name': 'name',
        '_self': 'self'
    }

    def __init__(self, avatar_urls=None, expand=None, id=None, issuetypes=None, key=None, name=None, _self=None):  # noqa: E501
        """ProjectIssueCreateMetadata - a model defined in Swagger"""  # noqa: E501
        self._avatar_urls = None
        self._expand = None
        self._id = None
        self._issuetypes = None
        self._key = None
        self._name = None
        self.__self = None
        self.discriminator = None
        if avatar_urls is not None:
            self.avatar_urls = avatar_urls
        if expand is not None:
            self.expand = expand
        if id is not None:
            self.id = id
        if issuetypes is not None:
            self.issuetypes = issuetypes
        if key is not None:
            self.key = key
        if name is not None:
            self.name = name
        if _self is not None:
            self._self = _self

    @property
    def avatar_urls(self):
        """Gets the avatar_urls of this ProjectIssueCreateMetadata.  # noqa: E501

        List of the project's avatars, returning the avatar size and associated URL.  # noqa: E501

        :return: The avatar_urls of this ProjectIssueCreateMetadata.  # noqa: E501
        :rtype: AllOfProjectIssueCreateMetadataAvatarUrls
        """
        return self._avatar_urls

    @avatar_urls.setter
    def avatar_urls(self, avatar_urls):
        """Sets the avatar_urls of this ProjectIssueCreateMetadata.

        List of the project's avatars, returning the avatar size and associated URL.  # noqa: E501

        :param avatar_urls: The avatar_urls of this ProjectIssueCreateMetadata.  # noqa: E501
        :type: AllOfProjectIssueCreateMetadataAvatarUrls
        """

        self._avatar_urls = avatar_urls

    @property
    def expand(self):
        """Gets the expand of this ProjectIssueCreateMetadata.  # noqa: E501

        Expand options that include additional project issue create metadata details in the response.  # noqa: E501

        :return: The expand of this ProjectIssueCreateMetadata.  # noqa: E501
        :rtype: str
        """
        return self._expand

    @expand.setter
    def expand(self, expand):
        """Sets the expand of this ProjectIssueCreateMetadata.

        Expand options that include additional project issue create metadata details in the response.  # noqa: E501

        :param expand: The expand of this ProjectIssueCreateMetadata.  # noqa: E501
        :type: str
        """

        self._expand = expand

    @property
    def id(self):
        """Gets the id of this ProjectIssueCreateMetadata.  # noqa: E501

        The ID of the project.  # noqa: E501

        :return: The id of this ProjectIssueCreateMetadata.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProjectIssueCreateMetadata.

        The ID of the project.  # noqa: E501

        :param id: The id of this ProjectIssueCreateMetadata.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def issuetypes(self):
        """Gets the issuetypes of this ProjectIssueCreateMetadata.  # noqa: E501

        List of the issue types supported by the project.  # noqa: E501

        :return: The issuetypes of this ProjectIssueCreateMetadata.  # noqa: E501
        :rtype: list[IssueTypeIssueCreateMetadata]
        """
        return self._issuetypes

    @issuetypes.setter
    def issuetypes(self, issuetypes):
        """Sets the issuetypes of this ProjectIssueCreateMetadata.

        List of the issue types supported by the project.  # noqa: E501

        :param issuetypes: The issuetypes of this ProjectIssueCreateMetadata.  # noqa: E501
        :type: list[IssueTypeIssueCreateMetadata]
        """

        self._issuetypes = issuetypes

    @property
    def key(self):
        """Gets the key of this ProjectIssueCreateMetadata.  # noqa: E501

        The key of the project.  # noqa: E501

        :return: The key of this ProjectIssueCreateMetadata.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this ProjectIssueCreateMetadata.

        The key of the project.  # noqa: E501

        :param key: The key of this ProjectIssueCreateMetadata.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def name(self):
        """Gets the name of this ProjectIssueCreateMetadata.  # noqa: E501

        The name of the project.  # noqa: E501

        :return: The name of this ProjectIssueCreateMetadata.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProjectIssueCreateMetadata.

        The name of the project.  # noqa: E501

        :param name: The name of this ProjectIssueCreateMetadata.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def _self(self):
        """Gets the _self of this ProjectIssueCreateMetadata.  # noqa: E501

        The URL of the project.  # noqa: E501

        :return: The _self of this ProjectIssueCreateMetadata.  # noqa: E501
        :rtype: str
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this ProjectIssueCreateMetadata.

        The URL of the project.  # noqa: E501

        :param _self: The _self of this ProjectIssueCreateMetadata.  # noqa: E501
        :type: str
        """

        self.__self = _self

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProjectIssueCreateMetadata, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProjectIssueCreateMetadata):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
