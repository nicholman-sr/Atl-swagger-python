# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProjectRoleDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'admin': 'bool',
        'default': 'bool',
        'description': 'str',
        'id': 'int',
        'name': 'str',
        'role_configurable': 'bool',
        'scope': 'AllOfProjectRoleDetailsScope',
        '_self': 'str',
        'translated_name': 'str'
    }

    attribute_map = {
        'admin': 'admin',
        'default': 'default',
        'description': 'description',
        'id': 'id',
        'name': 'name',
        'role_configurable': 'roleConfigurable',
        'scope': 'scope',
        '_self': 'self',
        'translated_name': 'translatedName'
    }

    def __init__(self, admin=None, default=None, description=None, id=None, name=None, role_configurable=None, scope=None, _self=None, translated_name=None):  # noqa: E501
        """ProjectRoleDetails - a model defined in Swagger"""  # noqa: E501
        self._admin = None
        self._default = None
        self._description = None
        self._id = None
        self._name = None
        self._role_configurable = None
        self._scope = None
        self.__self = None
        self._translated_name = None
        self.discriminator = None
        if admin is not None:
            self.admin = admin
        if default is not None:
            self.default = default
        if description is not None:
            self.description = description
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if role_configurable is not None:
            self.role_configurable = role_configurable
        if scope is not None:
            self.scope = scope
        if _self is not None:
            self._self = _self
        if translated_name is not None:
            self.translated_name = translated_name

    @property
    def admin(self):
        """Gets the admin of this ProjectRoleDetails.  # noqa: E501

        Whether this role is the admin role for the project.  # noqa: E501

        :return: The admin of this ProjectRoleDetails.  # noqa: E501
        :rtype: bool
        """
        return self._admin

    @admin.setter
    def admin(self, admin):
        """Sets the admin of this ProjectRoleDetails.

        Whether this role is the admin role for the project.  # noqa: E501

        :param admin: The admin of this ProjectRoleDetails.  # noqa: E501
        :type: bool
        """

        self._admin = admin

    @property
    def default(self):
        """Gets the default of this ProjectRoleDetails.  # noqa: E501

        Whether this role is the default role for the project.  # noqa: E501

        :return: The default of this ProjectRoleDetails.  # noqa: E501
        :rtype: bool
        """
        return self._default

    @default.setter
    def default(self, default):
        """Sets the default of this ProjectRoleDetails.

        Whether this role is the default role for the project.  # noqa: E501

        :param default: The default of this ProjectRoleDetails.  # noqa: E501
        :type: bool
        """

        self._default = default

    @property
    def description(self):
        """Gets the description of this ProjectRoleDetails.  # noqa: E501

        The description of the project role.  # noqa: E501

        :return: The description of this ProjectRoleDetails.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ProjectRoleDetails.

        The description of the project role.  # noqa: E501

        :param description: The description of this ProjectRoleDetails.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this ProjectRoleDetails.  # noqa: E501

        The ID of the project role.  # noqa: E501

        :return: The id of this ProjectRoleDetails.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProjectRoleDetails.

        The ID of the project role.  # noqa: E501

        :param id: The id of this ProjectRoleDetails.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ProjectRoleDetails.  # noqa: E501

        The name of the project role.  # noqa: E501

        :return: The name of this ProjectRoleDetails.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProjectRoleDetails.

        The name of the project role.  # noqa: E501

        :param name: The name of this ProjectRoleDetails.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def role_configurable(self):
        """Gets the role_configurable of this ProjectRoleDetails.  # noqa: E501

        Whether the roles are configurable for this project.  # noqa: E501

        :return: The role_configurable of this ProjectRoleDetails.  # noqa: E501
        :rtype: bool
        """
        return self._role_configurable

    @role_configurable.setter
    def role_configurable(self, role_configurable):
        """Sets the role_configurable of this ProjectRoleDetails.

        Whether the roles are configurable for this project.  # noqa: E501

        :param role_configurable: The role_configurable of this ProjectRoleDetails.  # noqa: E501
        :type: bool
        """

        self._role_configurable = role_configurable

    @property
    def scope(self):
        """Gets the scope of this ProjectRoleDetails.  # noqa: E501

        The scope of the role. Indicated for roles associated with [next-gen projects](https://confluence.atlassian.com/x/loMyO).  # noqa: E501

        :return: The scope of this ProjectRoleDetails.  # noqa: E501
        :rtype: AllOfProjectRoleDetailsScope
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this ProjectRoleDetails.

        The scope of the role. Indicated for roles associated with [next-gen projects](https://confluence.atlassian.com/x/loMyO).  # noqa: E501

        :param scope: The scope of this ProjectRoleDetails.  # noqa: E501
        :type: AllOfProjectRoleDetailsScope
        """

        self._scope = scope

    @property
    def _self(self):
        """Gets the _self of this ProjectRoleDetails.  # noqa: E501

        The URL the project role details.  # noqa: E501

        :return: The _self of this ProjectRoleDetails.  # noqa: E501
        :rtype: str
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this ProjectRoleDetails.

        The URL the project role details.  # noqa: E501

        :param _self: The _self of this ProjectRoleDetails.  # noqa: E501
        :type: str
        """

        self.__self = _self

    @property
    def translated_name(self):
        """Gets the translated_name of this ProjectRoleDetails.  # noqa: E501

        The translated name of the project role.  # noqa: E501

        :return: The translated_name of this ProjectRoleDetails.  # noqa: E501
        :rtype: str
        """
        return self._translated_name

    @translated_name.setter
    def translated_name(self, translated_name):
        """Sets the translated_name of this ProjectRoleDetails.

        The translated name of the project role.  # noqa: E501

        :param translated_name: The translated_name of this ProjectRoleDetails.  # noqa: E501
        :type: str
        """

        self._translated_name = translated_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProjectRoleDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProjectRoleDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
