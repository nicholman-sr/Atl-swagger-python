# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RedactionPosition(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'adf_pointer': 'str',
        'expected_text': 'str',
        '_from': 'int',
        'to': 'int'
    }

    attribute_map = {
        'adf_pointer': 'adfPointer',
        'expected_text': 'expectedText',
        '_from': 'from',
        'to': 'to'
    }

    def __init__(self, adf_pointer=None, expected_text=None, _from=None, to=None):  # noqa: E501
        """RedactionPosition - a model defined in Swagger"""  # noqa: E501
        self._adf_pointer = None
        self._expected_text = None
        self.__from = None
        self._to = None
        self.discriminator = None
        if adf_pointer is not None:
            self.adf_pointer = adf_pointer
        self.expected_text = expected_text
        self._from = _from
        self.to = to

    @property
    def adf_pointer(self):
        """Gets the adf_pointer of this RedactionPosition.  # noqa: E501

        The ADF pointer indicating the position of the text to be redacted. This is only required when redacting from rich text(ADF) fields. For plain text fields, this field can be omitted.  # noqa: E501

        :return: The adf_pointer of this RedactionPosition.  # noqa: E501
        :rtype: str
        """
        return self._adf_pointer

    @adf_pointer.setter
    def adf_pointer(self, adf_pointer):
        """Sets the adf_pointer of this RedactionPosition.

        The ADF pointer indicating the position of the text to be redacted. This is only required when redacting from rich text(ADF) fields. For plain text fields, this field can be omitted.  # noqa: E501

        :param adf_pointer: The adf_pointer of this RedactionPosition.  # noqa: E501
        :type: str
        """

        self._adf_pointer = adf_pointer

    @property
    def expected_text(self):
        """Gets the expected_text of this RedactionPosition.  # noqa: E501

        The text which will be redacted, encoded using SHA256 hash and Base64 digest  # noqa: E501

        :return: The expected_text of this RedactionPosition.  # noqa: E501
        :rtype: str
        """
        return self._expected_text

    @expected_text.setter
    def expected_text(self, expected_text):
        """Sets the expected_text of this RedactionPosition.

        The text which will be redacted, encoded using SHA256 hash and Base64 digest  # noqa: E501

        :param expected_text: The expected_text of this RedactionPosition.  # noqa: E501
        :type: str
        """
        if expected_text is None:
            raise ValueError("Invalid value for `expected_text`, must not be `None`")  # noqa: E501

        self._expected_text = expected_text

    @property
    def _from(self):
        """Gets the _from of this RedactionPosition.  # noqa: E501

        The start index(inclusive) for the redaction in specified content  # noqa: E501

        :return: The _from of this RedactionPosition.  # noqa: E501
        :rtype: int
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this RedactionPosition.

        The start index(inclusive) for the redaction in specified content  # noqa: E501

        :param _from: The _from of this RedactionPosition.  # noqa: E501
        :type: int
        """
        if _from is None:
            raise ValueError("Invalid value for `_from`, must not be `None`")  # noqa: E501

        self.__from = _from

    @property
    def to(self):
        """Gets the to of this RedactionPosition.  # noqa: E501

        The ending index(exclusive) for the redaction in specified content  # noqa: E501

        :return: The to of this RedactionPosition.  # noqa: E501
        :rtype: int
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this RedactionPosition.

        The ending index(exclusive) for the redaction in specified content  # noqa: E501

        :param to: The to of this RedactionPosition.  # noqa: E501
        :type: int
        """
        if to is None:
            raise ValueError("Invalid value for `to`, must not be `None`")  # noqa: E501

        self._to = to

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RedactionPosition, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RedactionPosition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
