# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SaveProjectTemplateRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'project_id': 'int',
        'template_generation_options': 'CustomTemplateOptions',
        'template_type': 'str'
    }

    attribute_map = {
        'project_id': 'projectId',
        'template_generation_options': 'templateGenerationOptions',
        'template_type': 'templateType'
    }

    def __init__(self, project_id=None, template_generation_options=None, template_type=None):  # noqa: E501
        """SaveProjectTemplateRequest - a model defined in Swagger"""  # noqa: E501
        self._project_id = None
        self._template_generation_options = None
        self._template_type = None
        self.discriminator = None
        if project_id is not None:
            self.project_id = project_id
        if template_generation_options is not None:
            self.template_generation_options = template_generation_options
        if template_type is not None:
            self.template_type = template_type

    @property
    def project_id(self):
        """Gets the project_id of this SaveProjectTemplateRequest.  # noqa: E501

        The ID of the target project  # noqa: E501

        :return: The project_id of this SaveProjectTemplateRequest.  # noqa: E501
        :rtype: int
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this SaveProjectTemplateRequest.

        The ID of the target project  # noqa: E501

        :param project_id: The project_id of this SaveProjectTemplateRequest.  # noqa: E501
        :type: int
        """

        self._project_id = project_id

    @property
    def template_generation_options(self):
        """Gets the template_generation_options of this SaveProjectTemplateRequest.  # noqa: E501


        :return: The template_generation_options of this SaveProjectTemplateRequest.  # noqa: E501
        :rtype: CustomTemplateOptions
        """
        return self._template_generation_options

    @template_generation_options.setter
    def template_generation_options(self, template_generation_options):
        """Sets the template_generation_options of this SaveProjectTemplateRequest.


        :param template_generation_options: The template_generation_options of this SaveProjectTemplateRequest.  # noqa: E501
        :type: CustomTemplateOptions
        """

        self._template_generation_options = template_generation_options

    @property
    def template_type(self):
        """Gets the template_type of this SaveProjectTemplateRequest.  # noqa: E501

        The type of the template: LIVE | SNAPSHOT  # noqa: E501

        :return: The template_type of this SaveProjectTemplateRequest.  # noqa: E501
        :rtype: str
        """
        return self._template_type

    @template_type.setter
    def template_type(self, template_type):
        """Sets the template_type of this SaveProjectTemplateRequest.

        The type of the template: LIVE | SNAPSHOT  # noqa: E501

        :param template_type: The template_type of this SaveProjectTemplateRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["LIVE", "SNAPSHOT"]  # noqa: E501
        if template_type not in allowed_values:
            raise ValueError(
                "Invalid value for `template_type` ({0}), must be one of {1}"  # noqa: E501
                .format(template_type, allowed_values)
            )

        self._template_type = template_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SaveProjectTemplateRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SaveProjectTemplateRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
