# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SuggestedMappingsRequestBean(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'max_results': 'int',
        'priorities': 'AllOfSuggestedMappingsRequestBeanPriorities',
        'projects': 'AllOfSuggestedMappingsRequestBeanProjects',
        'scheme_id': 'int',
        'start_at': 'int'
    }

    attribute_map = {
        'max_results': 'maxResults',
        'priorities': 'priorities',
        'projects': 'projects',
        'scheme_id': 'schemeId',
        'start_at': 'startAt'
    }

    def __init__(self, max_results=None, priorities=None, projects=None, scheme_id=None, start_at=None):  # noqa: E501
        """SuggestedMappingsRequestBean - a model defined in Swagger"""  # noqa: E501
        self._max_results = None
        self._priorities = None
        self._projects = None
        self._scheme_id = None
        self._start_at = None
        self.discriminator = None
        if max_results is not None:
            self.max_results = max_results
        if priorities is not None:
            self.priorities = priorities
        if projects is not None:
            self.projects = projects
        if scheme_id is not None:
            self.scheme_id = scheme_id
        if start_at is not None:
            self.start_at = start_at

    @property
    def max_results(self):
        """Gets the max_results of this SuggestedMappingsRequestBean.  # noqa: E501

        The maximum number of results that could be on the page.  # noqa: E501

        :return: The max_results of this SuggestedMappingsRequestBean.  # noqa: E501
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this SuggestedMappingsRequestBean.

        The maximum number of results that could be on the page.  # noqa: E501

        :param max_results: The max_results of this SuggestedMappingsRequestBean.  # noqa: E501
        :type: int
        """

        self._max_results = max_results

    @property
    def priorities(self):
        """Gets the priorities of this SuggestedMappingsRequestBean.  # noqa: E501

        The priority changes in the scheme.  # noqa: E501

        :return: The priorities of this SuggestedMappingsRequestBean.  # noqa: E501
        :rtype: AllOfSuggestedMappingsRequestBeanPriorities
        """
        return self._priorities

    @priorities.setter
    def priorities(self, priorities):
        """Sets the priorities of this SuggestedMappingsRequestBean.

        The priority changes in the scheme.  # noqa: E501

        :param priorities: The priorities of this SuggestedMappingsRequestBean.  # noqa: E501
        :type: AllOfSuggestedMappingsRequestBeanPriorities
        """

        self._priorities = priorities

    @property
    def projects(self):
        """Gets the projects of this SuggestedMappingsRequestBean.  # noqa: E501

        The project changes in the scheme.  # noqa: E501

        :return: The projects of this SuggestedMappingsRequestBean.  # noqa: E501
        :rtype: AllOfSuggestedMappingsRequestBeanProjects
        """
        return self._projects

    @projects.setter
    def projects(self, projects):
        """Sets the projects of this SuggestedMappingsRequestBean.

        The project changes in the scheme.  # noqa: E501

        :param projects: The projects of this SuggestedMappingsRequestBean.  # noqa: E501
        :type: AllOfSuggestedMappingsRequestBeanProjects
        """

        self._projects = projects

    @property
    def scheme_id(self):
        """Gets the scheme_id of this SuggestedMappingsRequestBean.  # noqa: E501

        The id of the priority scheme.  # noqa: E501

        :return: The scheme_id of this SuggestedMappingsRequestBean.  # noqa: E501
        :rtype: int
        """
        return self._scheme_id

    @scheme_id.setter
    def scheme_id(self, scheme_id):
        """Sets the scheme_id of this SuggestedMappingsRequestBean.

        The id of the priority scheme.  # noqa: E501

        :param scheme_id: The scheme_id of this SuggestedMappingsRequestBean.  # noqa: E501
        :type: int
        """

        self._scheme_id = scheme_id

    @property
    def start_at(self):
        """Gets the start_at of this SuggestedMappingsRequestBean.  # noqa: E501

        The index of the first item returned on the page.  # noqa: E501

        :return: The start_at of this SuggestedMappingsRequestBean.  # noqa: E501
        :rtype: int
        """
        return self._start_at

    @start_at.setter
    def start_at(self, start_at):
        """Sets the start_at of this SuggestedMappingsRequestBean.

        The index of the first item returned on the page.  # noqa: E501

        :param start_at: The start_at of this SuggestedMappingsRequestBean.  # noqa: E501
        :type: int
        """

        self._start_at = start_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SuggestedMappingsRequestBean, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SuggestedMappingsRequestBean):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
