# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SwimlanesPayload(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'custom_swimlanes': 'list[SwimlanePayload]',
        'default_custom_swimlane_name': 'str',
        'swimlane_strategy': 'str'
    }

    attribute_map = {
        'custom_swimlanes': 'customSwimlanes',
        'default_custom_swimlane_name': 'defaultCustomSwimlaneName',
        'swimlane_strategy': 'swimlaneStrategy'
    }

    def __init__(self, custom_swimlanes=None, default_custom_swimlane_name=None, swimlane_strategy=None):  # noqa: E501
        """SwimlanesPayload - a model defined in Swagger"""  # noqa: E501
        self._custom_swimlanes = None
        self._default_custom_swimlane_name = None
        self._swimlane_strategy = None
        self.discriminator = None
        if custom_swimlanes is not None:
            self.custom_swimlanes = custom_swimlanes
        if default_custom_swimlane_name is not None:
            self.default_custom_swimlane_name = default_custom_swimlane_name
        if swimlane_strategy is not None:
            self.swimlane_strategy = swimlane_strategy

    @property
    def custom_swimlanes(self):
        """Gets the custom_swimlanes of this SwimlanesPayload.  # noqa: E501

        The custom swimlane definitions.  # noqa: E501

        :return: The custom_swimlanes of this SwimlanesPayload.  # noqa: E501
        :rtype: list[SwimlanePayload]
        """
        return self._custom_swimlanes

    @custom_swimlanes.setter
    def custom_swimlanes(self, custom_swimlanes):
        """Sets the custom_swimlanes of this SwimlanesPayload.

        The custom swimlane definitions.  # noqa: E501

        :param custom_swimlanes: The custom_swimlanes of this SwimlanesPayload.  # noqa: E501
        :type: list[SwimlanePayload]
        """

        self._custom_swimlanes = custom_swimlanes

    @property
    def default_custom_swimlane_name(self):
        """Gets the default_custom_swimlane_name of this SwimlanesPayload.  # noqa: E501

        The name of the custom swimlane to use for work items that don't match any other swimlanes.  # noqa: E501

        :return: The default_custom_swimlane_name of this SwimlanesPayload.  # noqa: E501
        :rtype: str
        """
        return self._default_custom_swimlane_name

    @default_custom_swimlane_name.setter
    def default_custom_swimlane_name(self, default_custom_swimlane_name):
        """Sets the default_custom_swimlane_name of this SwimlanesPayload.

        The name of the custom swimlane to use for work items that don't match any other swimlanes.  # noqa: E501

        :param default_custom_swimlane_name: The default_custom_swimlane_name of this SwimlanesPayload.  # noqa: E501
        :type: str
        """

        self._default_custom_swimlane_name = default_custom_swimlane_name

    @property
    def swimlane_strategy(self):
        """Gets the swimlane_strategy of this SwimlanesPayload.  # noqa: E501

        The swimlane strategy for the board.  # noqa: E501

        :return: The swimlane_strategy of this SwimlanesPayload.  # noqa: E501
        :rtype: str
        """
        return self._swimlane_strategy

    @swimlane_strategy.setter
    def swimlane_strategy(self, swimlane_strategy):
        """Sets the swimlane_strategy of this SwimlanesPayload.

        The swimlane strategy for the board.  # noqa: E501

        :param swimlane_strategy: The swimlane_strategy of this SwimlanesPayload.  # noqa: E501
        :type: str
        """
        allowed_values = ["none", "custom", "parentChild", "assignee", "assigneeUnassignedFirst", "epic", "project", "issueparent", "issuechildren", "request_type"]  # noqa: E501
        if swimlane_strategy not in allowed_values:
            raise ValueError(
                "Invalid value for `swimlane_strategy` ({0}), must be one of {1}"  # noqa: E501
                .format(swimlane_strategy, allowed_values)
            )

        self._swimlane_strategy = swimlane_strategy

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SwimlanesPayload, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SwimlanesPayload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
