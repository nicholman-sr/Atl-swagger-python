# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TaskProgressBeanJsonNode(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'elapsed_runtime': 'int',
        'finished': 'int',
        'id': 'str',
        'last_update': 'int',
        'message': 'str',
        'progress': 'int',
        'result': 'AllOfTaskProgressBeanJsonNodeResult',
        '_self': 'str',
        'started': 'int',
        'status': 'str',
        'submitted': 'int',
        'submitted_by': 'int'
    }

    attribute_map = {
        'description': 'description',
        'elapsed_runtime': 'elapsedRuntime',
        'finished': 'finished',
        'id': 'id',
        'last_update': 'lastUpdate',
        'message': 'message',
        'progress': 'progress',
        'result': 'result',
        '_self': 'self',
        'started': 'started',
        'status': 'status',
        'submitted': 'submitted',
        'submitted_by': 'submittedBy'
    }

    def __init__(self, description=None, elapsed_runtime=None, finished=None, id=None, last_update=None, message=None, progress=None, result=None, _self=None, started=None, status=None, submitted=None, submitted_by=None):  # noqa: E501
        """TaskProgressBeanJsonNode - a model defined in Swagger"""  # noqa: E501
        self._description = None
        self._elapsed_runtime = None
        self._finished = None
        self._id = None
        self._last_update = None
        self._message = None
        self._progress = None
        self._result = None
        self.__self = None
        self._started = None
        self._status = None
        self._submitted = None
        self._submitted_by = None
        self.discriminator = None
        if description is not None:
            self.description = description
        self.elapsed_runtime = elapsed_runtime
        if finished is not None:
            self.finished = finished
        self.id = id
        self.last_update = last_update
        if message is not None:
            self.message = message
        self.progress = progress
        if result is not None:
            self.result = result
        self._self = _self
        if started is not None:
            self.started = started
        self.status = status
        self.submitted = submitted
        self.submitted_by = submitted_by

    @property
    def description(self):
        """Gets the description of this TaskProgressBeanJsonNode.  # noqa: E501

        The description of the task.  # noqa: E501

        :return: The description of this TaskProgressBeanJsonNode.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TaskProgressBeanJsonNode.

        The description of the task.  # noqa: E501

        :param description: The description of this TaskProgressBeanJsonNode.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def elapsed_runtime(self):
        """Gets the elapsed_runtime of this TaskProgressBeanJsonNode.  # noqa: E501

        The execution time of the task, in milliseconds.  # noqa: E501

        :return: The elapsed_runtime of this TaskProgressBeanJsonNode.  # noqa: E501
        :rtype: int
        """
        return self._elapsed_runtime

    @elapsed_runtime.setter
    def elapsed_runtime(self, elapsed_runtime):
        """Sets the elapsed_runtime of this TaskProgressBeanJsonNode.

        The execution time of the task, in milliseconds.  # noqa: E501

        :param elapsed_runtime: The elapsed_runtime of this TaskProgressBeanJsonNode.  # noqa: E501
        :type: int
        """
        if elapsed_runtime is None:
            raise ValueError("Invalid value for `elapsed_runtime`, must not be `None`")  # noqa: E501

        self._elapsed_runtime = elapsed_runtime

    @property
    def finished(self):
        """Gets the finished of this TaskProgressBeanJsonNode.  # noqa: E501

        A timestamp recording when the task was finished.  # noqa: E501

        :return: The finished of this TaskProgressBeanJsonNode.  # noqa: E501
        :rtype: int
        """
        return self._finished

    @finished.setter
    def finished(self, finished):
        """Sets the finished of this TaskProgressBeanJsonNode.

        A timestamp recording when the task was finished.  # noqa: E501

        :param finished: The finished of this TaskProgressBeanJsonNode.  # noqa: E501
        :type: int
        """

        self._finished = finished

    @property
    def id(self):
        """Gets the id of this TaskProgressBeanJsonNode.  # noqa: E501

        The ID of the task.  # noqa: E501

        :return: The id of this TaskProgressBeanJsonNode.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TaskProgressBeanJsonNode.

        The ID of the task.  # noqa: E501

        :param id: The id of this TaskProgressBeanJsonNode.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def last_update(self):
        """Gets the last_update of this TaskProgressBeanJsonNode.  # noqa: E501

        A timestamp recording when the task progress was last updated.  # noqa: E501

        :return: The last_update of this TaskProgressBeanJsonNode.  # noqa: E501
        :rtype: int
        """
        return self._last_update

    @last_update.setter
    def last_update(self, last_update):
        """Sets the last_update of this TaskProgressBeanJsonNode.

        A timestamp recording when the task progress was last updated.  # noqa: E501

        :param last_update: The last_update of this TaskProgressBeanJsonNode.  # noqa: E501
        :type: int
        """
        if last_update is None:
            raise ValueError("Invalid value for `last_update`, must not be `None`")  # noqa: E501

        self._last_update = last_update

    @property
    def message(self):
        """Gets the message of this TaskProgressBeanJsonNode.  # noqa: E501

        Information about the progress of the task.  # noqa: E501

        :return: The message of this TaskProgressBeanJsonNode.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this TaskProgressBeanJsonNode.

        Information about the progress of the task.  # noqa: E501

        :param message: The message of this TaskProgressBeanJsonNode.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def progress(self):
        """Gets the progress of this TaskProgressBeanJsonNode.  # noqa: E501

        The progress of the task, as a percentage complete.  # noqa: E501

        :return: The progress of this TaskProgressBeanJsonNode.  # noqa: E501
        :rtype: int
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """Sets the progress of this TaskProgressBeanJsonNode.

        The progress of the task, as a percentage complete.  # noqa: E501

        :param progress: The progress of this TaskProgressBeanJsonNode.  # noqa: E501
        :type: int
        """
        if progress is None:
            raise ValueError("Invalid value for `progress`, must not be `None`")  # noqa: E501

        self._progress = progress

    @property
    def result(self):
        """Gets the result of this TaskProgressBeanJsonNode.  # noqa: E501

        The result of the task execution.  # noqa: E501

        :return: The result of this TaskProgressBeanJsonNode.  # noqa: E501
        :rtype: AllOfTaskProgressBeanJsonNodeResult
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this TaskProgressBeanJsonNode.

        The result of the task execution.  # noqa: E501

        :param result: The result of this TaskProgressBeanJsonNode.  # noqa: E501
        :type: AllOfTaskProgressBeanJsonNodeResult
        """

        self._result = result

    @property
    def _self(self):
        """Gets the _self of this TaskProgressBeanJsonNode.  # noqa: E501

        The URL of the task.  # noqa: E501

        :return: The _self of this TaskProgressBeanJsonNode.  # noqa: E501
        :rtype: str
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this TaskProgressBeanJsonNode.

        The URL of the task.  # noqa: E501

        :param _self: The _self of this TaskProgressBeanJsonNode.  # noqa: E501
        :type: str
        """
        if _self is None:
            raise ValueError("Invalid value for `_self`, must not be `None`")  # noqa: E501

        self.__self = _self

    @property
    def started(self):
        """Gets the started of this TaskProgressBeanJsonNode.  # noqa: E501

        A timestamp recording when the task was started.  # noqa: E501

        :return: The started of this TaskProgressBeanJsonNode.  # noqa: E501
        :rtype: int
        """
        return self._started

    @started.setter
    def started(self, started):
        """Sets the started of this TaskProgressBeanJsonNode.

        A timestamp recording when the task was started.  # noqa: E501

        :param started: The started of this TaskProgressBeanJsonNode.  # noqa: E501
        :type: int
        """

        self._started = started

    @property
    def status(self):
        """Gets the status of this TaskProgressBeanJsonNode.  # noqa: E501

        The status of the task.  # noqa: E501

        :return: The status of this TaskProgressBeanJsonNode.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TaskProgressBeanJsonNode.

        The status of the task.  # noqa: E501

        :param status: The status of this TaskProgressBeanJsonNode.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = ["ENQUEUED", "RUNNING", "COMPLETE", "FAILED", "CANCEL_REQUESTED", "CANCELLED", "DEAD"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def submitted(self):
        """Gets the submitted of this TaskProgressBeanJsonNode.  # noqa: E501

        A timestamp recording when the task was submitted.  # noqa: E501

        :return: The submitted of this TaskProgressBeanJsonNode.  # noqa: E501
        :rtype: int
        """
        return self._submitted

    @submitted.setter
    def submitted(self, submitted):
        """Sets the submitted of this TaskProgressBeanJsonNode.

        A timestamp recording when the task was submitted.  # noqa: E501

        :param submitted: The submitted of this TaskProgressBeanJsonNode.  # noqa: E501
        :type: int
        """
        if submitted is None:
            raise ValueError("Invalid value for `submitted`, must not be `None`")  # noqa: E501

        self._submitted = submitted

    @property
    def submitted_by(self):
        """Gets the submitted_by of this TaskProgressBeanJsonNode.  # noqa: E501

        The ID of the user who submitted the task.  # noqa: E501

        :return: The submitted_by of this TaskProgressBeanJsonNode.  # noqa: E501
        :rtype: int
        """
        return self._submitted_by

    @submitted_by.setter
    def submitted_by(self, submitted_by):
        """Sets the submitted_by of this TaskProgressBeanJsonNode.

        The ID of the user who submitted the task.  # noqa: E501

        :param submitted_by: The submitted_by of this TaskProgressBeanJsonNode.  # noqa: E501
        :type: int
        """
        if submitted_by is None:
            raise ValueError("Invalid value for `submitted_by`, must not be `None`")  # noqa: E501

        self._submitted_by = submitted_by

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TaskProgressBeanJsonNode, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TaskProgressBeanJsonNode):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
