# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UserPickerUser(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'str',
        'account_type': 'str',
        'avatar_url': 'str',
        'display_name': 'str',
        'html': 'str',
        'key': 'str',
        'name': 'str'
    }

    attribute_map = {
        'account_id': 'accountId',
        'account_type': 'accountType',
        'avatar_url': 'avatarUrl',
        'display_name': 'displayName',
        'html': 'html',
        'key': 'key',
        'name': 'name'
    }

    def __init__(self, account_id=None, account_type=None, avatar_url=None, display_name=None, html=None, key=None, name=None):  # noqa: E501
        """UserPickerUser - a model defined in Swagger"""  # noqa: E501
        self._account_id = None
        self._account_type = None
        self._avatar_url = None
        self._display_name = None
        self._html = None
        self._key = None
        self._name = None
        self.discriminator = None
        if account_id is not None:
            self.account_id = account_id
        if account_type is not None:
            self.account_type = account_type
        if avatar_url is not None:
            self.avatar_url = avatar_url
        if display_name is not None:
            self.display_name = display_name
        if html is not None:
            self.html = html
        if key is not None:
            self.key = key
        if name is not None:
            self.name = name

    @property
    def account_id(self):
        """Gets the account_id of this UserPickerUser.  # noqa: E501

        The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.  # noqa: E501

        :return: The account_id of this UserPickerUser.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this UserPickerUser.

        The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.  # noqa: E501

        :param account_id: The account_id of this UserPickerUser.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def account_type(self):
        """Gets the account_type of this UserPickerUser.  # noqa: E501

        The user account type. Can take the following values:   *  `atlassian` regular Atlassian user account  *  `app` system account used for Connect applications and OAuth to represent external systems  *  `customer` Jira Service Desk account representing an external service desk  # noqa: E501

        :return: The account_type of this UserPickerUser.  # noqa: E501
        :rtype: str
        """
        return self._account_type

    @account_type.setter
    def account_type(self, account_type):
        """Sets the account_type of this UserPickerUser.

        The user account type. Can take the following values:   *  `atlassian` regular Atlassian user account  *  `app` system account used for Connect applications and OAuth to represent external systems  *  `customer` Jira Service Desk account representing an external service desk  # noqa: E501

        :param account_type: The account_type of this UserPickerUser.  # noqa: E501
        :type: str
        """
        allowed_values = ["atlassian", "app", "customer", "unknown"]  # noqa: E501
        if account_type not in allowed_values:
            raise ValueError(
                "Invalid value for `account_type` ({0}), must be one of {1}"  # noqa: E501
                .format(account_type, allowed_values)
            )

        self._account_type = account_type

    @property
    def avatar_url(self):
        """Gets the avatar_url of this UserPickerUser.  # noqa: E501

        The avatar URL of the user.  # noqa: E501

        :return: The avatar_url of this UserPickerUser.  # noqa: E501
        :rtype: str
        """
        return self._avatar_url

    @avatar_url.setter
    def avatar_url(self, avatar_url):
        """Sets the avatar_url of this UserPickerUser.

        The avatar URL of the user.  # noqa: E501

        :param avatar_url: The avatar_url of this UserPickerUser.  # noqa: E501
        :type: str
        """

        self._avatar_url = avatar_url

    @property
    def display_name(self):
        """Gets the display_name of this UserPickerUser.  # noqa: E501

        The display name of the user. Depending on the user’s privacy setting, this may be returned as null.  # noqa: E501

        :return: The display_name of this UserPickerUser.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this UserPickerUser.

        The display name of the user. Depending on the user’s privacy setting, this may be returned as null.  # noqa: E501

        :param display_name: The display_name of this UserPickerUser.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def html(self):
        """Gets the html of this UserPickerUser.  # noqa: E501

        The display name, email address, and key of the user with the matched query string highlighted with the HTML bold tag.  # noqa: E501

        :return: The html of this UserPickerUser.  # noqa: E501
        :rtype: str
        """
        return self._html

    @html.setter
    def html(self, html):
        """Sets the html of this UserPickerUser.

        The display name, email address, and key of the user with the matched query string highlighted with the HTML bold tag.  # noqa: E501

        :param html: The html of this UserPickerUser.  # noqa: E501
        :type: str
        """

        self._html = html

    @property
    def key(self):
        """Gets the key of this UserPickerUser.  # noqa: E501

        This property is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.  # noqa: E501

        :return: The key of this UserPickerUser.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this UserPickerUser.

        This property is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.  # noqa: E501

        :param key: The key of this UserPickerUser.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def name(self):
        """Gets the name of this UserPickerUser.  # noqa: E501

        This property is no longer available . See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.  # noqa: E501

        :return: The name of this UserPickerUser.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UserPickerUser.

        This property is no longer available . See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.  # noqa: E501

        :param name: The name of this UserPickerUser.  # noqa: E501
        :type: str
        """

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserPickerUser, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserPickerUser):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
