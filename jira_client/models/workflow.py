# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Workflow(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created': 'datetime',
        'description': 'str',
        'has_draft_workflow': 'bool',
        'id': 'PublishedWorkflowId',
        'is_default': 'bool',
        'operations': 'WorkflowOperations',
        'projects': 'list[ProjectDetails]',
        'schemes': 'list[WorkflowSchemeIdName]',
        'statuses': 'list[WorkflowStatus]',
        'transitions': 'list[Transition]',
        'updated': 'datetime'
    }

    attribute_map = {
        'created': 'created',
        'description': 'description',
        'has_draft_workflow': 'hasDraftWorkflow',
        'id': 'id',
        'is_default': 'isDefault',
        'operations': 'operations',
        'projects': 'projects',
        'schemes': 'schemes',
        'statuses': 'statuses',
        'transitions': 'transitions',
        'updated': 'updated'
    }

    def __init__(self, created=None, description=None, has_draft_workflow=None, id=None, is_default=None, operations=None, projects=None, schemes=None, statuses=None, transitions=None, updated=None):  # noqa: E501
        """Workflow - a model defined in Swagger"""  # noqa: E501
        self._created = None
        self._description = None
        self._has_draft_workflow = None
        self._id = None
        self._is_default = None
        self._operations = None
        self._projects = None
        self._schemes = None
        self._statuses = None
        self._transitions = None
        self._updated = None
        self.discriminator = None
        if created is not None:
            self.created = created
        self.description = description
        if has_draft_workflow is not None:
            self.has_draft_workflow = has_draft_workflow
        self.id = id
        if is_default is not None:
            self.is_default = is_default
        if operations is not None:
            self.operations = operations
        if projects is not None:
            self.projects = projects
        if schemes is not None:
            self.schemes = schemes
        if statuses is not None:
            self.statuses = statuses
        if transitions is not None:
            self.transitions = transitions
        if updated is not None:
            self.updated = updated

    @property
    def created(self):
        """Gets the created of this Workflow.  # noqa: E501

        The creation date of the workflow.  # noqa: E501

        :return: The created of this Workflow.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Workflow.

        The creation date of the workflow.  # noqa: E501

        :param created: The created of this Workflow.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def description(self):
        """Gets the description of this Workflow.  # noqa: E501

        The description of the workflow.  # noqa: E501

        :return: The description of this Workflow.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Workflow.

        The description of the workflow.  # noqa: E501

        :param description: The description of this Workflow.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def has_draft_workflow(self):
        """Gets the has_draft_workflow of this Workflow.  # noqa: E501

        Whether the workflow has a draft version.  # noqa: E501

        :return: The has_draft_workflow of this Workflow.  # noqa: E501
        :rtype: bool
        """
        return self._has_draft_workflow

    @has_draft_workflow.setter
    def has_draft_workflow(self, has_draft_workflow):
        """Sets the has_draft_workflow of this Workflow.

        Whether the workflow has a draft version.  # noqa: E501

        :param has_draft_workflow: The has_draft_workflow of this Workflow.  # noqa: E501
        :type: bool
        """

        self._has_draft_workflow = has_draft_workflow

    @property
    def id(self):
        """Gets the id of this Workflow.  # noqa: E501


        :return: The id of this Workflow.  # noqa: E501
        :rtype: PublishedWorkflowId
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Workflow.


        :param id: The id of this Workflow.  # noqa: E501
        :type: PublishedWorkflowId
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def is_default(self):
        """Gets the is_default of this Workflow.  # noqa: E501

        Whether this is the default workflow.  # noqa: E501

        :return: The is_default of this Workflow.  # noqa: E501
        :rtype: bool
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default):
        """Sets the is_default of this Workflow.

        Whether this is the default workflow.  # noqa: E501

        :param is_default: The is_default of this Workflow.  # noqa: E501
        :type: bool
        """

        self._is_default = is_default

    @property
    def operations(self):
        """Gets the operations of this Workflow.  # noqa: E501


        :return: The operations of this Workflow.  # noqa: E501
        :rtype: WorkflowOperations
        """
        return self._operations

    @operations.setter
    def operations(self, operations):
        """Sets the operations of this Workflow.


        :param operations: The operations of this Workflow.  # noqa: E501
        :type: WorkflowOperations
        """

        self._operations = operations

    @property
    def projects(self):
        """Gets the projects of this Workflow.  # noqa: E501

        The projects the workflow is assigned to, through workflow schemes.  # noqa: E501

        :return: The projects of this Workflow.  # noqa: E501
        :rtype: list[ProjectDetails]
        """
        return self._projects

    @projects.setter
    def projects(self, projects):
        """Sets the projects of this Workflow.

        The projects the workflow is assigned to, through workflow schemes.  # noqa: E501

        :param projects: The projects of this Workflow.  # noqa: E501
        :type: list[ProjectDetails]
        """

        self._projects = projects

    @property
    def schemes(self):
        """Gets the schemes of this Workflow.  # noqa: E501

        The workflow schemes the workflow is assigned to.  # noqa: E501

        :return: The schemes of this Workflow.  # noqa: E501
        :rtype: list[WorkflowSchemeIdName]
        """
        return self._schemes

    @schemes.setter
    def schemes(self, schemes):
        """Sets the schemes of this Workflow.

        The workflow schemes the workflow is assigned to.  # noqa: E501

        :param schemes: The schemes of this Workflow.  # noqa: E501
        :type: list[WorkflowSchemeIdName]
        """

        self._schemes = schemes

    @property
    def statuses(self):
        """Gets the statuses of this Workflow.  # noqa: E501

        The statuses of the workflow.  # noqa: E501

        :return: The statuses of this Workflow.  # noqa: E501
        :rtype: list[WorkflowStatus]
        """
        return self._statuses

    @statuses.setter
    def statuses(self, statuses):
        """Sets the statuses of this Workflow.

        The statuses of the workflow.  # noqa: E501

        :param statuses: The statuses of this Workflow.  # noqa: E501
        :type: list[WorkflowStatus]
        """

        self._statuses = statuses

    @property
    def transitions(self):
        """Gets the transitions of this Workflow.  # noqa: E501

        The transitions of the workflow.  # noqa: E501

        :return: The transitions of this Workflow.  # noqa: E501
        :rtype: list[Transition]
        """
        return self._transitions

    @transitions.setter
    def transitions(self, transitions):
        """Sets the transitions of this Workflow.

        The transitions of the workflow.  # noqa: E501

        :param transitions: The transitions of this Workflow.  # noqa: E501
        :type: list[Transition]
        """

        self._transitions = transitions

    @property
    def updated(self):
        """Gets the updated of this Workflow.  # noqa: E501

        The last edited date of the workflow.  # noqa: E501

        :return: The updated of this Workflow.  # noqa: E501
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this Workflow.

        The last edited date of the workflow.  # noqa: E501

        :param updated: The updated of this Workflow.  # noqa: E501
        :type: datetime
        """

        self._updated = updated

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Workflow, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Workflow):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
