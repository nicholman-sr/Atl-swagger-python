# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WorkflowCreate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'looped_transition_container_layout': 'WorkflowLayout',
        'name': 'str',
        'start_point_layout': 'WorkflowLayout',
        'statuses': 'list[StatusLayoutUpdate]',
        'transitions': 'list[TransitionUpdateDTO]'
    }

    attribute_map = {
        'description': 'description',
        'looped_transition_container_layout': 'loopedTransitionContainerLayout',
        'name': 'name',
        'start_point_layout': 'startPointLayout',
        'statuses': 'statuses',
        'transitions': 'transitions'
    }

    def __init__(self, description=None, looped_transition_container_layout=None, name=None, start_point_layout=None, statuses=None, transitions=None):  # noqa: E501
        """WorkflowCreate - a model defined in Swagger"""  # noqa: E501
        self._description = None
        self._looped_transition_container_layout = None
        self._name = None
        self._start_point_layout = None
        self._statuses = None
        self._transitions = None
        self.discriminator = None
        if description is not None:
            self.description = description
        if looped_transition_container_layout is not None:
            self.looped_transition_container_layout = looped_transition_container_layout
        self.name = name
        if start_point_layout is not None:
            self.start_point_layout = start_point_layout
        self.statuses = statuses
        self.transitions = transitions

    @property
    def description(self):
        """Gets the description of this WorkflowCreate.  # noqa: E501

        The description of the workflow to create.  # noqa: E501

        :return: The description of this WorkflowCreate.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this WorkflowCreate.

        The description of the workflow to create.  # noqa: E501

        :param description: The description of this WorkflowCreate.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def looped_transition_container_layout(self):
        """Gets the looped_transition_container_layout of this WorkflowCreate.  # noqa: E501


        :return: The looped_transition_container_layout of this WorkflowCreate.  # noqa: E501
        :rtype: WorkflowLayout
        """
        return self._looped_transition_container_layout

    @looped_transition_container_layout.setter
    def looped_transition_container_layout(self, looped_transition_container_layout):
        """Sets the looped_transition_container_layout of this WorkflowCreate.


        :param looped_transition_container_layout: The looped_transition_container_layout of this WorkflowCreate.  # noqa: E501
        :type: WorkflowLayout
        """

        self._looped_transition_container_layout = looped_transition_container_layout

    @property
    def name(self):
        """Gets the name of this WorkflowCreate.  # noqa: E501

        The name of the workflow to create.  # noqa: E501

        :return: The name of this WorkflowCreate.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WorkflowCreate.

        The name of the workflow to create.  # noqa: E501

        :param name: The name of this WorkflowCreate.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def start_point_layout(self):
        """Gets the start_point_layout of this WorkflowCreate.  # noqa: E501


        :return: The start_point_layout of this WorkflowCreate.  # noqa: E501
        :rtype: WorkflowLayout
        """
        return self._start_point_layout

    @start_point_layout.setter
    def start_point_layout(self, start_point_layout):
        """Sets the start_point_layout of this WorkflowCreate.


        :param start_point_layout: The start_point_layout of this WorkflowCreate.  # noqa: E501
        :type: WorkflowLayout
        """

        self._start_point_layout = start_point_layout

    @property
    def statuses(self):
        """Gets the statuses of this WorkflowCreate.  # noqa: E501

        The statuses associated with this workflow.  # noqa: E501

        :return: The statuses of this WorkflowCreate.  # noqa: E501
        :rtype: list[StatusLayoutUpdate]
        """
        return self._statuses

    @statuses.setter
    def statuses(self, statuses):
        """Sets the statuses of this WorkflowCreate.

        The statuses associated with this workflow.  # noqa: E501

        :param statuses: The statuses of this WorkflowCreate.  # noqa: E501
        :type: list[StatusLayoutUpdate]
        """
        if statuses is None:
            raise ValueError("Invalid value for `statuses`, must not be `None`")  # noqa: E501

        self._statuses = statuses

    @property
    def transitions(self):
        """Gets the transitions of this WorkflowCreate.  # noqa: E501

        The transitions of this workflow.  # noqa: E501

        :return: The transitions of this WorkflowCreate.  # noqa: E501
        :rtype: list[TransitionUpdateDTO]
        """
        return self._transitions

    @transitions.setter
    def transitions(self, transitions):
        """Sets the transitions of this WorkflowCreate.

        The transitions of this workflow.  # noqa: E501

        :param transitions: The transitions of this WorkflowCreate.  # noqa: E501
        :type: list[TransitionUpdateDTO]
        """
        if transitions is None:
            raise ValueError("Invalid value for `transitions`, must not be `None`")  # noqa: E501

        self._transitions = transitions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WorkflowCreate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorkflowCreate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
