# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WorkflowSchemeUpdateRequiredMappingsResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status_mappings_by_issue_types': 'list[RequiredMappingByIssueType]',
        'status_mappings_by_workflows': 'list[RequiredMappingByWorkflows]',
        'statuses': 'list[StatusMetadata]',
        'statuses_per_workflow': 'list[StatusesPerWorkflow]'
    }

    attribute_map = {
        'status_mappings_by_issue_types': 'statusMappingsByIssueTypes',
        'status_mappings_by_workflows': 'statusMappingsByWorkflows',
        'statuses': 'statuses',
        'statuses_per_workflow': 'statusesPerWorkflow'
    }

    def __init__(self, status_mappings_by_issue_types=None, status_mappings_by_workflows=None, statuses=None, statuses_per_workflow=None):  # noqa: E501
        """WorkflowSchemeUpdateRequiredMappingsResponse - a model defined in Swagger"""  # noqa: E501
        self._status_mappings_by_issue_types = None
        self._status_mappings_by_workflows = None
        self._statuses = None
        self._statuses_per_workflow = None
        self.discriminator = None
        if status_mappings_by_issue_types is not None:
            self.status_mappings_by_issue_types = status_mappings_by_issue_types
        if status_mappings_by_workflows is not None:
            self.status_mappings_by_workflows = status_mappings_by_workflows
        if statuses is not None:
            self.statuses = statuses
        if statuses_per_workflow is not None:
            self.statuses_per_workflow = statuses_per_workflow

    @property
    def status_mappings_by_issue_types(self):
        """Gets the status_mappings_by_issue_types of this WorkflowSchemeUpdateRequiredMappingsResponse.  # noqa: E501

        The list of required status mappings by issue type.  # noqa: E501

        :return: The status_mappings_by_issue_types of this WorkflowSchemeUpdateRequiredMappingsResponse.  # noqa: E501
        :rtype: list[RequiredMappingByIssueType]
        """
        return self._status_mappings_by_issue_types

    @status_mappings_by_issue_types.setter
    def status_mappings_by_issue_types(self, status_mappings_by_issue_types):
        """Sets the status_mappings_by_issue_types of this WorkflowSchemeUpdateRequiredMappingsResponse.

        The list of required status mappings by issue type.  # noqa: E501

        :param status_mappings_by_issue_types: The status_mappings_by_issue_types of this WorkflowSchemeUpdateRequiredMappingsResponse.  # noqa: E501
        :type: list[RequiredMappingByIssueType]
        """

        self._status_mappings_by_issue_types = status_mappings_by_issue_types

    @property
    def status_mappings_by_workflows(self):
        """Gets the status_mappings_by_workflows of this WorkflowSchemeUpdateRequiredMappingsResponse.  # noqa: E501

        The list of required status mappings by workflow.  # noqa: E501

        :return: The status_mappings_by_workflows of this WorkflowSchemeUpdateRequiredMappingsResponse.  # noqa: E501
        :rtype: list[RequiredMappingByWorkflows]
        """
        return self._status_mappings_by_workflows

    @status_mappings_by_workflows.setter
    def status_mappings_by_workflows(self, status_mappings_by_workflows):
        """Sets the status_mappings_by_workflows of this WorkflowSchemeUpdateRequiredMappingsResponse.

        The list of required status mappings by workflow.  # noqa: E501

        :param status_mappings_by_workflows: The status_mappings_by_workflows of this WorkflowSchemeUpdateRequiredMappingsResponse.  # noqa: E501
        :type: list[RequiredMappingByWorkflows]
        """

        self._status_mappings_by_workflows = status_mappings_by_workflows

    @property
    def statuses(self):
        """Gets the statuses of this WorkflowSchemeUpdateRequiredMappingsResponse.  # noqa: E501

        The details of the statuses in the associated workflows.  # noqa: E501

        :return: The statuses of this WorkflowSchemeUpdateRequiredMappingsResponse.  # noqa: E501
        :rtype: list[StatusMetadata]
        """
        return self._statuses

    @statuses.setter
    def statuses(self, statuses):
        """Sets the statuses of this WorkflowSchemeUpdateRequiredMappingsResponse.

        The details of the statuses in the associated workflows.  # noqa: E501

        :param statuses: The statuses of this WorkflowSchemeUpdateRequiredMappingsResponse.  # noqa: E501
        :type: list[StatusMetadata]
        """

        self._statuses = statuses

    @property
    def statuses_per_workflow(self):
        """Gets the statuses_per_workflow of this WorkflowSchemeUpdateRequiredMappingsResponse.  # noqa: E501

        The statuses associated with each workflow.  # noqa: E501

        :return: The statuses_per_workflow of this WorkflowSchemeUpdateRequiredMappingsResponse.  # noqa: E501
        :rtype: list[StatusesPerWorkflow]
        """
        return self._statuses_per_workflow

    @statuses_per_workflow.setter
    def statuses_per_workflow(self, statuses_per_workflow):
        """Sets the statuses_per_workflow of this WorkflowSchemeUpdateRequiredMappingsResponse.

        The statuses associated with each workflow.  # noqa: E501

        :param statuses_per_workflow: The statuses_per_workflow of this WorkflowSchemeUpdateRequiredMappingsResponse.  # noqa: E501
        :type: list[StatusesPerWorkflow]
        """

        self._statuses_per_workflow = statuses_per_workflow

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WorkflowSchemeUpdateRequiredMappingsResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorkflowSchemeUpdateRequiredMappingsResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
