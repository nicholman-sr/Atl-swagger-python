# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WorkflowTransitions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'actions': 'list[WorkflowRuleConfiguration]',
        'conditions': 'ConditionGroupConfiguration',
        'custom_issue_event_id': 'str',
        'description': 'str',
        'id': 'str',
        'links': 'list[WorkflowTransitionLinks]',
        'name': 'str',
        'properties': 'dict(str, str)',
        'to_status_reference': 'str',
        'transition_screen': 'WorkflowRuleConfiguration',
        'triggers': 'list[WorkflowTrigger]',
        'type': 'str',
        'validators': 'list[WorkflowRuleConfiguration]'
    }

    attribute_map = {
        'actions': 'actions',
        'conditions': 'conditions',
        'custom_issue_event_id': 'customIssueEventId',
        'description': 'description',
        'id': 'id',
        'links': 'links',
        'name': 'name',
        'properties': 'properties',
        'to_status_reference': 'toStatusReference',
        'transition_screen': 'transitionScreen',
        'triggers': 'triggers',
        'type': 'type',
        'validators': 'validators'
    }

    def __init__(self, actions=None, conditions=None, custom_issue_event_id=None, description=None, id=None, links=None, name=None, properties=None, to_status_reference=None, transition_screen=None, triggers=None, type=None, validators=None):  # noqa: E501
        """WorkflowTransitions - a model defined in Swagger"""  # noqa: E501
        self._actions = None
        self._conditions = None
        self._custom_issue_event_id = None
        self._description = None
        self._id = None
        self._links = None
        self._name = None
        self._properties = None
        self._to_status_reference = None
        self._transition_screen = None
        self._triggers = None
        self._type = None
        self._validators = None
        self.discriminator = None
        if actions is not None:
            self.actions = actions
        if conditions is not None:
            self.conditions = conditions
        if custom_issue_event_id is not None:
            self.custom_issue_event_id = custom_issue_event_id
        if description is not None:
            self.description = description
        if id is not None:
            self.id = id
        if links is not None:
            self.links = links
        if name is not None:
            self.name = name
        if properties is not None:
            self.properties = properties
        if to_status_reference is not None:
            self.to_status_reference = to_status_reference
        if transition_screen is not None:
            self.transition_screen = transition_screen
        if triggers is not None:
            self.triggers = triggers
        if type is not None:
            self.type = type
        if validators is not None:
            self.validators = validators

    @property
    def actions(self):
        """Gets the actions of this WorkflowTransitions.  # noqa: E501

        The post-functions of the transition.  # noqa: E501

        :return: The actions of this WorkflowTransitions.  # noqa: E501
        :rtype: list[WorkflowRuleConfiguration]
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """Sets the actions of this WorkflowTransitions.

        The post-functions of the transition.  # noqa: E501

        :param actions: The actions of this WorkflowTransitions.  # noqa: E501
        :type: list[WorkflowRuleConfiguration]
        """

        self._actions = actions

    @property
    def conditions(self):
        """Gets the conditions of this WorkflowTransitions.  # noqa: E501


        :return: The conditions of this WorkflowTransitions.  # noqa: E501
        :rtype: ConditionGroupConfiguration
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this WorkflowTransitions.


        :param conditions: The conditions of this WorkflowTransitions.  # noqa: E501
        :type: ConditionGroupConfiguration
        """

        self._conditions = conditions

    @property
    def custom_issue_event_id(self):
        """Gets the custom_issue_event_id of this WorkflowTransitions.  # noqa: E501

        The custom event ID of the transition.  # noqa: E501

        :return: The custom_issue_event_id of this WorkflowTransitions.  # noqa: E501
        :rtype: str
        """
        return self._custom_issue_event_id

    @custom_issue_event_id.setter
    def custom_issue_event_id(self, custom_issue_event_id):
        """Sets the custom_issue_event_id of this WorkflowTransitions.

        The custom event ID of the transition.  # noqa: E501

        :param custom_issue_event_id: The custom_issue_event_id of this WorkflowTransitions.  # noqa: E501
        :type: str
        """

        self._custom_issue_event_id = custom_issue_event_id

    @property
    def description(self):
        """Gets the description of this WorkflowTransitions.  # noqa: E501

        The description of the transition.  # noqa: E501

        :return: The description of this WorkflowTransitions.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this WorkflowTransitions.

        The description of the transition.  # noqa: E501

        :param description: The description of this WorkflowTransitions.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this WorkflowTransitions.  # noqa: E501

        The ID of the transition.  # noqa: E501

        :return: The id of this WorkflowTransitions.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this WorkflowTransitions.

        The ID of the transition.  # noqa: E501

        :param id: The id of this WorkflowTransitions.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def links(self):
        """Gets the links of this WorkflowTransitions.  # noqa: E501

        The statuses the transition can start from, and the mapping of ports between the statuses.  # noqa: E501

        :return: The links of this WorkflowTransitions.  # noqa: E501
        :rtype: list[WorkflowTransitionLinks]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this WorkflowTransitions.

        The statuses the transition can start from, and the mapping of ports between the statuses.  # noqa: E501

        :param links: The links of this WorkflowTransitions.  # noqa: E501
        :type: list[WorkflowTransitionLinks]
        """

        self._links = links

    @property
    def name(self):
        """Gets the name of this WorkflowTransitions.  # noqa: E501

        The name of the transition.  # noqa: E501

        :return: The name of this WorkflowTransitions.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WorkflowTransitions.

        The name of the transition.  # noqa: E501

        :param name: The name of this WorkflowTransitions.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def properties(self):
        """Gets the properties of this WorkflowTransitions.  # noqa: E501

        The properties of the transition.  # noqa: E501

        :return: The properties of this WorkflowTransitions.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this WorkflowTransitions.

        The properties of the transition.  # noqa: E501

        :param properties: The properties of this WorkflowTransitions.  # noqa: E501
        :type: dict(str, str)
        """

        self._properties = properties

    @property
    def to_status_reference(self):
        """Gets the to_status_reference of this WorkflowTransitions.  # noqa: E501

        The status the transition goes to.  # noqa: E501

        :return: The to_status_reference of this WorkflowTransitions.  # noqa: E501
        :rtype: str
        """
        return self._to_status_reference

    @to_status_reference.setter
    def to_status_reference(self, to_status_reference):
        """Sets the to_status_reference of this WorkflowTransitions.

        The status the transition goes to.  # noqa: E501

        :param to_status_reference: The to_status_reference of this WorkflowTransitions.  # noqa: E501
        :type: str
        """

        self._to_status_reference = to_status_reference

    @property
    def transition_screen(self):
        """Gets the transition_screen of this WorkflowTransitions.  # noqa: E501


        :return: The transition_screen of this WorkflowTransitions.  # noqa: E501
        :rtype: WorkflowRuleConfiguration
        """
        return self._transition_screen

    @transition_screen.setter
    def transition_screen(self, transition_screen):
        """Sets the transition_screen of this WorkflowTransitions.


        :param transition_screen: The transition_screen of this WorkflowTransitions.  # noqa: E501
        :type: WorkflowRuleConfiguration
        """

        self._transition_screen = transition_screen

    @property
    def triggers(self):
        """Gets the triggers of this WorkflowTransitions.  # noqa: E501

        The triggers of the transition.  # noqa: E501

        :return: The triggers of this WorkflowTransitions.  # noqa: E501
        :rtype: list[WorkflowTrigger]
        """
        return self._triggers

    @triggers.setter
    def triggers(self, triggers):
        """Sets the triggers of this WorkflowTransitions.

        The triggers of the transition.  # noqa: E501

        :param triggers: The triggers of this WorkflowTransitions.  # noqa: E501
        :type: list[WorkflowTrigger]
        """

        self._triggers = triggers

    @property
    def type(self):
        """Gets the type of this WorkflowTransitions.  # noqa: E501

        The transition type.  # noqa: E501

        :return: The type of this WorkflowTransitions.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this WorkflowTransitions.

        The transition type.  # noqa: E501

        :param type: The type of this WorkflowTransitions.  # noqa: E501
        :type: str
        """
        allowed_values = ["INITIAL", "GLOBAL", "DIRECTED"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def validators(self):
        """Gets the validators of this WorkflowTransitions.  # noqa: E501

        The validators of the transition.  # noqa: E501

        :return: The validators of this WorkflowTransitions.  # noqa: E501
        :rtype: list[WorkflowRuleConfiguration]
        """
        return self._validators

    @validators.setter
    def validators(self, validators):
        """Sets the validators of this WorkflowTransitions.

        The validators of the transition.  # noqa: E501

        :param validators: The validators of this WorkflowTransitions.  # noqa: E501
        :type: list[WorkflowRuleConfiguration]
        """

        self._validators = validators

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WorkflowTransitions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorkflowTransitions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
