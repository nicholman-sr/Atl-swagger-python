# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class IssueCustomFieldOptionsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_custom_field_option(self, body, field_id, context_id, **kwargs):  # noqa: E501
        """Create custom field options (context)  # noqa: E501

        Creates options and, where the custom select field is of the type Select List (cascading), cascading options for a custom select field. The options are added to a context of the field.  The maximum number of options that can be created per request is 1000 and each field can have a maximum of 10000 options.  This operation works for custom field options created in Jira or the operations from this resource. **To work with issue field select list options created for Connect apps use the [Issue custom field options (apps)](#api-group-issue-custom-field-options--apps-) operations.**  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_custom_field_option(body, field_id, context_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BulkCustomFieldOptionCreateRequest body: (required)
        :param str field_id: The ID of the custom field. (required)
        :param int context_id: The ID of the context. (required)
        :return: CustomFieldCreatedContextOptionsList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_custom_field_option_with_http_info(body, field_id, context_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_custom_field_option_with_http_info(body, field_id, context_id, **kwargs)  # noqa: E501
            return data

    def create_custom_field_option_with_http_info(self, body, field_id, context_id, **kwargs):  # noqa: E501
        """Create custom field options (context)  # noqa: E501

        Creates options and, where the custom select field is of the type Select List (cascading), cascading options for a custom select field. The options are added to a context of the field.  The maximum number of options that can be created per request is 1000 and each field can have a maximum of 10000 options.  This operation works for custom field options created in Jira or the operations from this resource. **To work with issue field select list options created for Connect apps use the [Issue custom field options (apps)](#api-group-issue-custom-field-options--apps-) operations.**  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_custom_field_option_with_http_info(body, field_id, context_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BulkCustomFieldOptionCreateRequest body: (required)
        :param str field_id: The ID of the custom field. (required)
        :param int context_id: The ID of the context. (required)
        :return: CustomFieldCreatedContextOptionsList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'field_id', 'context_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_custom_field_option" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_custom_field_option`")  # noqa: E501
        # verify the required parameter 'field_id' is set
        if ('field_id' not in params or
                params['field_id'] is None):
            raise ValueError("Missing the required parameter `field_id` when calling `create_custom_field_option`")  # noqa: E501
        # verify the required parameter 'context_id' is set
        if ('context_id' not in params or
                params['context_id'] is None):
            raise ValueError("Missing the required parameter `context_id` when calling `create_custom_field_option`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'field_id' in params:
            path_params['fieldId'] = params['field_id']  # noqa: E501
        if 'context_id' in params:
            path_params['contextId'] = params['context_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rest/api/3/field/{fieldId}/context/{contextId}/option', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CustomFieldCreatedContextOptionsList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_custom_field_option(self, field_id, context_id, option_id, **kwargs):  # noqa: E501
        """Delete custom field options (context)  # noqa: E501

        Deletes a custom field option.  Options with cascading options cannot be deleted without deleting the cascading options first.  This operation works for custom field options created in Jira or the operations from this resource. **To work with issue field select list options created for Connect apps use the [Issue custom field options (apps)](#api-group-issue-custom-field-options--apps-) operations.**  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_custom_field_option(field_id, context_id, option_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str field_id: The ID of the custom field. (required)
        :param int context_id: The ID of the context from which an option should be deleted. (required)
        :param int option_id: The ID of the option to delete. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_custom_field_option_with_http_info(field_id, context_id, option_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_custom_field_option_with_http_info(field_id, context_id, option_id, **kwargs)  # noqa: E501
            return data

    def delete_custom_field_option_with_http_info(self, field_id, context_id, option_id, **kwargs):  # noqa: E501
        """Delete custom field options (context)  # noqa: E501

        Deletes a custom field option.  Options with cascading options cannot be deleted without deleting the cascading options first.  This operation works for custom field options created in Jira or the operations from this resource. **To work with issue field select list options created for Connect apps use the [Issue custom field options (apps)](#api-group-issue-custom-field-options--apps-) operations.**  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_custom_field_option_with_http_info(field_id, context_id, option_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str field_id: The ID of the custom field. (required)
        :param int context_id: The ID of the context from which an option should be deleted. (required)
        :param int option_id: The ID of the option to delete. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['field_id', 'context_id', 'option_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_custom_field_option" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'field_id' is set
        if ('field_id' not in params or
                params['field_id'] is None):
            raise ValueError("Missing the required parameter `field_id` when calling `delete_custom_field_option`")  # noqa: E501
        # verify the required parameter 'context_id' is set
        if ('context_id' not in params or
                params['context_id'] is None):
            raise ValueError("Missing the required parameter `context_id` when calling `delete_custom_field_option`")  # noqa: E501
        # verify the required parameter 'option_id' is set
        if ('option_id' not in params or
                params['option_id'] is None):
            raise ValueError("Missing the required parameter `option_id` when calling `delete_custom_field_option`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'field_id' in params:
            path_params['fieldId'] = params['field_id']  # noqa: E501
        if 'context_id' in params:
            path_params['contextId'] = params['context_id']  # noqa: E501
        if 'option_id' in params:
            path_params['optionId'] = params['option_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rest/api/3/field/{fieldId}/context/{contextId}/option/{optionId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_custom_field_option(self, id, **kwargs):  # noqa: E501
        """Get custom field option  # noqa: E501

        Returns a custom field option. For example, an option in a select list.  Note that this operation **only works for issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource**, it cannot be used with issue field select list options created by Connect apps.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** The custom field option is returned as follows:   *  if the user has the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  *  if the user has the *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for at least one project the custom field is used in, and the field is visible in at least one layout the user has permission to view.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_custom_field_option(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the custom field option. (required)
        :return: CustomFieldOption
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_custom_field_option_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_custom_field_option_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_custom_field_option_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get custom field option  # noqa: E501

        Returns a custom field option. For example, an option in a select list.  Note that this operation **only works for issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource**, it cannot be used with issue field select list options created by Connect apps.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** The custom field option is returned as follows:   *  if the user has the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  *  if the user has the *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for at least one project the custom field is used in, and the field is visible in at least one layout the user has permission to view.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_custom_field_option_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the custom field option. (required)
        :return: CustomFieldOption
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_custom_field_option" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_custom_field_option`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rest/api/3/customFieldOption/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CustomFieldOption',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_options_for_context(self, field_id, context_id, **kwargs):  # noqa: E501
        """Get custom field options (context)  # noqa: E501

        Returns a [paginated](#pagination) list of all custom field option for a context. Options are returned first then cascading options, in the order they display in Jira.  This operation works for custom field options created in Jira or the operations from this resource. **To work with issue field select list options created for Connect apps use the [Issue custom field options (apps)](#api-group-issue-custom-field-options--apps-) operations.**  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). *Edit Workflow* [edit workflow permission](https://support.atlassian.com/jira-cloud-administration/docs/permissions-for-company-managed-projects/#Edit-Workflows)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_options_for_context(field_id, context_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str field_id: The ID of the custom field. (required)
        :param int context_id: The ID of the context. (required)
        :param int option_id: The ID of the option.
        :param bool only_options: Whether only options are returned.
        :param int start_at: The index of the first item to return in a page of results (page offset).
        :param int max_results: The maximum number of items to return per page.
        :return: PageBeanCustomFieldContextOption
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_options_for_context_with_http_info(field_id, context_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_options_for_context_with_http_info(field_id, context_id, **kwargs)  # noqa: E501
            return data

    def get_options_for_context_with_http_info(self, field_id, context_id, **kwargs):  # noqa: E501
        """Get custom field options (context)  # noqa: E501

        Returns a [paginated](#pagination) list of all custom field option for a context. Options are returned first then cascading options, in the order they display in Jira.  This operation works for custom field options created in Jira or the operations from this resource. **To work with issue field select list options created for Connect apps use the [Issue custom field options (apps)](#api-group-issue-custom-field-options--apps-) operations.**  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). *Edit Workflow* [edit workflow permission](https://support.atlassian.com/jira-cloud-administration/docs/permissions-for-company-managed-projects/#Edit-Workflows)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_options_for_context_with_http_info(field_id, context_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str field_id: The ID of the custom field. (required)
        :param int context_id: The ID of the context. (required)
        :param int option_id: The ID of the option.
        :param bool only_options: Whether only options are returned.
        :param int start_at: The index of the first item to return in a page of results (page offset).
        :param int max_results: The maximum number of items to return per page.
        :return: PageBeanCustomFieldContextOption
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['field_id', 'context_id', 'option_id', 'only_options', 'start_at', 'max_results']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_options_for_context" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'field_id' is set
        if ('field_id' not in params or
                params['field_id'] is None):
            raise ValueError("Missing the required parameter `field_id` when calling `get_options_for_context`")  # noqa: E501
        # verify the required parameter 'context_id' is set
        if ('context_id' not in params or
                params['context_id'] is None):
            raise ValueError("Missing the required parameter `context_id` when calling `get_options_for_context`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'field_id' in params:
            path_params['fieldId'] = params['field_id']  # noqa: E501
        if 'context_id' in params:
            path_params['contextId'] = params['context_id']  # noqa: E501

        query_params = []
        if 'option_id' in params:
            query_params.append(('optionId', params['option_id']))  # noqa: E501
        if 'only_options' in params:
            query_params.append(('onlyOptions', params['only_options']))  # noqa: E501
        if 'start_at' in params:
            query_params.append(('startAt', params['start_at']))  # noqa: E501
        if 'max_results' in params:
            query_params.append(('maxResults', params['max_results']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rest/api/3/field/{fieldId}/context/{contextId}/option', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PageBeanCustomFieldContextOption',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reorder_custom_field_options(self, body, field_id, context_id, **kwargs):  # noqa: E501
        """Reorder custom field options (context)  # noqa: E501

        Changes the order of custom field options or cascading options in a context.  This operation works for custom field options created in Jira or the operations from this resource. **To work with issue field select list options created for Connect apps use the [Issue custom field options (apps)](#api-group-issue-custom-field-options--apps-) operations.**  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reorder_custom_field_options(body, field_id, context_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OrderOfCustomFieldOptions body: (required)
        :param str field_id: The ID of the custom field. (required)
        :param int context_id: The ID of the context. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.reorder_custom_field_options_with_http_info(body, field_id, context_id, **kwargs)  # noqa: E501
        else:
            (data) = self.reorder_custom_field_options_with_http_info(body, field_id, context_id, **kwargs)  # noqa: E501
            return data

    def reorder_custom_field_options_with_http_info(self, body, field_id, context_id, **kwargs):  # noqa: E501
        """Reorder custom field options (context)  # noqa: E501

        Changes the order of custom field options or cascading options in a context.  This operation works for custom field options created in Jira or the operations from this resource. **To work with issue field select list options created for Connect apps use the [Issue custom field options (apps)](#api-group-issue-custom-field-options--apps-) operations.**  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reorder_custom_field_options_with_http_info(body, field_id, context_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OrderOfCustomFieldOptions body: (required)
        :param str field_id: The ID of the custom field. (required)
        :param int context_id: The ID of the context. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'field_id', 'context_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reorder_custom_field_options" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `reorder_custom_field_options`")  # noqa: E501
        # verify the required parameter 'field_id' is set
        if ('field_id' not in params or
                params['field_id'] is None):
            raise ValueError("Missing the required parameter `field_id` when calling `reorder_custom_field_options`")  # noqa: E501
        # verify the required parameter 'context_id' is set
        if ('context_id' not in params or
                params['context_id'] is None):
            raise ValueError("Missing the required parameter `context_id` when calling `reorder_custom_field_options`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'field_id' in params:
            path_params['fieldId'] = params['field_id']  # noqa: E501
        if 'context_id' in params:
            path_params['contextId'] = params['context_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rest/api/3/field/{fieldId}/context/{contextId}/option/move', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def replace_custom_field_option(self, field_id, option_id, context_id, **kwargs):  # noqa: E501
        """Replace custom field options  # noqa: E501

        Replaces the options of a custom field.  Note that this operation **only works for issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource**, it cannot be used with issue field select list options created by Connect or Forge apps.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_custom_field_option(field_id, option_id, context_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str field_id: The ID of the custom field. (required)
        :param int option_id: The ID of the option to be deselected. (required)
        :param int context_id: The ID of the context. (required)
        :param int replace_with: The ID of the option that will replace the currently selected option.
        :param str jql: A JQL query that specifies the issues to be updated. For example, *project=10000*.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.replace_custom_field_option_with_http_info(field_id, option_id, context_id, **kwargs)  # noqa: E501
        else:
            (data) = self.replace_custom_field_option_with_http_info(field_id, option_id, context_id, **kwargs)  # noqa: E501
            return data

    def replace_custom_field_option_with_http_info(self, field_id, option_id, context_id, **kwargs):  # noqa: E501
        """Replace custom field options  # noqa: E501

        Replaces the options of a custom field.  Note that this operation **only works for issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource**, it cannot be used with issue field select list options created by Connect or Forge apps.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_custom_field_option_with_http_info(field_id, option_id, context_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str field_id: The ID of the custom field. (required)
        :param int option_id: The ID of the option to be deselected. (required)
        :param int context_id: The ID of the context. (required)
        :param int replace_with: The ID of the option that will replace the currently selected option.
        :param str jql: A JQL query that specifies the issues to be updated. For example, *project=10000*.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['field_id', 'option_id', 'context_id', 'replace_with', 'jql']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_custom_field_option" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'field_id' is set
        if ('field_id' not in params or
                params['field_id'] is None):
            raise ValueError("Missing the required parameter `field_id` when calling `replace_custom_field_option`")  # noqa: E501
        # verify the required parameter 'option_id' is set
        if ('option_id' not in params or
                params['option_id'] is None):
            raise ValueError("Missing the required parameter `option_id` when calling `replace_custom_field_option`")  # noqa: E501
        # verify the required parameter 'context_id' is set
        if ('context_id' not in params or
                params['context_id'] is None):
            raise ValueError("Missing the required parameter `context_id` when calling `replace_custom_field_option`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'field_id' in params:
            path_params['fieldId'] = params['field_id']  # noqa: E501
        if 'option_id' in params:
            path_params['optionId'] = params['option_id']  # noqa: E501
        if 'context_id' in params:
            path_params['contextId'] = params['context_id']  # noqa: E501

        query_params = []
        if 'replace_with' in params:
            query_params.append(('replaceWith', params['replace_with']))  # noqa: E501
        if 'jql' in params:
            query_params.append(('jql', params['jql']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rest/api/3/field/{fieldId}/context/{contextId}/option/{optionId}/issue', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_custom_field_option(self, body, field_id, context_id, **kwargs):  # noqa: E501
        """Update custom field options (context)  # noqa: E501

        Updates the options of a custom field.  If any of the options are not found, no options are updated. Options where the values in the request match the current values aren't updated and aren't reported in the response.  Note that this operation **only works for issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource**, it cannot be used with issue field select list options created by Connect apps.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_custom_field_option(body, field_id, context_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BulkCustomFieldOptionUpdateRequest body: (required)
        :param str field_id: The ID of the custom field. (required)
        :param int context_id: The ID of the context. (required)
        :return: CustomFieldUpdatedContextOptionsList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_custom_field_option_with_http_info(body, field_id, context_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_custom_field_option_with_http_info(body, field_id, context_id, **kwargs)  # noqa: E501
            return data

    def update_custom_field_option_with_http_info(self, body, field_id, context_id, **kwargs):  # noqa: E501
        """Update custom field options (context)  # noqa: E501

        Updates the options of a custom field.  If any of the options are not found, no options are updated. Options where the values in the request match the current values aren't updated and aren't reported in the response.  Note that this operation **only works for issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource**, it cannot be used with issue field select list options created by Connect apps.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_custom_field_option_with_http_info(body, field_id, context_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BulkCustomFieldOptionUpdateRequest body: (required)
        :param str field_id: The ID of the custom field. (required)
        :param int context_id: The ID of the context. (required)
        :return: CustomFieldUpdatedContextOptionsList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'field_id', 'context_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_custom_field_option" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_custom_field_option`")  # noqa: E501
        # verify the required parameter 'field_id' is set
        if ('field_id' not in params or
                params['field_id'] is None):
            raise ValueError("Missing the required parameter `field_id` when calling `update_custom_field_option`")  # noqa: E501
        # verify the required parameter 'context_id' is set
        if ('context_id' not in params or
                params['context_id'] is None):
            raise ValueError("Missing the required parameter `context_id` when calling `update_custom_field_option`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'field_id' in params:
            path_params['fieldId'] = params['field_id']  # noqa: E501
        if 'context_id' in params:
            path_params['contextId'] = params['context_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rest/api/3/field/{fieldId}/context/{contextId}/option', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CustomFieldUpdatedContextOptionsList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
