# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class IssueTypeSchemesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_issue_types_to_issue_type_scheme(self, body, issue_type_scheme_id, **kwargs):  # noqa: E501
        """Add issue types to issue type scheme  # noqa: E501

        Adds issue types to an issue type scheme.  The added issue types are appended to the issue types list.  If any of the issue types exist in the issue type scheme, the operation fails and no issue types are added.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_issue_types_to_issue_type_scheme(body, issue_type_scheme_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IssueTypeIds body: (required)
        :param int issue_type_scheme_id: The ID of the issue type scheme. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_issue_types_to_issue_type_scheme_with_http_info(body, issue_type_scheme_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_issue_types_to_issue_type_scheme_with_http_info(body, issue_type_scheme_id, **kwargs)  # noqa: E501
            return data

    def add_issue_types_to_issue_type_scheme_with_http_info(self, body, issue_type_scheme_id, **kwargs):  # noqa: E501
        """Add issue types to issue type scheme  # noqa: E501

        Adds issue types to an issue type scheme.  The added issue types are appended to the issue types list.  If any of the issue types exist in the issue type scheme, the operation fails and no issue types are added.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_issue_types_to_issue_type_scheme_with_http_info(body, issue_type_scheme_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IssueTypeIds body: (required)
        :param int issue_type_scheme_id: The ID of the issue type scheme. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'issue_type_scheme_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_issue_types_to_issue_type_scheme" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_issue_types_to_issue_type_scheme`")  # noqa: E501
        # verify the required parameter 'issue_type_scheme_id' is set
        if ('issue_type_scheme_id' not in params or
                params['issue_type_scheme_id'] is None):
            raise ValueError("Missing the required parameter `issue_type_scheme_id` when calling `add_issue_types_to_issue_type_scheme`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'issue_type_scheme_id' in params:
            path_params['issueTypeSchemeId'] = params['issue_type_scheme_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rest/api/3/issuetypescheme/{issueTypeSchemeId}/issuetype', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assign_issue_type_scheme_to_project(self, body, **kwargs):  # noqa: E501
        """Assign issue type scheme to project  # noqa: E501

        Assigns an issue type scheme to a project.  If any issues in the project are assigned issue types not present in the new scheme, the operation will fail. To complete the assignment those issues must be updated to use issue types in the new scheme.  Issue type schemes can only be assigned to classic projects.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assign_issue_type_scheme_to_project(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IssueTypeSchemeProjectAssociation body: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assign_issue_type_scheme_to_project_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.assign_issue_type_scheme_to_project_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def assign_issue_type_scheme_to_project_with_http_info(self, body, **kwargs):  # noqa: E501
        """Assign issue type scheme to project  # noqa: E501

        Assigns an issue type scheme to a project.  If any issues in the project are assigned issue types not present in the new scheme, the operation will fail. To complete the assignment those issues must be updated to use issue types in the new scheme.  Issue type schemes can only be assigned to classic projects.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assign_issue_type_scheme_to_project_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IssueTypeSchemeProjectAssociation body: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assign_issue_type_scheme_to_project" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `assign_issue_type_scheme_to_project`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rest/api/3/issuetypescheme/project', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_issue_type_scheme(self, body, **kwargs):  # noqa: E501
        """Create issue type scheme  # noqa: E501

        Creates an issue type scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_issue_type_scheme(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IssueTypeSchemeDetails body: (required)
        :return: IssueTypeSchemeID
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_issue_type_scheme_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_issue_type_scheme_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_issue_type_scheme_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create issue type scheme  # noqa: E501

        Creates an issue type scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_issue_type_scheme_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IssueTypeSchemeDetails body: (required)
        :return: IssueTypeSchemeID
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_issue_type_scheme" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_issue_type_scheme`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rest/api/3/issuetypescheme', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IssueTypeSchemeID',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_issue_type_scheme(self, issue_type_scheme_id, **kwargs):  # noqa: E501
        """Delete issue type scheme  # noqa: E501

        Deletes an issue type scheme.  Only issue type schemes used in classic projects can be deleted.  Any projects assigned to the scheme are reassigned to the default issue type scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_issue_type_scheme(issue_type_scheme_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int issue_type_scheme_id: The ID of the issue type scheme. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_issue_type_scheme_with_http_info(issue_type_scheme_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_issue_type_scheme_with_http_info(issue_type_scheme_id, **kwargs)  # noqa: E501
            return data

    def delete_issue_type_scheme_with_http_info(self, issue_type_scheme_id, **kwargs):  # noqa: E501
        """Delete issue type scheme  # noqa: E501

        Deletes an issue type scheme.  Only issue type schemes used in classic projects can be deleted.  Any projects assigned to the scheme are reassigned to the default issue type scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_issue_type_scheme_with_http_info(issue_type_scheme_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int issue_type_scheme_id: The ID of the issue type scheme. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['issue_type_scheme_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_issue_type_scheme" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'issue_type_scheme_id' is set
        if ('issue_type_scheme_id' not in params or
                params['issue_type_scheme_id'] is None):
            raise ValueError("Missing the required parameter `issue_type_scheme_id` when calling `delete_issue_type_scheme`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'issue_type_scheme_id' in params:
            path_params['issueTypeSchemeId'] = params['issue_type_scheme_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rest/api/3/issuetypescheme/{issueTypeSchemeId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_issue_type_schemes(self, **kwargs):  # noqa: E501
        """Get all issue type schemes  # noqa: E501

        Returns a [paginated](#pagination) list of issue type schemes.  Only issue type schemes used in classic projects are returned.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_issue_type_schemes(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int start_at: The index of the first item to return in a page of results (page offset).
        :param int max_results: The maximum number of items to return per page.
        :param list[int] id: The list of issue type schemes IDs. To include multiple IDs, provide an ampersand-separated list. For example, `id=10000&id=10001`.
        :param str order_by: [Order](#ordering) the results by a field:   *  `name` Sorts by issue type scheme name.  *  `id` Sorts by issue type scheme ID.
        :param str expand: Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:   *  `projects` For each issue type schemes, returns information about the projects the issue type scheme is assigned to.  *  `issueTypes` For each issue type schemes, returns information about the issueTypes the issue type scheme have.
        :param str query_string: String used to perform a case-insensitive partial match with issue type scheme name.
        :return: PageBeanIssueTypeScheme
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_issue_type_schemes_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_all_issue_type_schemes_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_all_issue_type_schemes_with_http_info(self, **kwargs):  # noqa: E501
        """Get all issue type schemes  # noqa: E501

        Returns a [paginated](#pagination) list of issue type schemes.  Only issue type schemes used in classic projects are returned.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_issue_type_schemes_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int start_at: The index of the first item to return in a page of results (page offset).
        :param int max_results: The maximum number of items to return per page.
        :param list[int] id: The list of issue type schemes IDs. To include multiple IDs, provide an ampersand-separated list. For example, `id=10000&id=10001`.
        :param str order_by: [Order](#ordering) the results by a field:   *  `name` Sorts by issue type scheme name.  *  `id` Sorts by issue type scheme ID.
        :param str expand: Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:   *  `projects` For each issue type schemes, returns information about the projects the issue type scheme is assigned to.  *  `issueTypes` For each issue type schemes, returns information about the issueTypes the issue type scheme have.
        :param str query_string: String used to perform a case-insensitive partial match with issue type scheme name.
        :return: PageBeanIssueTypeScheme
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_at', 'max_results', 'id', 'order_by', 'expand', 'query_string']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_issue_type_schemes" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_at' in params:
            query_params.append(('startAt', params['start_at']))  # noqa: E501
        if 'max_results' in params:
            query_params.append(('maxResults', params['max_results']))  # noqa: E501
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
            collection_formats['id'] = 'multi'  # noqa: E501
        if 'order_by' in params:
            query_params.append(('orderBy', params['order_by']))  # noqa: E501
        if 'expand' in params:
            query_params.append(('expand', params['expand']))  # noqa: E501
        if 'query_string' in params:
            query_params.append(('queryString', params['query_string']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rest/api/3/issuetypescheme', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PageBeanIssueTypeScheme',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_issue_type_scheme_for_projects(self, project_id, **kwargs):  # noqa: E501
        """Get issue type schemes for projects  # noqa: E501

        Returns a [paginated](#pagination) list of issue type schemes and, for each issue type scheme, a list of the projects that use it.  Only issue type schemes used in classic projects are returned.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_issue_type_scheme_for_projects(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] project_id: The list of project IDs. To include multiple project IDs, provide an ampersand-separated list. For example, `projectId=10000&projectId=10001`. (required)
        :param int start_at: The index of the first item to return in a page of results (page offset).
        :param int max_results: The maximum number of items to return per page.
        :return: PageBeanIssueTypeSchemeProjects
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_issue_type_scheme_for_projects_with_http_info(project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_issue_type_scheme_for_projects_with_http_info(project_id, **kwargs)  # noqa: E501
            return data

    def get_issue_type_scheme_for_projects_with_http_info(self, project_id, **kwargs):  # noqa: E501
        """Get issue type schemes for projects  # noqa: E501

        Returns a [paginated](#pagination) list of issue type schemes and, for each issue type scheme, a list of the projects that use it.  Only issue type schemes used in classic projects are returned.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_issue_type_scheme_for_projects_with_http_info(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] project_id: The list of project IDs. To include multiple project IDs, provide an ampersand-separated list. For example, `projectId=10000&projectId=10001`. (required)
        :param int start_at: The index of the first item to return in a page of results (page offset).
        :param int max_results: The maximum number of items to return per page.
        :return: PageBeanIssueTypeSchemeProjects
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'start_at', 'max_results']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_issue_type_scheme_for_projects" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `get_issue_type_scheme_for_projects`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_at' in params:
            query_params.append(('startAt', params['start_at']))  # noqa: E501
        if 'max_results' in params:
            query_params.append(('maxResults', params['max_results']))  # noqa: E501
        if 'project_id' in params:
            query_params.append(('projectId', params['project_id']))  # noqa: E501
            collection_formats['projectId'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rest/api/3/issuetypescheme/project', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PageBeanIssueTypeSchemeProjects',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_issue_type_schemes_mapping(self, **kwargs):  # noqa: E501
        """Get issue type scheme items  # noqa: E501

        Returns a [paginated](#pagination) list of issue type scheme items.  Only issue type scheme items used in classic projects are returned.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_issue_type_schemes_mapping(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int start_at: The index of the first item to return in a page of results (page offset).
        :param int max_results: The maximum number of items to return per page.
        :param list[int] issue_type_scheme_id: The list of issue type scheme IDs. To include multiple IDs, provide an ampersand-separated list. For example, `issueTypeSchemeId=10000&issueTypeSchemeId=10001`.
        :return: PageBeanIssueTypeSchemeMapping
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_issue_type_schemes_mapping_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_issue_type_schemes_mapping_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_issue_type_schemes_mapping_with_http_info(self, **kwargs):  # noqa: E501
        """Get issue type scheme items  # noqa: E501

        Returns a [paginated](#pagination) list of issue type scheme items.  Only issue type scheme items used in classic projects are returned.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_issue_type_schemes_mapping_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int start_at: The index of the first item to return in a page of results (page offset).
        :param int max_results: The maximum number of items to return per page.
        :param list[int] issue_type_scheme_id: The list of issue type scheme IDs. To include multiple IDs, provide an ampersand-separated list. For example, `issueTypeSchemeId=10000&issueTypeSchemeId=10001`.
        :return: PageBeanIssueTypeSchemeMapping
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_at', 'max_results', 'issue_type_scheme_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_issue_type_schemes_mapping" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_at' in params:
            query_params.append(('startAt', params['start_at']))  # noqa: E501
        if 'max_results' in params:
            query_params.append(('maxResults', params['max_results']))  # noqa: E501
        if 'issue_type_scheme_id' in params:
            query_params.append(('issueTypeSchemeId', params['issue_type_scheme_id']))  # noqa: E501
            collection_formats['issueTypeSchemeId'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rest/api/3/issuetypescheme/mapping', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PageBeanIssueTypeSchemeMapping',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_issue_type_from_issue_type_scheme(self, issue_type_scheme_id, issue_type_id, **kwargs):  # noqa: E501
        """Remove issue type from issue type scheme  # noqa: E501

        Removes an issue type from an issue type scheme.  This operation cannot remove:   *  any issue type used by issues.  *  any issue types from the default issue type scheme.  *  the last standard issue type from an issue type scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_issue_type_from_issue_type_scheme(issue_type_scheme_id, issue_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int issue_type_scheme_id: The ID of the issue type scheme. (required)
        :param int issue_type_id: The ID of the issue type. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.remove_issue_type_from_issue_type_scheme_with_http_info(issue_type_scheme_id, issue_type_id, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_issue_type_from_issue_type_scheme_with_http_info(issue_type_scheme_id, issue_type_id, **kwargs)  # noqa: E501
            return data

    def remove_issue_type_from_issue_type_scheme_with_http_info(self, issue_type_scheme_id, issue_type_id, **kwargs):  # noqa: E501
        """Remove issue type from issue type scheme  # noqa: E501

        Removes an issue type from an issue type scheme.  This operation cannot remove:   *  any issue type used by issues.  *  any issue types from the default issue type scheme.  *  the last standard issue type from an issue type scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_issue_type_from_issue_type_scheme_with_http_info(issue_type_scheme_id, issue_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int issue_type_scheme_id: The ID of the issue type scheme. (required)
        :param int issue_type_id: The ID of the issue type. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['issue_type_scheme_id', 'issue_type_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_issue_type_from_issue_type_scheme" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'issue_type_scheme_id' is set
        if ('issue_type_scheme_id' not in params or
                params['issue_type_scheme_id'] is None):
            raise ValueError("Missing the required parameter `issue_type_scheme_id` when calling `remove_issue_type_from_issue_type_scheme`")  # noqa: E501
        # verify the required parameter 'issue_type_id' is set
        if ('issue_type_id' not in params or
                params['issue_type_id'] is None):
            raise ValueError("Missing the required parameter `issue_type_id` when calling `remove_issue_type_from_issue_type_scheme`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'issue_type_scheme_id' in params:
            path_params['issueTypeSchemeId'] = params['issue_type_scheme_id']  # noqa: E501
        if 'issue_type_id' in params:
            path_params['issueTypeId'] = params['issue_type_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rest/api/3/issuetypescheme/{issueTypeSchemeId}/issuetype/{issueTypeId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reorder_issue_types_in_issue_type_scheme(self, body, issue_type_scheme_id, **kwargs):  # noqa: E501
        """Change order of issue types  # noqa: E501

        Changes the order of issue types in an issue type scheme.  The request body parameters must meet the following requirements:   *  all of the issue types must belong to the issue type scheme.  *  either `after` or `position` must be provided.  *  the issue type in `after` must not be in the issue type list.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reorder_issue_types_in_issue_type_scheme(body, issue_type_scheme_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OrderOfIssueTypes body: (required)
        :param int issue_type_scheme_id: The ID of the issue type scheme. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.reorder_issue_types_in_issue_type_scheme_with_http_info(body, issue_type_scheme_id, **kwargs)  # noqa: E501
        else:
            (data) = self.reorder_issue_types_in_issue_type_scheme_with_http_info(body, issue_type_scheme_id, **kwargs)  # noqa: E501
            return data

    def reorder_issue_types_in_issue_type_scheme_with_http_info(self, body, issue_type_scheme_id, **kwargs):  # noqa: E501
        """Change order of issue types  # noqa: E501

        Changes the order of issue types in an issue type scheme.  The request body parameters must meet the following requirements:   *  all of the issue types must belong to the issue type scheme.  *  either `after` or `position` must be provided.  *  the issue type in `after` must not be in the issue type list.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reorder_issue_types_in_issue_type_scheme_with_http_info(body, issue_type_scheme_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OrderOfIssueTypes body: (required)
        :param int issue_type_scheme_id: The ID of the issue type scheme. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'issue_type_scheme_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reorder_issue_types_in_issue_type_scheme" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `reorder_issue_types_in_issue_type_scheme`")  # noqa: E501
        # verify the required parameter 'issue_type_scheme_id' is set
        if ('issue_type_scheme_id' not in params or
                params['issue_type_scheme_id'] is None):
            raise ValueError("Missing the required parameter `issue_type_scheme_id` when calling `reorder_issue_types_in_issue_type_scheme`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'issue_type_scheme_id' in params:
            path_params['issueTypeSchemeId'] = params['issue_type_scheme_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rest/api/3/issuetypescheme/{issueTypeSchemeId}/issuetype/move', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_issue_type_scheme(self, body, issue_type_scheme_id, **kwargs):  # noqa: E501
        """Update issue type scheme  # noqa: E501

        Updates an issue type scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_issue_type_scheme(body, issue_type_scheme_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IssueTypeSchemeUpdateDetails body: (required)
        :param int issue_type_scheme_id: The ID of the issue type scheme. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_issue_type_scheme_with_http_info(body, issue_type_scheme_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_issue_type_scheme_with_http_info(body, issue_type_scheme_id, **kwargs)  # noqa: E501
            return data

    def update_issue_type_scheme_with_http_info(self, body, issue_type_scheme_id, **kwargs):  # noqa: E501
        """Update issue type scheme  # noqa: E501

        Updates an issue type scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_issue_type_scheme_with_http_info(body, issue_type_scheme_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IssueTypeSchemeUpdateDetails body: (required)
        :param int issue_type_scheme_id: The ID of the issue type scheme. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'issue_type_scheme_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_issue_type_scheme" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_issue_type_scheme`")  # noqa: E501
        # verify the required parameter 'issue_type_scheme_id' is set
        if ('issue_type_scheme_id' not in params or
                params['issue_type_scheme_id'] is None):
            raise ValueError("Missing the required parameter `issue_type_scheme_id` when calling `update_issue_type_scheme`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'issue_type_scheme_id' in params:
            path_params['issueTypeSchemeId'] = params['issue_type_scheme_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rest/api/3/issuetypescheme/{issueTypeSchemeId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
