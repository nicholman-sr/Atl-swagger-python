# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ServiceRegistryApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def service_registry_resource_services_get(self, service_ids, **kwargs):  # noqa: E501
        """Retrieve the attributes of service registries  # noqa: E501

        Retrieve the attributes of given service registries.  **[Permissions](#permissions) required:** Only Connect apps can make this request and the servicesIds belong to the tenant you are requesting  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_registry_resource_services_get(service_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] service_ids: The ID of the services (the strings starting with \"b:\" need to be decoded in Base64). (required)
        :return: list[ServiceRegistry]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.service_registry_resource_services_get_with_http_info(service_ids, **kwargs)  # noqa: E501
        else:
            (data) = self.service_registry_resource_services_get_with_http_info(service_ids, **kwargs)  # noqa: E501
            return data

    def service_registry_resource_services_get_with_http_info(self, service_ids, **kwargs):  # noqa: E501
        """Retrieve the attributes of service registries  # noqa: E501

        Retrieve the attributes of given service registries.  **[Permissions](#permissions) required:** Only Connect apps can make this request and the servicesIds belong to the tenant you are requesting  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_registry_resource_services_get_with_http_info(service_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] service_ids: The ID of the services (the strings starting with \"b:\" need to be decoded in Base64). (required)
        :return: list[ServiceRegistry]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method service_registry_resource_services_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_ids' is set
        if ('service_ids' not in params or
                params['service_ids'] is None):
            raise ValueError("Missing the required parameter `service_ids` when calling `service_registry_resource_services_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'service_ids' in params:
            query_params.append(('serviceIds', params['service_ids']))  # noqa: E501
            collection_formats['serviceIds'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/atlassian-connect/1/service-registry', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ServiceRegistry]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
