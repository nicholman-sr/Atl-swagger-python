# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AnnouncementBannerConfigurationUpdate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'is_dismissible': 'bool',
        'is_enabled': 'bool',
        'message': 'str',
        'visibility': 'str'
    }

    attribute_map = {
        'is_dismissible': 'isDismissible',
        'is_enabled': 'isEnabled',
        'message': 'message',
        'visibility': 'visibility'
    }

    def __init__(self, is_dismissible=None, is_enabled=None, message=None, visibility=None):  # noqa: E501
        """AnnouncementBannerConfigurationUpdate - a model defined in Swagger"""  # noqa: E501
        self._is_dismissible = None
        self._is_enabled = None
        self._message = None
        self._visibility = None
        self.discriminator = None
        if is_dismissible is not None:
            self.is_dismissible = is_dismissible
        if is_enabled is not None:
            self.is_enabled = is_enabled
        if message is not None:
            self.message = message
        if visibility is not None:
            self.visibility = visibility

    @property
    def is_dismissible(self):
        """Gets the is_dismissible of this AnnouncementBannerConfigurationUpdate.  # noqa: E501

        Flag indicating if the announcement banner can be dismissed by the user.  # noqa: E501

        :return: The is_dismissible of this AnnouncementBannerConfigurationUpdate.  # noqa: E501
        :rtype: bool
        """
        return self._is_dismissible

    @is_dismissible.setter
    def is_dismissible(self, is_dismissible):
        """Sets the is_dismissible of this AnnouncementBannerConfigurationUpdate.

        Flag indicating if the announcement banner can be dismissed by the user.  # noqa: E501

        :param is_dismissible: The is_dismissible of this AnnouncementBannerConfigurationUpdate.  # noqa: E501
        :type: bool
        """

        self._is_dismissible = is_dismissible

    @property
    def is_enabled(self):
        """Gets the is_enabled of this AnnouncementBannerConfigurationUpdate.  # noqa: E501

        Flag indicating if the announcement banner is enabled or not.  # noqa: E501

        :return: The is_enabled of this AnnouncementBannerConfigurationUpdate.  # noqa: E501
        :rtype: bool
        """
        return self._is_enabled

    @is_enabled.setter
    def is_enabled(self, is_enabled):
        """Sets the is_enabled of this AnnouncementBannerConfigurationUpdate.

        Flag indicating if the announcement banner is enabled or not.  # noqa: E501

        :param is_enabled: The is_enabled of this AnnouncementBannerConfigurationUpdate.  # noqa: E501
        :type: bool
        """

        self._is_enabled = is_enabled

    @property
    def message(self):
        """Gets the message of this AnnouncementBannerConfigurationUpdate.  # noqa: E501

        The text on the announcement banner.  # noqa: E501

        :return: The message of this AnnouncementBannerConfigurationUpdate.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this AnnouncementBannerConfigurationUpdate.

        The text on the announcement banner.  # noqa: E501

        :param message: The message of this AnnouncementBannerConfigurationUpdate.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def visibility(self):
        """Gets the visibility of this AnnouncementBannerConfigurationUpdate.  # noqa: E501

        Visibility of the announcement banner. Can be public or private.  # noqa: E501

        :return: The visibility of this AnnouncementBannerConfigurationUpdate.  # noqa: E501
        :rtype: str
        """
        return self._visibility

    @visibility.setter
    def visibility(self, visibility):
        """Sets the visibility of this AnnouncementBannerConfigurationUpdate.

        Visibility of the announcement banner. Can be public or private.  # noqa: E501

        :param visibility: The visibility of this AnnouncementBannerConfigurationUpdate.  # noqa: E501
        :type: str
        """

        self._visibility = visibility

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AnnouncementBannerConfigurationUpdate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AnnouncementBannerConfigurationUpdate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
