# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AssociateSecuritySchemeWithProjectDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'old_to_new_security_level_mappings': 'list[OldToNewSecurityLevelMappingsBean]',
        'project_id': 'str',
        'scheme_id': 'str'
    }

    attribute_map = {
        'old_to_new_security_level_mappings': 'oldToNewSecurityLevelMappings',
        'project_id': 'projectId',
        'scheme_id': 'schemeId'
    }

    def __init__(self, old_to_new_security_level_mappings=None, project_id=None, scheme_id=None):  # noqa: E501
        """AssociateSecuritySchemeWithProjectDetails - a model defined in Swagger"""  # noqa: E501
        self._old_to_new_security_level_mappings = None
        self._project_id = None
        self._scheme_id = None
        self.discriminator = None
        if old_to_new_security_level_mappings is not None:
            self.old_to_new_security_level_mappings = old_to_new_security_level_mappings
        self.project_id = project_id
        self.scheme_id = scheme_id

    @property
    def old_to_new_security_level_mappings(self):
        """Gets the old_to_new_security_level_mappings of this AssociateSecuritySchemeWithProjectDetails.  # noqa: E501

        The list of scheme levels which should be remapped to new levels of the issue security scheme.  # noqa: E501

        :return: The old_to_new_security_level_mappings of this AssociateSecuritySchemeWithProjectDetails.  # noqa: E501
        :rtype: list[OldToNewSecurityLevelMappingsBean]
        """
        return self._old_to_new_security_level_mappings

    @old_to_new_security_level_mappings.setter
    def old_to_new_security_level_mappings(self, old_to_new_security_level_mappings):
        """Sets the old_to_new_security_level_mappings of this AssociateSecuritySchemeWithProjectDetails.

        The list of scheme levels which should be remapped to new levels of the issue security scheme.  # noqa: E501

        :param old_to_new_security_level_mappings: The old_to_new_security_level_mappings of this AssociateSecuritySchemeWithProjectDetails.  # noqa: E501
        :type: list[OldToNewSecurityLevelMappingsBean]
        """

        self._old_to_new_security_level_mappings = old_to_new_security_level_mappings

    @property
    def project_id(self):
        """Gets the project_id of this AssociateSecuritySchemeWithProjectDetails.  # noqa: E501

        The ID of the project.  # noqa: E501

        :return: The project_id of this AssociateSecuritySchemeWithProjectDetails.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this AssociateSecuritySchemeWithProjectDetails.

        The ID of the project.  # noqa: E501

        :param project_id: The project_id of this AssociateSecuritySchemeWithProjectDetails.  # noqa: E501
        :type: str
        """
        if project_id is None:
            raise ValueError("Invalid value for `project_id`, must not be `None`")  # noqa: E501

        self._project_id = project_id

    @property
    def scheme_id(self):
        """Gets the scheme_id of this AssociateSecuritySchemeWithProjectDetails.  # noqa: E501

        The ID of the issue security scheme. Providing null will clear the association with the issue security scheme.  # noqa: E501

        :return: The scheme_id of this AssociateSecuritySchemeWithProjectDetails.  # noqa: E501
        :rtype: str
        """
        return self._scheme_id

    @scheme_id.setter
    def scheme_id(self, scheme_id):
        """Sets the scheme_id of this AssociateSecuritySchemeWithProjectDetails.

        The ID of the issue security scheme. Providing null will clear the association with the issue security scheme.  # noqa: E501

        :param scheme_id: The scheme_id of this AssociateSecuritySchemeWithProjectDetails.  # noqa: E501
        :type: str
        """
        if scheme_id is None:
            raise ValueError("Invalid value for `scheme_id`, must not be `None`")  # noqa: E501

        self._scheme_id = scheme_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AssociateSecuritySchemeWithProjectDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AssociateSecuritySchemeWithProjectDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
