# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AvailableWorkflowConnectRule(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'addon_key': 'str',
        'create_url': 'str',
        'description': 'str',
        'edit_url': 'str',
        'module_key': 'str',
        'name': 'str',
        'rule_key': 'str',
        'rule_type': 'str',
        'view_url': 'str'
    }

    attribute_map = {
        'addon_key': 'addonKey',
        'create_url': 'createUrl',
        'description': 'description',
        'edit_url': 'editUrl',
        'module_key': 'moduleKey',
        'name': 'name',
        'rule_key': 'ruleKey',
        'rule_type': 'ruleType',
        'view_url': 'viewUrl'
    }

    def __init__(self, addon_key=None, create_url=None, description=None, edit_url=None, module_key=None, name=None, rule_key=None, rule_type=None, view_url=None):  # noqa: E501
        """AvailableWorkflowConnectRule - a model defined in Swagger"""  # noqa: E501
        self._addon_key = None
        self._create_url = None
        self._description = None
        self._edit_url = None
        self._module_key = None
        self._name = None
        self._rule_key = None
        self._rule_type = None
        self._view_url = None
        self.discriminator = None
        if addon_key is not None:
            self.addon_key = addon_key
        if create_url is not None:
            self.create_url = create_url
        if description is not None:
            self.description = description
        if edit_url is not None:
            self.edit_url = edit_url
        if module_key is not None:
            self.module_key = module_key
        if name is not None:
            self.name = name
        if rule_key is not None:
            self.rule_key = rule_key
        if rule_type is not None:
            self.rule_type = rule_type
        if view_url is not None:
            self.view_url = view_url

    @property
    def addon_key(self):
        """Gets the addon_key of this AvailableWorkflowConnectRule.  # noqa: E501

        The add-on providing the rule.  # noqa: E501

        :return: The addon_key of this AvailableWorkflowConnectRule.  # noqa: E501
        :rtype: str
        """
        return self._addon_key

    @addon_key.setter
    def addon_key(self, addon_key):
        """Sets the addon_key of this AvailableWorkflowConnectRule.

        The add-on providing the rule.  # noqa: E501

        :param addon_key: The addon_key of this AvailableWorkflowConnectRule.  # noqa: E501
        :type: str
        """

        self._addon_key = addon_key

    @property
    def create_url(self):
        """Gets the create_url of this AvailableWorkflowConnectRule.  # noqa: E501

        The URL creation path segment defined in the Connect module.  # noqa: E501

        :return: The create_url of this AvailableWorkflowConnectRule.  # noqa: E501
        :rtype: str
        """
        return self._create_url

    @create_url.setter
    def create_url(self, create_url):
        """Sets the create_url of this AvailableWorkflowConnectRule.

        The URL creation path segment defined in the Connect module.  # noqa: E501

        :param create_url: The create_url of this AvailableWorkflowConnectRule.  # noqa: E501
        :type: str
        """

        self._create_url = create_url

    @property
    def description(self):
        """Gets the description of this AvailableWorkflowConnectRule.  # noqa: E501

        The rule description.  # noqa: E501

        :return: The description of this AvailableWorkflowConnectRule.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AvailableWorkflowConnectRule.

        The rule description.  # noqa: E501

        :param description: The description of this AvailableWorkflowConnectRule.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def edit_url(self):
        """Gets the edit_url of this AvailableWorkflowConnectRule.  # noqa: E501

        The URL edit path segment defined in the Connect module.  # noqa: E501

        :return: The edit_url of this AvailableWorkflowConnectRule.  # noqa: E501
        :rtype: str
        """
        return self._edit_url

    @edit_url.setter
    def edit_url(self, edit_url):
        """Sets the edit_url of this AvailableWorkflowConnectRule.

        The URL edit path segment defined in the Connect module.  # noqa: E501

        :param edit_url: The edit_url of this AvailableWorkflowConnectRule.  # noqa: E501
        :type: str
        """

        self._edit_url = edit_url

    @property
    def module_key(self):
        """Gets the module_key of this AvailableWorkflowConnectRule.  # noqa: E501

        The module providing the rule.  # noqa: E501

        :return: The module_key of this AvailableWorkflowConnectRule.  # noqa: E501
        :rtype: str
        """
        return self._module_key

    @module_key.setter
    def module_key(self, module_key):
        """Sets the module_key of this AvailableWorkflowConnectRule.

        The module providing the rule.  # noqa: E501

        :param module_key: The module_key of this AvailableWorkflowConnectRule.  # noqa: E501
        :type: str
        """

        self._module_key = module_key

    @property
    def name(self):
        """Gets the name of this AvailableWorkflowConnectRule.  # noqa: E501

        The rule name.  # noqa: E501

        :return: The name of this AvailableWorkflowConnectRule.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AvailableWorkflowConnectRule.

        The rule name.  # noqa: E501

        :param name: The name of this AvailableWorkflowConnectRule.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def rule_key(self):
        """Gets the rule_key of this AvailableWorkflowConnectRule.  # noqa: E501

        The rule key.  # noqa: E501

        :return: The rule_key of this AvailableWorkflowConnectRule.  # noqa: E501
        :rtype: str
        """
        return self._rule_key

    @rule_key.setter
    def rule_key(self, rule_key):
        """Sets the rule_key of this AvailableWorkflowConnectRule.

        The rule key.  # noqa: E501

        :param rule_key: The rule_key of this AvailableWorkflowConnectRule.  # noqa: E501
        :type: str
        """

        self._rule_key = rule_key

    @property
    def rule_type(self):
        """Gets the rule_type of this AvailableWorkflowConnectRule.  # noqa: E501

        The rule type.  # noqa: E501

        :return: The rule_type of this AvailableWorkflowConnectRule.  # noqa: E501
        :rtype: str
        """
        return self._rule_type

    @rule_type.setter
    def rule_type(self, rule_type):
        """Sets the rule_type of this AvailableWorkflowConnectRule.

        The rule type.  # noqa: E501

        :param rule_type: The rule_type of this AvailableWorkflowConnectRule.  # noqa: E501
        :type: str
        """
        allowed_values = ["Condition", "Validator", "Function", "Screen"]  # noqa: E501
        if rule_type not in allowed_values:
            raise ValueError(
                "Invalid value for `rule_type` ({0}), must be one of {1}"  # noqa: E501
                .format(rule_type, allowed_values)
            )

        self._rule_type = rule_type

    @property
    def view_url(self):
        """Gets the view_url of this AvailableWorkflowConnectRule.  # noqa: E501

        The URL view path segment defined in the Connect module.  # noqa: E501

        :return: The view_url of this AvailableWorkflowConnectRule.  # noqa: E501
        :rtype: str
        """
        return self._view_url

    @view_url.setter
    def view_url(self, view_url):
        """Sets the view_url of this AvailableWorkflowConnectRule.

        The URL view path segment defined in the Connect module.  # noqa: E501

        :param view_url: The view_url of this AvailableWorkflowConnectRule.  # noqa: E501
        :type: str
        """

        self._view_url = view_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AvailableWorkflowConnectRule, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AvailableWorkflowConnectRule):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
