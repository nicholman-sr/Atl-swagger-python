# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BulkEditShareableEntityRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'action': 'str',
        'change_owner_details': 'AllOfBulkEditShareableEntityRequestChangeOwnerDetails',
        'entity_ids': 'list[int]',
        'extend_admin_permissions': 'bool',
        'permission_details': 'AllOfBulkEditShareableEntityRequestPermissionDetails'
    }

    attribute_map = {
        'action': 'action',
        'change_owner_details': 'changeOwnerDetails',
        'entity_ids': 'entityIds',
        'extend_admin_permissions': 'extendAdminPermissions',
        'permission_details': 'permissionDetails'
    }

    def __init__(self, action=None, change_owner_details=None, entity_ids=None, extend_admin_permissions=None, permission_details=None):  # noqa: E501
        """BulkEditShareableEntityRequest - a model defined in Swagger"""  # noqa: E501
        self._action = None
        self._change_owner_details = None
        self._entity_ids = None
        self._extend_admin_permissions = None
        self._permission_details = None
        self.discriminator = None
        self.action = action
        if change_owner_details is not None:
            self.change_owner_details = change_owner_details
        self.entity_ids = entity_ids
        if extend_admin_permissions is not None:
            self.extend_admin_permissions = extend_admin_permissions
        if permission_details is not None:
            self.permission_details = permission_details

    @property
    def action(self):
        """Gets the action of this BulkEditShareableEntityRequest.  # noqa: E501

        Allowed action for bulk edit shareable entity  # noqa: E501

        :return: The action of this BulkEditShareableEntityRequest.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this BulkEditShareableEntityRequest.

        Allowed action for bulk edit shareable entity  # noqa: E501

        :param action: The action of this BulkEditShareableEntityRequest.  # noqa: E501
        :type: str
        """
        if action is None:
            raise ValueError("Invalid value for `action`, must not be `None`")  # noqa: E501
        allowed_values = ["changeOwner", "changePermission", "addPermission", "removePermission"]  # noqa: E501
        if action not in allowed_values:
            raise ValueError(
                "Invalid value for `action` ({0}), must be one of {1}"  # noqa: E501
                .format(action, allowed_values)
            )

        self._action = action

    @property
    def change_owner_details(self):
        """Gets the change_owner_details of this BulkEditShareableEntityRequest.  # noqa: E501

        The details of change owner action.  # noqa: E501

        :return: The change_owner_details of this BulkEditShareableEntityRequest.  # noqa: E501
        :rtype: AllOfBulkEditShareableEntityRequestChangeOwnerDetails
        """
        return self._change_owner_details

    @change_owner_details.setter
    def change_owner_details(self, change_owner_details):
        """Sets the change_owner_details of this BulkEditShareableEntityRequest.

        The details of change owner action.  # noqa: E501

        :param change_owner_details: The change_owner_details of this BulkEditShareableEntityRequest.  # noqa: E501
        :type: AllOfBulkEditShareableEntityRequestChangeOwnerDetails
        """

        self._change_owner_details = change_owner_details

    @property
    def entity_ids(self):
        """Gets the entity_ids of this BulkEditShareableEntityRequest.  # noqa: E501

        The id list of shareable entities to be changed.  # noqa: E501

        :return: The entity_ids of this BulkEditShareableEntityRequest.  # noqa: E501
        :rtype: list[int]
        """
        return self._entity_ids

    @entity_ids.setter
    def entity_ids(self, entity_ids):
        """Sets the entity_ids of this BulkEditShareableEntityRequest.

        The id list of shareable entities to be changed.  # noqa: E501

        :param entity_ids: The entity_ids of this BulkEditShareableEntityRequest.  # noqa: E501
        :type: list[int]
        """
        if entity_ids is None:
            raise ValueError("Invalid value for `entity_ids`, must not be `None`")  # noqa: E501

        self._entity_ids = entity_ids

    @property
    def extend_admin_permissions(self):
        """Gets the extend_admin_permissions of this BulkEditShareableEntityRequest.  # noqa: E501

        Whether the actions are executed by users with Administer Jira global permission.  # noqa: E501

        :return: The extend_admin_permissions of this BulkEditShareableEntityRequest.  # noqa: E501
        :rtype: bool
        """
        return self._extend_admin_permissions

    @extend_admin_permissions.setter
    def extend_admin_permissions(self, extend_admin_permissions):
        """Sets the extend_admin_permissions of this BulkEditShareableEntityRequest.

        Whether the actions are executed by users with Administer Jira global permission.  # noqa: E501

        :param extend_admin_permissions: The extend_admin_permissions of this BulkEditShareableEntityRequest.  # noqa: E501
        :type: bool
        """

        self._extend_admin_permissions = extend_admin_permissions

    @property
    def permission_details(self):
        """Gets the permission_details of this BulkEditShareableEntityRequest.  # noqa: E501

        The permission details to be changed.  # noqa: E501

        :return: The permission_details of this BulkEditShareableEntityRequest.  # noqa: E501
        :rtype: AllOfBulkEditShareableEntityRequestPermissionDetails
        """
        return self._permission_details

    @permission_details.setter
    def permission_details(self, permission_details):
        """Sets the permission_details of this BulkEditShareableEntityRequest.

        The permission details to be changed.  # noqa: E501

        :param permission_details: The permission_details of this BulkEditShareableEntityRequest.  # noqa: E501
        :type: AllOfBulkEditShareableEntityRequestPermissionDetails
        """

        self._permission_details = permission_details

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BulkEditShareableEntityRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BulkEditShareableEntityRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
