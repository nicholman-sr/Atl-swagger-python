# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BulkOperationProgress(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created': 'datetime',
        'failed_accessible_issues': 'dict(str, list[str])',
        'invalid_or_inaccessible_issue_count': 'int',
        'processed_accessible_issues': 'list[int]',
        'progress_percent': 'int',
        'started': 'datetime',
        'status': 'str',
        'submitted_by': 'User',
        'task_id': 'str',
        'total_issue_count': 'int',
        'updated': 'datetime'
    }

    attribute_map = {
        'created': 'created',
        'failed_accessible_issues': 'failedAccessibleIssues',
        'invalid_or_inaccessible_issue_count': 'invalidOrInaccessibleIssueCount',
        'processed_accessible_issues': 'processedAccessibleIssues',
        'progress_percent': 'progressPercent',
        'started': 'started',
        'status': 'status',
        'submitted_by': 'submittedBy',
        'task_id': 'taskId',
        'total_issue_count': 'totalIssueCount',
        'updated': 'updated'
    }

    def __init__(self, created=None, failed_accessible_issues=None, invalid_or_inaccessible_issue_count=None, processed_accessible_issues=None, progress_percent=None, started=None, status=None, submitted_by=None, task_id=None, total_issue_count=None, updated=None):  # noqa: E501
        """BulkOperationProgress - a model defined in Swagger"""  # noqa: E501
        self._created = None
        self._failed_accessible_issues = None
        self._invalid_or_inaccessible_issue_count = None
        self._processed_accessible_issues = None
        self._progress_percent = None
        self._started = None
        self._status = None
        self._submitted_by = None
        self._task_id = None
        self._total_issue_count = None
        self._updated = None
        self.discriminator = None
        if created is not None:
            self.created = created
        if failed_accessible_issues is not None:
            self.failed_accessible_issues = failed_accessible_issues
        if invalid_or_inaccessible_issue_count is not None:
            self.invalid_or_inaccessible_issue_count = invalid_or_inaccessible_issue_count
        if processed_accessible_issues is not None:
            self.processed_accessible_issues = processed_accessible_issues
        if progress_percent is not None:
            self.progress_percent = progress_percent
        if started is not None:
            self.started = started
        if status is not None:
            self.status = status
        if submitted_by is not None:
            self.submitted_by = submitted_by
        if task_id is not None:
            self.task_id = task_id
        if total_issue_count is not None:
            self.total_issue_count = total_issue_count
        if updated is not None:
            self.updated = updated

    @property
    def created(self):
        """Gets the created of this BulkOperationProgress.  # noqa: E501

        A timestamp of when the task was submitted.  # noqa: E501

        :return: The created of this BulkOperationProgress.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this BulkOperationProgress.

        A timestamp of when the task was submitted.  # noqa: E501

        :param created: The created of this BulkOperationProgress.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def failed_accessible_issues(self):
        """Gets the failed_accessible_issues of this BulkOperationProgress.  # noqa: E501

        Map of issue IDs for which the operation failed and that the user has permission to view, to their one or more reasons for failure. These reasons are open-ended text descriptions of the error and are not selected from a predefined list of standard reasons.  # noqa: E501

        :return: The failed_accessible_issues of this BulkOperationProgress.  # noqa: E501
        :rtype: dict(str, list[str])
        """
        return self._failed_accessible_issues

    @failed_accessible_issues.setter
    def failed_accessible_issues(self, failed_accessible_issues):
        """Sets the failed_accessible_issues of this BulkOperationProgress.

        Map of issue IDs for which the operation failed and that the user has permission to view, to their one or more reasons for failure. These reasons are open-ended text descriptions of the error and are not selected from a predefined list of standard reasons.  # noqa: E501

        :param failed_accessible_issues: The failed_accessible_issues of this BulkOperationProgress.  # noqa: E501
        :type: dict(str, list[str])
        """

        self._failed_accessible_issues = failed_accessible_issues

    @property
    def invalid_or_inaccessible_issue_count(self):
        """Gets the invalid_or_inaccessible_issue_count of this BulkOperationProgress.  # noqa: E501

        The number of issues that are either invalid or issues that the user doesn't have permission to view, regardless of the success or failure of the operation.  # noqa: E501

        :return: The invalid_or_inaccessible_issue_count of this BulkOperationProgress.  # noqa: E501
        :rtype: int
        """
        return self._invalid_or_inaccessible_issue_count

    @invalid_or_inaccessible_issue_count.setter
    def invalid_or_inaccessible_issue_count(self, invalid_or_inaccessible_issue_count):
        """Sets the invalid_or_inaccessible_issue_count of this BulkOperationProgress.

        The number of issues that are either invalid or issues that the user doesn't have permission to view, regardless of the success or failure of the operation.  # noqa: E501

        :param invalid_or_inaccessible_issue_count: The invalid_or_inaccessible_issue_count of this BulkOperationProgress.  # noqa: E501
        :type: int
        """

        self._invalid_or_inaccessible_issue_count = invalid_or_inaccessible_issue_count

    @property
    def processed_accessible_issues(self):
        """Gets the processed_accessible_issues of this BulkOperationProgress.  # noqa: E501

        List of issue IDs for which the operation was successful and that the user has permission to view.  # noqa: E501

        :return: The processed_accessible_issues of this BulkOperationProgress.  # noqa: E501
        :rtype: list[int]
        """
        return self._processed_accessible_issues

    @processed_accessible_issues.setter
    def processed_accessible_issues(self, processed_accessible_issues):
        """Sets the processed_accessible_issues of this BulkOperationProgress.

        List of issue IDs for which the operation was successful and that the user has permission to view.  # noqa: E501

        :param processed_accessible_issues: The processed_accessible_issues of this BulkOperationProgress.  # noqa: E501
        :type: list[int]
        """

        self._processed_accessible_issues = processed_accessible_issues

    @property
    def progress_percent(self):
        """Gets the progress_percent of this BulkOperationProgress.  # noqa: E501

        Progress of the task as a percentage.  # noqa: E501

        :return: The progress_percent of this BulkOperationProgress.  # noqa: E501
        :rtype: int
        """
        return self._progress_percent

    @progress_percent.setter
    def progress_percent(self, progress_percent):
        """Sets the progress_percent of this BulkOperationProgress.

        Progress of the task as a percentage.  # noqa: E501

        :param progress_percent: The progress_percent of this BulkOperationProgress.  # noqa: E501
        :type: int
        """

        self._progress_percent = progress_percent

    @property
    def started(self):
        """Gets the started of this BulkOperationProgress.  # noqa: E501

        A timestamp of when the task was started.  # noqa: E501

        :return: The started of this BulkOperationProgress.  # noqa: E501
        :rtype: datetime
        """
        return self._started

    @started.setter
    def started(self, started):
        """Sets the started of this BulkOperationProgress.

        A timestamp of when the task was started.  # noqa: E501

        :param started: The started of this BulkOperationProgress.  # noqa: E501
        :type: datetime
        """

        self._started = started

    @property
    def status(self):
        """Gets the status of this BulkOperationProgress.  # noqa: E501

        The status of the task.  # noqa: E501

        :return: The status of this BulkOperationProgress.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this BulkOperationProgress.

        The status of the task.  # noqa: E501

        :param status: The status of this BulkOperationProgress.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENQUEUED", "RUNNING", "COMPLETE", "FAILED", "CANCEL_REQUESTED", "CANCELLED", "DEAD"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def submitted_by(self):
        """Gets the submitted_by of this BulkOperationProgress.  # noqa: E501


        :return: The submitted_by of this BulkOperationProgress.  # noqa: E501
        :rtype: User
        """
        return self._submitted_by

    @submitted_by.setter
    def submitted_by(self, submitted_by):
        """Sets the submitted_by of this BulkOperationProgress.


        :param submitted_by: The submitted_by of this BulkOperationProgress.  # noqa: E501
        :type: User
        """

        self._submitted_by = submitted_by

    @property
    def task_id(self):
        """Gets the task_id of this BulkOperationProgress.  # noqa: E501

        The ID of the task.  # noqa: E501

        :return: The task_id of this BulkOperationProgress.  # noqa: E501
        :rtype: str
        """
        return self._task_id

    @task_id.setter
    def task_id(self, task_id):
        """Sets the task_id of this BulkOperationProgress.

        The ID of the task.  # noqa: E501

        :param task_id: The task_id of this BulkOperationProgress.  # noqa: E501
        :type: str
        """

        self._task_id = task_id

    @property
    def total_issue_count(self):
        """Gets the total_issue_count of this BulkOperationProgress.  # noqa: E501

        The number of issues that the bulk operation was attempted on.  # noqa: E501

        :return: The total_issue_count of this BulkOperationProgress.  # noqa: E501
        :rtype: int
        """
        return self._total_issue_count

    @total_issue_count.setter
    def total_issue_count(self, total_issue_count):
        """Sets the total_issue_count of this BulkOperationProgress.

        The number of issues that the bulk operation was attempted on.  # noqa: E501

        :param total_issue_count: The total_issue_count of this BulkOperationProgress.  # noqa: E501
        :type: int
        """

        self._total_issue_count = total_issue_count

    @property
    def updated(self):
        """Gets the updated of this BulkOperationProgress.  # noqa: E501

        A timestamp of when the task progress was last updated.  # noqa: E501

        :return: The updated of this BulkOperationProgress.  # noqa: E501
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this BulkOperationProgress.

        A timestamp of when the task progress was last updated.  # noqa: E501

        :param updated: The updated of this BulkOperationProgress.  # noqa: E501
        :type: datetime
        """

        self._updated = updated

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BulkOperationProgress, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BulkOperationProgress):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
