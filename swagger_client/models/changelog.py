# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Changelog(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'author': 'AllOfChangelogAuthor',
        'created': 'datetime',
        'history_metadata': 'AllOfChangelogHistoryMetadata',
        'id': 'str',
        'items': 'list[ChangeDetails]'
    }

    attribute_map = {
        'author': 'author',
        'created': 'created',
        'history_metadata': 'historyMetadata',
        'id': 'id',
        'items': 'items'
    }

    def __init__(self, author=None, created=None, history_metadata=None, id=None, items=None):  # noqa: E501
        """Changelog - a model defined in Swagger"""  # noqa: E501
        self._author = None
        self._created = None
        self._history_metadata = None
        self._id = None
        self._items = None
        self.discriminator = None
        if author is not None:
            self.author = author
        if created is not None:
            self.created = created
        if history_metadata is not None:
            self.history_metadata = history_metadata
        if id is not None:
            self.id = id
        if items is not None:
            self.items = items

    @property
    def author(self):
        """Gets the author of this Changelog.  # noqa: E501

        The user who made the change.  # noqa: E501

        :return: The author of this Changelog.  # noqa: E501
        :rtype: AllOfChangelogAuthor
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this Changelog.

        The user who made the change.  # noqa: E501

        :param author: The author of this Changelog.  # noqa: E501
        :type: AllOfChangelogAuthor
        """

        self._author = author

    @property
    def created(self):
        """Gets the created of this Changelog.  # noqa: E501

        The date on which the change took place.  # noqa: E501

        :return: The created of this Changelog.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Changelog.

        The date on which the change took place.  # noqa: E501

        :param created: The created of this Changelog.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def history_metadata(self):
        """Gets the history_metadata of this Changelog.  # noqa: E501

        The history metadata associated with the changed.  # noqa: E501

        :return: The history_metadata of this Changelog.  # noqa: E501
        :rtype: AllOfChangelogHistoryMetadata
        """
        return self._history_metadata

    @history_metadata.setter
    def history_metadata(self, history_metadata):
        """Sets the history_metadata of this Changelog.

        The history metadata associated with the changed.  # noqa: E501

        :param history_metadata: The history_metadata of this Changelog.  # noqa: E501
        :type: AllOfChangelogHistoryMetadata
        """

        self._history_metadata = history_metadata

    @property
    def id(self):
        """Gets the id of this Changelog.  # noqa: E501

        The ID of the changelog.  # noqa: E501

        :return: The id of this Changelog.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Changelog.

        The ID of the changelog.  # noqa: E501

        :param id: The id of this Changelog.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def items(self):
        """Gets the items of this Changelog.  # noqa: E501

        The list of items changed.  # noqa: E501

        :return: The items of this Changelog.  # noqa: E501
        :rtype: list[ChangeDetails]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this Changelog.

        The list of items changed.  # noqa: E501

        :param items: The items of this Changelog.  # noqa: E501
        :type: list[ChangeDetails]
        """

        self._items = items

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Changelog, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Changelog):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
