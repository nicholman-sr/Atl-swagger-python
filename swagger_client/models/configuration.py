# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Configuration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'attachments_enabled': 'bool',
        'issue_linking_enabled': 'bool',
        'sub_tasks_enabled': 'bool',
        'time_tracking_configuration': 'AllOfConfigurationTimeTrackingConfiguration',
        'time_tracking_enabled': 'bool',
        'unassigned_issues_allowed': 'bool',
        'voting_enabled': 'bool',
        'watching_enabled': 'bool'
    }

    attribute_map = {
        'attachments_enabled': 'attachmentsEnabled',
        'issue_linking_enabled': 'issueLinkingEnabled',
        'sub_tasks_enabled': 'subTasksEnabled',
        'time_tracking_configuration': 'timeTrackingConfiguration',
        'time_tracking_enabled': 'timeTrackingEnabled',
        'unassigned_issues_allowed': 'unassignedIssuesAllowed',
        'voting_enabled': 'votingEnabled',
        'watching_enabled': 'watchingEnabled'
    }

    def __init__(self, attachments_enabled=None, issue_linking_enabled=None, sub_tasks_enabled=None, time_tracking_configuration=None, time_tracking_enabled=None, unassigned_issues_allowed=None, voting_enabled=None, watching_enabled=None):  # noqa: E501
        """Configuration - a model defined in Swagger"""  # noqa: E501
        self._attachments_enabled = None
        self._issue_linking_enabled = None
        self._sub_tasks_enabled = None
        self._time_tracking_configuration = None
        self._time_tracking_enabled = None
        self._unassigned_issues_allowed = None
        self._voting_enabled = None
        self._watching_enabled = None
        self.discriminator = None
        if attachments_enabled is not None:
            self.attachments_enabled = attachments_enabled
        if issue_linking_enabled is not None:
            self.issue_linking_enabled = issue_linking_enabled
        if sub_tasks_enabled is not None:
            self.sub_tasks_enabled = sub_tasks_enabled
        if time_tracking_configuration is not None:
            self.time_tracking_configuration = time_tracking_configuration
        if time_tracking_enabled is not None:
            self.time_tracking_enabled = time_tracking_enabled
        if unassigned_issues_allowed is not None:
            self.unassigned_issues_allowed = unassigned_issues_allowed
        if voting_enabled is not None:
            self.voting_enabled = voting_enabled
        if watching_enabled is not None:
            self.watching_enabled = watching_enabled

    @property
    def attachments_enabled(self):
        """Gets the attachments_enabled of this Configuration.  # noqa: E501

        Whether the ability to add attachments to issues is enabled.  # noqa: E501

        :return: The attachments_enabled of this Configuration.  # noqa: E501
        :rtype: bool
        """
        return self._attachments_enabled

    @attachments_enabled.setter
    def attachments_enabled(self, attachments_enabled):
        """Sets the attachments_enabled of this Configuration.

        Whether the ability to add attachments to issues is enabled.  # noqa: E501

        :param attachments_enabled: The attachments_enabled of this Configuration.  # noqa: E501
        :type: bool
        """

        self._attachments_enabled = attachments_enabled

    @property
    def issue_linking_enabled(self):
        """Gets the issue_linking_enabled of this Configuration.  # noqa: E501

        Whether the ability to link issues is enabled.  # noqa: E501

        :return: The issue_linking_enabled of this Configuration.  # noqa: E501
        :rtype: bool
        """
        return self._issue_linking_enabled

    @issue_linking_enabled.setter
    def issue_linking_enabled(self, issue_linking_enabled):
        """Sets the issue_linking_enabled of this Configuration.

        Whether the ability to link issues is enabled.  # noqa: E501

        :param issue_linking_enabled: The issue_linking_enabled of this Configuration.  # noqa: E501
        :type: bool
        """

        self._issue_linking_enabled = issue_linking_enabled

    @property
    def sub_tasks_enabled(self):
        """Gets the sub_tasks_enabled of this Configuration.  # noqa: E501

        Whether the ability to create subtasks for issues is enabled.  # noqa: E501

        :return: The sub_tasks_enabled of this Configuration.  # noqa: E501
        :rtype: bool
        """
        return self._sub_tasks_enabled

    @sub_tasks_enabled.setter
    def sub_tasks_enabled(self, sub_tasks_enabled):
        """Sets the sub_tasks_enabled of this Configuration.

        Whether the ability to create subtasks for issues is enabled.  # noqa: E501

        :param sub_tasks_enabled: The sub_tasks_enabled of this Configuration.  # noqa: E501
        :type: bool
        """

        self._sub_tasks_enabled = sub_tasks_enabled

    @property
    def time_tracking_configuration(self):
        """Gets the time_tracking_configuration of this Configuration.  # noqa: E501

        The configuration of time tracking.  # noqa: E501

        :return: The time_tracking_configuration of this Configuration.  # noqa: E501
        :rtype: AllOfConfigurationTimeTrackingConfiguration
        """
        return self._time_tracking_configuration

    @time_tracking_configuration.setter
    def time_tracking_configuration(self, time_tracking_configuration):
        """Sets the time_tracking_configuration of this Configuration.

        The configuration of time tracking.  # noqa: E501

        :param time_tracking_configuration: The time_tracking_configuration of this Configuration.  # noqa: E501
        :type: AllOfConfigurationTimeTrackingConfiguration
        """

        self._time_tracking_configuration = time_tracking_configuration

    @property
    def time_tracking_enabled(self):
        """Gets the time_tracking_enabled of this Configuration.  # noqa: E501

        Whether the ability to track time is enabled. This property is deprecated.  # noqa: E501

        :return: The time_tracking_enabled of this Configuration.  # noqa: E501
        :rtype: bool
        """
        return self._time_tracking_enabled

    @time_tracking_enabled.setter
    def time_tracking_enabled(self, time_tracking_enabled):
        """Sets the time_tracking_enabled of this Configuration.

        Whether the ability to track time is enabled. This property is deprecated.  # noqa: E501

        :param time_tracking_enabled: The time_tracking_enabled of this Configuration.  # noqa: E501
        :type: bool
        """

        self._time_tracking_enabled = time_tracking_enabled

    @property
    def unassigned_issues_allowed(self):
        """Gets the unassigned_issues_allowed of this Configuration.  # noqa: E501

        Whether the ability to create unassigned issues is enabled. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.  # noqa: E501

        :return: The unassigned_issues_allowed of this Configuration.  # noqa: E501
        :rtype: bool
        """
        return self._unassigned_issues_allowed

    @unassigned_issues_allowed.setter
    def unassigned_issues_allowed(self, unassigned_issues_allowed):
        """Sets the unassigned_issues_allowed of this Configuration.

        Whether the ability to create unassigned issues is enabled. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.  # noqa: E501

        :param unassigned_issues_allowed: The unassigned_issues_allowed of this Configuration.  # noqa: E501
        :type: bool
        """

        self._unassigned_issues_allowed = unassigned_issues_allowed

    @property
    def voting_enabled(self):
        """Gets the voting_enabled of this Configuration.  # noqa: E501

        Whether the ability for users to vote on issues is enabled. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.  # noqa: E501

        :return: The voting_enabled of this Configuration.  # noqa: E501
        :rtype: bool
        """
        return self._voting_enabled

    @voting_enabled.setter
    def voting_enabled(self, voting_enabled):
        """Sets the voting_enabled of this Configuration.

        Whether the ability for users to vote on issues is enabled. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.  # noqa: E501

        :param voting_enabled: The voting_enabled of this Configuration.  # noqa: E501
        :type: bool
        """

        self._voting_enabled = voting_enabled

    @property
    def watching_enabled(self):
        """Gets the watching_enabled of this Configuration.  # noqa: E501

        Whether the ability for users to watch issues is enabled. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.  # noqa: E501

        :return: The watching_enabled of this Configuration.  # noqa: E501
        :rtype: bool
        """
        return self._watching_enabled

    @watching_enabled.setter
    def watching_enabled(self, watching_enabled):
        """Sets the watching_enabled of this Configuration.

        Whether the ability for users to watch issues is enabled. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.  # noqa: E501

        :param watching_enabled: The watching_enabled of this Configuration.  # noqa: E501
        :type: bool
        """

        self._watching_enabled = watching_enabled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Configuration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Configuration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
