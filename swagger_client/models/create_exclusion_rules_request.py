# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateExclusionRulesRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'issue_ids': 'list[int]',
        'issue_type_ids': 'list[int]',
        'number_of_days_to_show_completed_issues': 'int',
        'release_ids': 'list[int]',
        'work_status_category_ids': 'list[int]',
        'work_status_ids': 'list[int]'
    }

    attribute_map = {
        'issue_ids': 'issueIds',
        'issue_type_ids': 'issueTypeIds',
        'number_of_days_to_show_completed_issues': 'numberOfDaysToShowCompletedIssues',
        'release_ids': 'releaseIds',
        'work_status_category_ids': 'workStatusCategoryIds',
        'work_status_ids': 'workStatusIds'
    }

    def __init__(self, issue_ids=None, issue_type_ids=None, number_of_days_to_show_completed_issues=None, release_ids=None, work_status_category_ids=None, work_status_ids=None):  # noqa: E501
        """CreateExclusionRulesRequest - a model defined in Swagger"""  # noqa: E501
        self._issue_ids = None
        self._issue_type_ids = None
        self._number_of_days_to_show_completed_issues = None
        self._release_ids = None
        self._work_status_category_ids = None
        self._work_status_ids = None
        self.discriminator = None
        if issue_ids is not None:
            self.issue_ids = issue_ids
        if issue_type_ids is not None:
            self.issue_type_ids = issue_type_ids
        if number_of_days_to_show_completed_issues is not None:
            self.number_of_days_to_show_completed_issues = number_of_days_to_show_completed_issues
        if release_ids is not None:
            self.release_ids = release_ids
        if work_status_category_ids is not None:
            self.work_status_category_ids = work_status_category_ids
        if work_status_ids is not None:
            self.work_status_ids = work_status_ids

    @property
    def issue_ids(self):
        """Gets the issue_ids of this CreateExclusionRulesRequest.  # noqa: E501

        The IDs of the issues to exclude from the plan.  # noqa: E501

        :return: The issue_ids of this CreateExclusionRulesRequest.  # noqa: E501
        :rtype: list[int]
        """
        return self._issue_ids

    @issue_ids.setter
    def issue_ids(self, issue_ids):
        """Sets the issue_ids of this CreateExclusionRulesRequest.

        The IDs of the issues to exclude from the plan.  # noqa: E501

        :param issue_ids: The issue_ids of this CreateExclusionRulesRequest.  # noqa: E501
        :type: list[int]
        """

        self._issue_ids = issue_ids

    @property
    def issue_type_ids(self):
        """Gets the issue_type_ids of this CreateExclusionRulesRequest.  # noqa: E501

        The IDs of the issue types to exclude from the plan.  # noqa: E501

        :return: The issue_type_ids of this CreateExclusionRulesRequest.  # noqa: E501
        :rtype: list[int]
        """
        return self._issue_type_ids

    @issue_type_ids.setter
    def issue_type_ids(self, issue_type_ids):
        """Sets the issue_type_ids of this CreateExclusionRulesRequest.

        The IDs of the issue types to exclude from the plan.  # noqa: E501

        :param issue_type_ids: The issue_type_ids of this CreateExclusionRulesRequest.  # noqa: E501
        :type: list[int]
        """

        self._issue_type_ids = issue_type_ids

    @property
    def number_of_days_to_show_completed_issues(self):
        """Gets the number_of_days_to_show_completed_issues of this CreateExclusionRulesRequest.  # noqa: E501

        Issues completed this number of days ago will be excluded from the plan.  # noqa: E501

        :return: The number_of_days_to_show_completed_issues of this CreateExclusionRulesRequest.  # noqa: E501
        :rtype: int
        """
        return self._number_of_days_to_show_completed_issues

    @number_of_days_to_show_completed_issues.setter
    def number_of_days_to_show_completed_issues(self, number_of_days_to_show_completed_issues):
        """Sets the number_of_days_to_show_completed_issues of this CreateExclusionRulesRequest.

        Issues completed this number of days ago will be excluded from the plan.  # noqa: E501

        :param number_of_days_to_show_completed_issues: The number_of_days_to_show_completed_issues of this CreateExclusionRulesRequest.  # noqa: E501
        :type: int
        """

        self._number_of_days_to_show_completed_issues = number_of_days_to_show_completed_issues

    @property
    def release_ids(self):
        """Gets the release_ids of this CreateExclusionRulesRequest.  # noqa: E501

        The IDs of the releases to exclude from the plan.  # noqa: E501

        :return: The release_ids of this CreateExclusionRulesRequest.  # noqa: E501
        :rtype: list[int]
        """
        return self._release_ids

    @release_ids.setter
    def release_ids(self, release_ids):
        """Sets the release_ids of this CreateExclusionRulesRequest.

        The IDs of the releases to exclude from the plan.  # noqa: E501

        :param release_ids: The release_ids of this CreateExclusionRulesRequest.  # noqa: E501
        :type: list[int]
        """

        self._release_ids = release_ids

    @property
    def work_status_category_ids(self):
        """Gets the work_status_category_ids of this CreateExclusionRulesRequest.  # noqa: E501

        The IDs of the work status categories to exclude from the plan.  # noqa: E501

        :return: The work_status_category_ids of this CreateExclusionRulesRequest.  # noqa: E501
        :rtype: list[int]
        """
        return self._work_status_category_ids

    @work_status_category_ids.setter
    def work_status_category_ids(self, work_status_category_ids):
        """Sets the work_status_category_ids of this CreateExclusionRulesRequest.

        The IDs of the work status categories to exclude from the plan.  # noqa: E501

        :param work_status_category_ids: The work_status_category_ids of this CreateExclusionRulesRequest.  # noqa: E501
        :type: list[int]
        """

        self._work_status_category_ids = work_status_category_ids

    @property
    def work_status_ids(self):
        """Gets the work_status_ids of this CreateExclusionRulesRequest.  # noqa: E501

        The IDs of the work statuses to exclude from the plan.  # noqa: E501

        :return: The work_status_ids of this CreateExclusionRulesRequest.  # noqa: E501
        :rtype: list[int]
        """
        return self._work_status_ids

    @work_status_ids.setter
    def work_status_ids(self, work_status_ids):
        """Sets the work_status_ids of this CreateExclusionRulesRequest.

        The IDs of the work statuses to exclude from the plan.  # noqa: E501

        :param work_status_ids: The work_status_ids of this CreateExclusionRulesRequest.  # noqa: E501
        :type: list[int]
        """

        self._work_status_ids = work_status_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateExclusionRulesRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateExclusionRulesRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
