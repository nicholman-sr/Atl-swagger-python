# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DashboardGadget(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'color': 'str',
        'id': 'int',
        'module_key': 'str',
        'position': 'AllOfDashboardGadgetPosition',
        'title': 'str',
        'uri': 'str'
    }

    attribute_map = {
        'color': 'color',
        'id': 'id',
        'module_key': 'moduleKey',
        'position': 'position',
        'title': 'title',
        'uri': 'uri'
    }

    def __init__(self, color=None, id=None, module_key=None, position=None, title=None, uri=None):  # noqa: E501
        """DashboardGadget - a model defined in Swagger"""  # noqa: E501
        self._color = None
        self._id = None
        self._module_key = None
        self._position = None
        self._title = None
        self._uri = None
        self.discriminator = None
        self.color = color
        self.id = id
        if module_key is not None:
            self.module_key = module_key
        self.position = position
        self.title = title
        if uri is not None:
            self.uri = uri

    @property
    def color(self):
        """Gets the color of this DashboardGadget.  # noqa: E501

        The color of the gadget. Should be one of `blue`, `red`, `yellow`, `green`, `cyan`, `purple`, `gray`, or `white`.  # noqa: E501

        :return: The color of this DashboardGadget.  # noqa: E501
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this DashboardGadget.

        The color of the gadget. Should be one of `blue`, `red`, `yellow`, `green`, `cyan`, `purple`, `gray`, or `white`.  # noqa: E501

        :param color: The color of this DashboardGadget.  # noqa: E501
        :type: str
        """
        if color is None:
            raise ValueError("Invalid value for `color`, must not be `None`")  # noqa: E501
        allowed_values = ["blue", "red", "yellow", "green", "cyan", "purple", "gray", "white"]  # noqa: E501
        if color not in allowed_values:
            raise ValueError(
                "Invalid value for `color` ({0}), must be one of {1}"  # noqa: E501
                .format(color, allowed_values)
            )

        self._color = color

    @property
    def id(self):
        """Gets the id of this DashboardGadget.  # noqa: E501

        The ID of the gadget instance.  # noqa: E501

        :return: The id of this DashboardGadget.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DashboardGadget.

        The ID of the gadget instance.  # noqa: E501

        :param id: The id of this DashboardGadget.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def module_key(self):
        """Gets the module_key of this DashboardGadget.  # noqa: E501

        The module key of the gadget type.  # noqa: E501

        :return: The module_key of this DashboardGadget.  # noqa: E501
        :rtype: str
        """
        return self._module_key

    @module_key.setter
    def module_key(self, module_key):
        """Sets the module_key of this DashboardGadget.

        The module key of the gadget type.  # noqa: E501

        :param module_key: The module_key of this DashboardGadget.  # noqa: E501
        :type: str
        """

        self._module_key = module_key

    @property
    def position(self):
        """Gets the position of this DashboardGadget.  # noqa: E501

        The position of the gadget.  # noqa: E501

        :return: The position of this DashboardGadget.  # noqa: E501
        :rtype: AllOfDashboardGadgetPosition
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this DashboardGadget.

        The position of the gadget.  # noqa: E501

        :param position: The position of this DashboardGadget.  # noqa: E501
        :type: AllOfDashboardGadgetPosition
        """
        if position is None:
            raise ValueError("Invalid value for `position`, must not be `None`")  # noqa: E501

        self._position = position

    @property
    def title(self):
        """Gets the title of this DashboardGadget.  # noqa: E501

        The title of the gadget.  # noqa: E501

        :return: The title of this DashboardGadget.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this DashboardGadget.

        The title of the gadget.  # noqa: E501

        :param title: The title of this DashboardGadget.  # noqa: E501
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def uri(self):
        """Gets the uri of this DashboardGadget.  # noqa: E501

        The URI of the gadget type.  # noqa: E501

        :return: The uri of this DashboardGadget.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this DashboardGadget.

        The URI of the gadget type.  # noqa: E501

        :param uri: The uri of this DashboardGadget.  # noqa: E501
        :type: str
        """

        self._uri = uri

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DashboardGadget, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DashboardGadget):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
