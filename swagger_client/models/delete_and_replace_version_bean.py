# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DeleteAndReplaceVersionBean(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'custom_field_replacement_list': 'list[CustomFieldReplacement]',
        'move_affected_issues_to': 'int',
        'move_fix_issues_to': 'int'
    }

    attribute_map = {
        'custom_field_replacement_list': 'customFieldReplacementList',
        'move_affected_issues_to': 'moveAffectedIssuesTo',
        'move_fix_issues_to': 'moveFixIssuesTo'
    }

    def __init__(self, custom_field_replacement_list=None, move_affected_issues_to=None, move_fix_issues_to=None):  # noqa: E501
        """DeleteAndReplaceVersionBean - a model defined in Swagger"""  # noqa: E501
        self._custom_field_replacement_list = None
        self._move_affected_issues_to = None
        self._move_fix_issues_to = None
        self.discriminator = None
        if custom_field_replacement_list is not None:
            self.custom_field_replacement_list = custom_field_replacement_list
        if move_affected_issues_to is not None:
            self.move_affected_issues_to = move_affected_issues_to
        if move_fix_issues_to is not None:
            self.move_fix_issues_to = move_fix_issues_to

    @property
    def custom_field_replacement_list(self):
        """Gets the custom_field_replacement_list of this DeleteAndReplaceVersionBean.  # noqa: E501

        An array of custom field IDs (`customFieldId`) and version IDs (`moveTo`) to update when the fields contain the deleted version.  # noqa: E501

        :return: The custom_field_replacement_list of this DeleteAndReplaceVersionBean.  # noqa: E501
        :rtype: list[CustomFieldReplacement]
        """
        return self._custom_field_replacement_list

    @custom_field_replacement_list.setter
    def custom_field_replacement_list(self, custom_field_replacement_list):
        """Sets the custom_field_replacement_list of this DeleteAndReplaceVersionBean.

        An array of custom field IDs (`customFieldId`) and version IDs (`moveTo`) to update when the fields contain the deleted version.  # noqa: E501

        :param custom_field_replacement_list: The custom_field_replacement_list of this DeleteAndReplaceVersionBean.  # noqa: E501
        :type: list[CustomFieldReplacement]
        """

        self._custom_field_replacement_list = custom_field_replacement_list

    @property
    def move_affected_issues_to(self):
        """Gets the move_affected_issues_to of this DeleteAndReplaceVersionBean.  # noqa: E501

        The ID of the version to update `affectedVersion` to when the field contains the deleted version.  # noqa: E501

        :return: The move_affected_issues_to of this DeleteAndReplaceVersionBean.  # noqa: E501
        :rtype: int
        """
        return self._move_affected_issues_to

    @move_affected_issues_to.setter
    def move_affected_issues_to(self, move_affected_issues_to):
        """Sets the move_affected_issues_to of this DeleteAndReplaceVersionBean.

        The ID of the version to update `affectedVersion` to when the field contains the deleted version.  # noqa: E501

        :param move_affected_issues_to: The move_affected_issues_to of this DeleteAndReplaceVersionBean.  # noqa: E501
        :type: int
        """

        self._move_affected_issues_to = move_affected_issues_to

    @property
    def move_fix_issues_to(self):
        """Gets the move_fix_issues_to of this DeleteAndReplaceVersionBean.  # noqa: E501

        The ID of the version to update `fixVersion` to when the field contains the deleted version.  # noqa: E501

        :return: The move_fix_issues_to of this DeleteAndReplaceVersionBean.  # noqa: E501
        :rtype: int
        """
        return self._move_fix_issues_to

    @move_fix_issues_to.setter
    def move_fix_issues_to(self, move_fix_issues_to):
        """Sets the move_fix_issues_to of this DeleteAndReplaceVersionBean.

        The ID of the version to update `fixVersion` to when the field contains the deleted version.  # noqa: E501

        :param move_fix_issues_to: The move_fix_issues_to of this DeleteAndReplaceVersionBean.  # noqa: E501
        :type: int
        """

        self._move_fix_issues_to = move_fix_issues_to

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeleteAndReplaceVersionBean, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeleteAndReplaceVersionBean):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
