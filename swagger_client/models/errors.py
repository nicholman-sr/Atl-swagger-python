# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Errors(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'issue_is_subtask': 'Error',
        'issues_in_archived_projects': 'Error',
        'issues_in_unlicensed_projects': 'Error',
        'issues_not_found': 'Error',
        'user_does_not_have_permission': 'Error'
    }

    attribute_map = {
        'issue_is_subtask': 'issueIsSubtask',
        'issues_in_archived_projects': 'issuesInArchivedProjects',
        'issues_in_unlicensed_projects': 'issuesInUnlicensedProjects',
        'issues_not_found': 'issuesNotFound',
        'user_does_not_have_permission': 'userDoesNotHavePermission'
    }

    def __init__(self, issue_is_subtask=None, issues_in_archived_projects=None, issues_in_unlicensed_projects=None, issues_not_found=None, user_does_not_have_permission=None):  # noqa: E501
        """Errors - a model defined in Swagger"""  # noqa: E501
        self._issue_is_subtask = None
        self._issues_in_archived_projects = None
        self._issues_in_unlicensed_projects = None
        self._issues_not_found = None
        self._user_does_not_have_permission = None
        self.discriminator = None
        if issue_is_subtask is not None:
            self.issue_is_subtask = issue_is_subtask
        if issues_in_archived_projects is not None:
            self.issues_in_archived_projects = issues_in_archived_projects
        if issues_in_unlicensed_projects is not None:
            self.issues_in_unlicensed_projects = issues_in_unlicensed_projects
        if issues_not_found is not None:
            self.issues_not_found = issues_not_found
        if user_does_not_have_permission is not None:
            self.user_does_not_have_permission = user_does_not_have_permission

    @property
    def issue_is_subtask(self):
        """Gets the issue_is_subtask of this Errors.  # noqa: E501


        :return: The issue_is_subtask of this Errors.  # noqa: E501
        :rtype: Error
        """
        return self._issue_is_subtask

    @issue_is_subtask.setter
    def issue_is_subtask(self, issue_is_subtask):
        """Sets the issue_is_subtask of this Errors.


        :param issue_is_subtask: The issue_is_subtask of this Errors.  # noqa: E501
        :type: Error
        """

        self._issue_is_subtask = issue_is_subtask

    @property
    def issues_in_archived_projects(self):
        """Gets the issues_in_archived_projects of this Errors.  # noqa: E501


        :return: The issues_in_archived_projects of this Errors.  # noqa: E501
        :rtype: Error
        """
        return self._issues_in_archived_projects

    @issues_in_archived_projects.setter
    def issues_in_archived_projects(self, issues_in_archived_projects):
        """Sets the issues_in_archived_projects of this Errors.


        :param issues_in_archived_projects: The issues_in_archived_projects of this Errors.  # noqa: E501
        :type: Error
        """

        self._issues_in_archived_projects = issues_in_archived_projects

    @property
    def issues_in_unlicensed_projects(self):
        """Gets the issues_in_unlicensed_projects of this Errors.  # noqa: E501


        :return: The issues_in_unlicensed_projects of this Errors.  # noqa: E501
        :rtype: Error
        """
        return self._issues_in_unlicensed_projects

    @issues_in_unlicensed_projects.setter
    def issues_in_unlicensed_projects(self, issues_in_unlicensed_projects):
        """Sets the issues_in_unlicensed_projects of this Errors.


        :param issues_in_unlicensed_projects: The issues_in_unlicensed_projects of this Errors.  # noqa: E501
        :type: Error
        """

        self._issues_in_unlicensed_projects = issues_in_unlicensed_projects

    @property
    def issues_not_found(self):
        """Gets the issues_not_found of this Errors.  # noqa: E501


        :return: The issues_not_found of this Errors.  # noqa: E501
        :rtype: Error
        """
        return self._issues_not_found

    @issues_not_found.setter
    def issues_not_found(self, issues_not_found):
        """Sets the issues_not_found of this Errors.


        :param issues_not_found: The issues_not_found of this Errors.  # noqa: E501
        :type: Error
        """

        self._issues_not_found = issues_not_found

    @property
    def user_does_not_have_permission(self):
        """Gets the user_does_not_have_permission of this Errors.  # noqa: E501


        :return: The user_does_not_have_permission of this Errors.  # noqa: E501
        :rtype: Error
        """
        return self._user_does_not_have_permission

    @user_does_not_have_permission.setter
    def user_does_not_have_permission(self, user_does_not_have_permission):
        """Sets the user_does_not_have_permission of this Errors.


        :param user_does_not_have_permission: The user_does_not_have_permission of this Errors.  # noqa: E501
        :type: Error
        """

        self._user_does_not_have_permission = user_does_not_have_permission

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Errors, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Errors):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
