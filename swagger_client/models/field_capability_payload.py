# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FieldCapabilityPayload(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'custom_field_definitions': 'list[CustomFieldPayload]',
        'field_layout_scheme': 'FieldLayoutSchemePayload',
        'field_layouts': 'list[FieldLayoutPayload]',
        'issue_layouts': 'list[IssueLayoutPayload]',
        'issue_type_screen_scheme': 'IssueTypeScreenSchemePayload',
        'screen_scheme': 'list[ScreenSchemePayload]',
        'screens': 'list[ScreenPayload]'
    }

    attribute_map = {
        'custom_field_definitions': 'customFieldDefinitions',
        'field_layout_scheme': 'fieldLayoutScheme',
        'field_layouts': 'fieldLayouts',
        'issue_layouts': 'issueLayouts',
        'issue_type_screen_scheme': 'issueTypeScreenScheme',
        'screen_scheme': 'screenScheme',
        'screens': 'screens'
    }

    def __init__(self, custom_field_definitions=None, field_layout_scheme=None, field_layouts=None, issue_layouts=None, issue_type_screen_scheme=None, screen_scheme=None, screens=None):  # noqa: E501
        """FieldCapabilityPayload - a model defined in Swagger"""  # noqa: E501
        self._custom_field_definitions = None
        self._field_layout_scheme = None
        self._field_layouts = None
        self._issue_layouts = None
        self._issue_type_screen_scheme = None
        self._screen_scheme = None
        self._screens = None
        self.discriminator = None
        if custom_field_definitions is not None:
            self.custom_field_definitions = custom_field_definitions
        if field_layout_scheme is not None:
            self.field_layout_scheme = field_layout_scheme
        if field_layouts is not None:
            self.field_layouts = field_layouts
        if issue_layouts is not None:
            self.issue_layouts = issue_layouts
        if issue_type_screen_scheme is not None:
            self.issue_type_screen_scheme = issue_type_screen_scheme
        if screen_scheme is not None:
            self.screen_scheme = screen_scheme
        if screens is not None:
            self.screens = screens

    @property
    def custom_field_definitions(self):
        """Gets the custom_field_definitions of this FieldCapabilityPayload.  # noqa: E501

        The custom field definitions. See https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-issue-fields/\\#api-rest-api-3-field-post  # noqa: E501

        :return: The custom_field_definitions of this FieldCapabilityPayload.  # noqa: E501
        :rtype: list[CustomFieldPayload]
        """
        return self._custom_field_definitions

    @custom_field_definitions.setter
    def custom_field_definitions(self, custom_field_definitions):
        """Sets the custom_field_definitions of this FieldCapabilityPayload.

        The custom field definitions. See https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-issue-fields/\\#api-rest-api-3-field-post  # noqa: E501

        :param custom_field_definitions: The custom_field_definitions of this FieldCapabilityPayload.  # noqa: E501
        :type: list[CustomFieldPayload]
        """

        self._custom_field_definitions = custom_field_definitions

    @property
    def field_layout_scheme(self):
        """Gets the field_layout_scheme of this FieldCapabilityPayload.  # noqa: E501


        :return: The field_layout_scheme of this FieldCapabilityPayload.  # noqa: E501
        :rtype: FieldLayoutSchemePayload
        """
        return self._field_layout_scheme

    @field_layout_scheme.setter
    def field_layout_scheme(self, field_layout_scheme):
        """Sets the field_layout_scheme of this FieldCapabilityPayload.


        :param field_layout_scheme: The field_layout_scheme of this FieldCapabilityPayload.  # noqa: E501
        :type: FieldLayoutSchemePayload
        """

        self._field_layout_scheme = field_layout_scheme

    @property
    def field_layouts(self):
        """Gets the field_layouts of this FieldCapabilityPayload.  # noqa: E501

        The field layouts configuration.  # noqa: E501

        :return: The field_layouts of this FieldCapabilityPayload.  # noqa: E501
        :rtype: list[FieldLayoutPayload]
        """
        return self._field_layouts

    @field_layouts.setter
    def field_layouts(self, field_layouts):
        """Sets the field_layouts of this FieldCapabilityPayload.

        The field layouts configuration.  # noqa: E501

        :param field_layouts: The field_layouts of this FieldCapabilityPayload.  # noqa: E501
        :type: list[FieldLayoutPayload]
        """

        self._field_layouts = field_layouts

    @property
    def issue_layouts(self):
        """Gets the issue_layouts of this FieldCapabilityPayload.  # noqa: E501

        The issue layouts configuration  # noqa: E501

        :return: The issue_layouts of this FieldCapabilityPayload.  # noqa: E501
        :rtype: list[IssueLayoutPayload]
        """
        return self._issue_layouts

    @issue_layouts.setter
    def issue_layouts(self, issue_layouts):
        """Sets the issue_layouts of this FieldCapabilityPayload.

        The issue layouts configuration  # noqa: E501

        :param issue_layouts: The issue_layouts of this FieldCapabilityPayload.  # noqa: E501
        :type: list[IssueLayoutPayload]
        """

        self._issue_layouts = issue_layouts

    @property
    def issue_type_screen_scheme(self):
        """Gets the issue_type_screen_scheme of this FieldCapabilityPayload.  # noqa: E501


        :return: The issue_type_screen_scheme of this FieldCapabilityPayload.  # noqa: E501
        :rtype: IssueTypeScreenSchemePayload
        """
        return self._issue_type_screen_scheme

    @issue_type_screen_scheme.setter
    def issue_type_screen_scheme(self, issue_type_screen_scheme):
        """Sets the issue_type_screen_scheme of this FieldCapabilityPayload.


        :param issue_type_screen_scheme: The issue_type_screen_scheme of this FieldCapabilityPayload.  # noqa: E501
        :type: IssueTypeScreenSchemePayload
        """

        self._issue_type_screen_scheme = issue_type_screen_scheme

    @property
    def screen_scheme(self):
        """Gets the screen_scheme of this FieldCapabilityPayload.  # noqa: E501

        The screen schemes See https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-screen-schemes/\\#api-rest-api-3-screenscheme-post  # noqa: E501

        :return: The screen_scheme of this FieldCapabilityPayload.  # noqa: E501
        :rtype: list[ScreenSchemePayload]
        """
        return self._screen_scheme

    @screen_scheme.setter
    def screen_scheme(self, screen_scheme):
        """Sets the screen_scheme of this FieldCapabilityPayload.

        The screen schemes See https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-screen-schemes/\\#api-rest-api-3-screenscheme-post  # noqa: E501

        :param screen_scheme: The screen_scheme of this FieldCapabilityPayload.  # noqa: E501
        :type: list[ScreenSchemePayload]
        """

        self._screen_scheme = screen_scheme

    @property
    def screens(self):
        """Gets the screens of this FieldCapabilityPayload.  # noqa: E501

        The screens. See https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-screens/\\#api-rest-api-3-screens-post  # noqa: E501

        :return: The screens of this FieldCapabilityPayload.  # noqa: E501
        :rtype: list[ScreenPayload]
        """
        return self._screens

    @screens.setter
    def screens(self, screens):
        """Sets the screens of this FieldCapabilityPayload.

        The screens. See https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-screens/\\#api-rest-api-3-screens-post  # noqa: E501

        :param screens: The screens of this FieldCapabilityPayload.  # noqa: E501
        :type: list[ScreenPayload]
        """

        self._screens = screens

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FieldCapabilityPayload, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FieldCapabilityPayload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
