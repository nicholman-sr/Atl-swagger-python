# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FieldDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'clause_names': 'list[str]',
        'custom': 'bool',
        'id': 'str',
        'key': 'str',
        'name': 'str',
        'navigable': 'bool',
        'orderable': 'bool',
        'schema': 'AllOfFieldDetailsSchema',
        'scope': 'AllOfFieldDetailsScope',
        'searchable': 'bool'
    }

    attribute_map = {
        'clause_names': 'clauseNames',
        'custom': 'custom',
        'id': 'id',
        'key': 'key',
        'name': 'name',
        'navigable': 'navigable',
        'orderable': 'orderable',
        'schema': 'schema',
        'scope': 'scope',
        'searchable': 'searchable'
    }

    def __init__(self, clause_names=None, custom=None, id=None, key=None, name=None, navigable=None, orderable=None, schema=None, scope=None, searchable=None):  # noqa: E501
        """FieldDetails - a model defined in Swagger"""  # noqa: E501
        self._clause_names = None
        self._custom = None
        self._id = None
        self._key = None
        self._name = None
        self._navigable = None
        self._orderable = None
        self._schema = None
        self._scope = None
        self._searchable = None
        self.discriminator = None
        if clause_names is not None:
            self.clause_names = clause_names
        if custom is not None:
            self.custom = custom
        if id is not None:
            self.id = id
        if key is not None:
            self.key = key
        if name is not None:
            self.name = name
        if navigable is not None:
            self.navigable = navigable
        if orderable is not None:
            self.orderable = orderable
        if schema is not None:
            self.schema = schema
        if scope is not None:
            self.scope = scope
        if searchable is not None:
            self.searchable = searchable

    @property
    def clause_names(self):
        """Gets the clause_names of this FieldDetails.  # noqa: E501

        The names that can be used to reference the field in an advanced search. For more information, see [Advanced searching - fields reference](https://confluence.atlassian.com/x/gwORLQ).  # noqa: E501

        :return: The clause_names of this FieldDetails.  # noqa: E501
        :rtype: list[str]
        """
        return self._clause_names

    @clause_names.setter
    def clause_names(self, clause_names):
        """Sets the clause_names of this FieldDetails.

        The names that can be used to reference the field in an advanced search. For more information, see [Advanced searching - fields reference](https://confluence.atlassian.com/x/gwORLQ).  # noqa: E501

        :param clause_names: The clause_names of this FieldDetails.  # noqa: E501
        :type: list[str]
        """

        self._clause_names = clause_names

    @property
    def custom(self):
        """Gets the custom of this FieldDetails.  # noqa: E501

        Whether the field is a custom field.  # noqa: E501

        :return: The custom of this FieldDetails.  # noqa: E501
        :rtype: bool
        """
        return self._custom

    @custom.setter
    def custom(self, custom):
        """Sets the custom of this FieldDetails.

        Whether the field is a custom field.  # noqa: E501

        :param custom: The custom of this FieldDetails.  # noqa: E501
        :type: bool
        """

        self._custom = custom

    @property
    def id(self):
        """Gets the id of this FieldDetails.  # noqa: E501

        The ID of the field.  # noqa: E501

        :return: The id of this FieldDetails.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FieldDetails.

        The ID of the field.  # noqa: E501

        :param id: The id of this FieldDetails.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def key(self):
        """Gets the key of this FieldDetails.  # noqa: E501

        The key of the field.  # noqa: E501

        :return: The key of this FieldDetails.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this FieldDetails.

        The key of the field.  # noqa: E501

        :param key: The key of this FieldDetails.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def name(self):
        """Gets the name of this FieldDetails.  # noqa: E501

        The name of the field.  # noqa: E501

        :return: The name of this FieldDetails.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FieldDetails.

        The name of the field.  # noqa: E501

        :param name: The name of this FieldDetails.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def navigable(self):
        """Gets the navigable of this FieldDetails.  # noqa: E501

        Whether the field can be used as a column on the issue navigator.  # noqa: E501

        :return: The navigable of this FieldDetails.  # noqa: E501
        :rtype: bool
        """
        return self._navigable

    @navigable.setter
    def navigable(self, navigable):
        """Sets the navigable of this FieldDetails.

        Whether the field can be used as a column on the issue navigator.  # noqa: E501

        :param navigable: The navigable of this FieldDetails.  # noqa: E501
        :type: bool
        """

        self._navigable = navigable

    @property
    def orderable(self):
        """Gets the orderable of this FieldDetails.  # noqa: E501

        Whether the content of the field can be used to order lists.  # noqa: E501

        :return: The orderable of this FieldDetails.  # noqa: E501
        :rtype: bool
        """
        return self._orderable

    @orderable.setter
    def orderable(self, orderable):
        """Sets the orderable of this FieldDetails.

        Whether the content of the field can be used to order lists.  # noqa: E501

        :param orderable: The orderable of this FieldDetails.  # noqa: E501
        :type: bool
        """

        self._orderable = orderable

    @property
    def schema(self):
        """Gets the schema of this FieldDetails.  # noqa: E501

        The data schema for the field.  # noqa: E501

        :return: The schema of this FieldDetails.  # noqa: E501
        :rtype: AllOfFieldDetailsSchema
        """
        return self._schema

    @schema.setter
    def schema(self, schema):
        """Sets the schema of this FieldDetails.

        The data schema for the field.  # noqa: E501

        :param schema: The schema of this FieldDetails.  # noqa: E501
        :type: AllOfFieldDetailsSchema
        """

        self._schema = schema

    @property
    def scope(self):
        """Gets the scope of this FieldDetails.  # noqa: E501

        The scope of the field.  # noqa: E501

        :return: The scope of this FieldDetails.  # noqa: E501
        :rtype: AllOfFieldDetailsScope
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this FieldDetails.

        The scope of the field.  # noqa: E501

        :param scope: The scope of this FieldDetails.  # noqa: E501
        :type: AllOfFieldDetailsScope
        """

        self._scope = scope

    @property
    def searchable(self):
        """Gets the searchable of this FieldDetails.  # noqa: E501

        Whether the content of the field can be searched.  # noqa: E501

        :return: The searchable of this FieldDetails.  # noqa: E501
        :rtype: bool
        """
        return self._searchable

    @searchable.setter
    def searchable(self, searchable):
        """Sets the searchable of this FieldDetails.

        Whether the content of the field can be searched.  # noqa: E501

        :param searchable: The searchable of this FieldDetails.  # noqa: E501
        :type: bool
        """

        self._searchable = searchable

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FieldDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FieldDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
