# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FieldMetadata(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'allowed_values': 'list[object]',
        'auto_complete_url': 'str',
        'configuration': 'dict(str, object)',
        'default_value': 'object',
        'has_default_value': 'bool',
        'key': 'str',
        'name': 'str',
        'operations': 'list[str]',
        'required': 'bool',
        'schema': 'AllOfFieldMetadataSchema'
    }

    attribute_map = {
        'allowed_values': 'allowedValues',
        'auto_complete_url': 'autoCompleteUrl',
        'configuration': 'configuration',
        'default_value': 'defaultValue',
        'has_default_value': 'hasDefaultValue',
        'key': 'key',
        'name': 'name',
        'operations': 'operations',
        'required': 'required',
        'schema': 'schema'
    }

    def __init__(self, allowed_values=None, auto_complete_url=None, configuration=None, default_value=None, has_default_value=None, key=None, name=None, operations=None, required=None, schema=None):  # noqa: E501
        """FieldMetadata - a model defined in Swagger"""  # noqa: E501
        self._allowed_values = None
        self._auto_complete_url = None
        self._configuration = None
        self._default_value = None
        self._has_default_value = None
        self._key = None
        self._name = None
        self._operations = None
        self._required = None
        self._schema = None
        self.discriminator = None
        if allowed_values is not None:
            self.allowed_values = allowed_values
        if auto_complete_url is not None:
            self.auto_complete_url = auto_complete_url
        if configuration is not None:
            self.configuration = configuration
        if default_value is not None:
            self.default_value = default_value
        if has_default_value is not None:
            self.has_default_value = has_default_value
        self.key = key
        self.name = name
        self.operations = operations
        self.required = required
        self.schema = schema

    @property
    def allowed_values(self):
        """Gets the allowed_values of this FieldMetadata.  # noqa: E501

        The list of values allowed in the field.  # noqa: E501

        :return: The allowed_values of this FieldMetadata.  # noqa: E501
        :rtype: list[object]
        """
        return self._allowed_values

    @allowed_values.setter
    def allowed_values(self, allowed_values):
        """Sets the allowed_values of this FieldMetadata.

        The list of values allowed in the field.  # noqa: E501

        :param allowed_values: The allowed_values of this FieldMetadata.  # noqa: E501
        :type: list[object]
        """

        self._allowed_values = allowed_values

    @property
    def auto_complete_url(self):
        """Gets the auto_complete_url of this FieldMetadata.  # noqa: E501

        The URL that can be used to automatically complete the field.  # noqa: E501

        :return: The auto_complete_url of this FieldMetadata.  # noqa: E501
        :rtype: str
        """
        return self._auto_complete_url

    @auto_complete_url.setter
    def auto_complete_url(self, auto_complete_url):
        """Sets the auto_complete_url of this FieldMetadata.

        The URL that can be used to automatically complete the field.  # noqa: E501

        :param auto_complete_url: The auto_complete_url of this FieldMetadata.  # noqa: E501
        :type: str
        """

        self._auto_complete_url = auto_complete_url

    @property
    def configuration(self):
        """Gets the configuration of this FieldMetadata.  # noqa: E501

        The configuration properties.  # noqa: E501

        :return: The configuration of this FieldMetadata.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._configuration

    @configuration.setter
    def configuration(self, configuration):
        """Sets the configuration of this FieldMetadata.

        The configuration properties.  # noqa: E501

        :param configuration: The configuration of this FieldMetadata.  # noqa: E501
        :type: dict(str, object)
        """

        self._configuration = configuration

    @property
    def default_value(self):
        """Gets the default_value of this FieldMetadata.  # noqa: E501

        The default value of the field.  # noqa: E501

        :return: The default_value of this FieldMetadata.  # noqa: E501
        :rtype: object
        """
        return self._default_value

    @default_value.setter
    def default_value(self, default_value):
        """Sets the default_value of this FieldMetadata.

        The default value of the field.  # noqa: E501

        :param default_value: The default_value of this FieldMetadata.  # noqa: E501
        :type: object
        """

        self._default_value = default_value

    @property
    def has_default_value(self):
        """Gets the has_default_value of this FieldMetadata.  # noqa: E501

        Whether the field has a default value.  # noqa: E501

        :return: The has_default_value of this FieldMetadata.  # noqa: E501
        :rtype: bool
        """
        return self._has_default_value

    @has_default_value.setter
    def has_default_value(self, has_default_value):
        """Sets the has_default_value of this FieldMetadata.

        Whether the field has a default value.  # noqa: E501

        :param has_default_value: The has_default_value of this FieldMetadata.  # noqa: E501
        :type: bool
        """

        self._has_default_value = has_default_value

    @property
    def key(self):
        """Gets the key of this FieldMetadata.  # noqa: E501

        The key of the field.  # noqa: E501

        :return: The key of this FieldMetadata.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this FieldMetadata.

        The key of the field.  # noqa: E501

        :param key: The key of this FieldMetadata.  # noqa: E501
        :type: str
        """
        if key is None:
            raise ValueError("Invalid value for `key`, must not be `None`")  # noqa: E501

        self._key = key

    @property
    def name(self):
        """Gets the name of this FieldMetadata.  # noqa: E501

        The name of the field.  # noqa: E501

        :return: The name of this FieldMetadata.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FieldMetadata.

        The name of the field.  # noqa: E501

        :param name: The name of this FieldMetadata.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def operations(self):
        """Gets the operations of this FieldMetadata.  # noqa: E501

        The list of operations that can be performed on the field.  # noqa: E501

        :return: The operations of this FieldMetadata.  # noqa: E501
        :rtype: list[str]
        """
        return self._operations

    @operations.setter
    def operations(self, operations):
        """Sets the operations of this FieldMetadata.

        The list of operations that can be performed on the field.  # noqa: E501

        :param operations: The operations of this FieldMetadata.  # noqa: E501
        :type: list[str]
        """
        if operations is None:
            raise ValueError("Invalid value for `operations`, must not be `None`")  # noqa: E501

        self._operations = operations

    @property
    def required(self):
        """Gets the required of this FieldMetadata.  # noqa: E501

        Whether the field is required.  # noqa: E501

        :return: The required of this FieldMetadata.  # noqa: E501
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this FieldMetadata.

        Whether the field is required.  # noqa: E501

        :param required: The required of this FieldMetadata.  # noqa: E501
        :type: bool
        """
        if required is None:
            raise ValueError("Invalid value for `required`, must not be `None`")  # noqa: E501

        self._required = required

    @property
    def schema(self):
        """Gets the schema of this FieldMetadata.  # noqa: E501

        The data type of the field.  # noqa: E501

        :return: The schema of this FieldMetadata.  # noqa: E501
        :rtype: AllOfFieldMetadataSchema
        """
        return self._schema

    @schema.setter
    def schema(self, schema):
        """Sets the schema of this FieldMetadata.

        The data type of the field.  # noqa: E501

        :param schema: The schema of this FieldMetadata.  # noqa: E501
        :type: AllOfFieldMetadataSchema
        """
        if schema is None:
            raise ValueError("Invalid value for `schema`, must not be `None`")  # noqa: E501

        self._schema = schema

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FieldMetadata, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FieldMetadata):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
