# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FromLayoutPayload(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'from_port': 'int',
        'status': 'ProjectCreateResourceIdentifier',
        'to_port_override': 'int'
    }

    attribute_map = {
        'from_port': 'fromPort',
        'status': 'status',
        'to_port_override': 'toPortOverride'
    }

    def __init__(self, from_port=None, status=None, to_port_override=None):  # noqa: E501
        """FromLayoutPayload - a model defined in Swagger"""  # noqa: E501
        self._from_port = None
        self._status = None
        self._to_port_override = None
        self.discriminator = None
        if from_port is not None:
            self.from_port = from_port
        if status is not None:
            self.status = status
        if to_port_override is not None:
            self.to_port_override = to_port_override

    @property
    def from_port(self):
        """Gets the from_port of this FromLayoutPayload.  # noqa: E501

        The port that the transition can be made from  # noqa: E501

        :return: The from_port of this FromLayoutPayload.  # noqa: E501
        :rtype: int
        """
        return self._from_port

    @from_port.setter
    def from_port(self, from_port):
        """Sets the from_port of this FromLayoutPayload.

        The port that the transition can be made from  # noqa: E501

        :param from_port: The from_port of this FromLayoutPayload.  # noqa: E501
        :type: int
        """

        self._from_port = from_port

    @property
    def status(self):
        """Gets the status of this FromLayoutPayload.  # noqa: E501


        :return: The status of this FromLayoutPayload.  # noqa: E501
        :rtype: ProjectCreateResourceIdentifier
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this FromLayoutPayload.


        :param status: The status of this FromLayoutPayload.  # noqa: E501
        :type: ProjectCreateResourceIdentifier
        """

        self._status = status

    @property
    def to_port_override(self):
        """Gets the to_port_override of this FromLayoutPayload.  # noqa: E501

        The port that the transition goes to  # noqa: E501

        :return: The to_port_override of this FromLayoutPayload.  # noqa: E501
        :rtype: int
        """
        return self._to_port_override

    @to_port_override.setter
    def to_port_override(self, to_port_override):
        """Sets the to_port_override of this FromLayoutPayload.

        The port that the transition goes to  # noqa: E501

        :param to_port_override: The to_port_override of this FromLayoutPayload.  # noqa: E501
        :type: int
        """

        self._to_port_override = to_port_override

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FromLayoutPayload, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FromLayoutPayload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
