# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GetAtlassianTeamResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'capacity': 'float',
        'id': 'str',
        'issue_source_id': 'int',
        'planning_style': 'str',
        'sprint_length': 'int'
    }

    attribute_map = {
        'capacity': 'capacity',
        'id': 'id',
        'issue_source_id': 'issueSourceId',
        'planning_style': 'planningStyle',
        'sprint_length': 'sprintLength'
    }

    def __init__(self, capacity=None, id=None, issue_source_id=None, planning_style=None, sprint_length=None):  # noqa: E501
        """GetAtlassianTeamResponse - a model defined in Swagger"""  # noqa: E501
        self._capacity = None
        self._id = None
        self._issue_source_id = None
        self._planning_style = None
        self._sprint_length = None
        self.discriminator = None
        if capacity is not None:
            self.capacity = capacity
        self.id = id
        if issue_source_id is not None:
            self.issue_source_id = issue_source_id
        self.planning_style = planning_style
        if sprint_length is not None:
            self.sprint_length = sprint_length

    @property
    def capacity(self):
        """Gets the capacity of this GetAtlassianTeamResponse.  # noqa: E501

        The capacity for the Atlassian team.  # noqa: E501

        :return: The capacity of this GetAtlassianTeamResponse.  # noqa: E501
        :rtype: float
        """
        return self._capacity

    @capacity.setter
    def capacity(self, capacity):
        """Sets the capacity of this GetAtlassianTeamResponse.

        The capacity for the Atlassian team.  # noqa: E501

        :param capacity: The capacity of this GetAtlassianTeamResponse.  # noqa: E501
        :type: float
        """

        self._capacity = capacity

    @property
    def id(self):
        """Gets the id of this GetAtlassianTeamResponse.  # noqa: E501

        The Atlassian team ID.  # noqa: E501

        :return: The id of this GetAtlassianTeamResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GetAtlassianTeamResponse.

        The Atlassian team ID.  # noqa: E501

        :param id: The id of this GetAtlassianTeamResponse.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def issue_source_id(self):
        """Gets the issue_source_id of this GetAtlassianTeamResponse.  # noqa: E501

        The ID of the issue source for the Atlassian team.  # noqa: E501

        :return: The issue_source_id of this GetAtlassianTeamResponse.  # noqa: E501
        :rtype: int
        """
        return self._issue_source_id

    @issue_source_id.setter
    def issue_source_id(self, issue_source_id):
        """Sets the issue_source_id of this GetAtlassianTeamResponse.

        The ID of the issue source for the Atlassian team.  # noqa: E501

        :param issue_source_id: The issue_source_id of this GetAtlassianTeamResponse.  # noqa: E501
        :type: int
        """

        self._issue_source_id = issue_source_id

    @property
    def planning_style(self):
        """Gets the planning_style of this GetAtlassianTeamResponse.  # noqa: E501

        The planning style for the Atlassian team. This is \"Scrum\" or \"Kanban\".  # noqa: E501

        :return: The planning_style of this GetAtlassianTeamResponse.  # noqa: E501
        :rtype: str
        """
        return self._planning_style

    @planning_style.setter
    def planning_style(self, planning_style):
        """Sets the planning_style of this GetAtlassianTeamResponse.

        The planning style for the Atlassian team. This is \"Scrum\" or \"Kanban\".  # noqa: E501

        :param planning_style: The planning_style of this GetAtlassianTeamResponse.  # noqa: E501
        :type: str
        """
        if planning_style is None:
            raise ValueError("Invalid value for `planning_style`, must not be `None`")  # noqa: E501
        allowed_values = ["Scrum", "Kanban"]  # noqa: E501
        if planning_style not in allowed_values:
            raise ValueError(
                "Invalid value for `planning_style` ({0}), must be one of {1}"  # noqa: E501
                .format(planning_style, allowed_values)
            )

        self._planning_style = planning_style

    @property
    def sprint_length(self):
        """Gets the sprint_length of this GetAtlassianTeamResponse.  # noqa: E501

        The sprint length for the Atlassian team.  # noqa: E501

        :return: The sprint_length of this GetAtlassianTeamResponse.  # noqa: E501
        :rtype: int
        """
        return self._sprint_length

    @sprint_length.setter
    def sprint_length(self, sprint_length):
        """Sets the sprint_length of this GetAtlassianTeamResponse.

        The sprint length for the Atlassian team.  # noqa: E501

        :param sprint_length: The sprint_length of this GetAtlassianTeamResponse.  # noqa: E501
        :type: int
        """

        self._sprint_length = sprint_length

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetAtlassianTeamResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetAtlassianTeamResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
