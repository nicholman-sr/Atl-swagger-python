# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GetPlanResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cross_project_releases': 'list[GetCrossProjectReleaseResponse]',
        'custom_fields': 'list[GetCustomFieldResponse]',
        'exclusion_rules': 'AllOfGetPlanResponseExclusionRules',
        'id': 'int',
        'issue_sources': 'list[GetIssueSourceResponse]',
        'last_saved': 'str',
        'lead_account_id': 'str',
        'name': 'str',
        'permissions': 'list[GetPermissionResponse]',
        'scheduling': 'AllOfGetPlanResponseScheduling',
        'status': 'str'
    }

    attribute_map = {
        'cross_project_releases': 'crossProjectReleases',
        'custom_fields': 'customFields',
        'exclusion_rules': 'exclusionRules',
        'id': 'id',
        'issue_sources': 'issueSources',
        'last_saved': 'lastSaved',
        'lead_account_id': 'leadAccountId',
        'name': 'name',
        'permissions': 'permissions',
        'scheduling': 'scheduling',
        'status': 'status'
    }

    def __init__(self, cross_project_releases=None, custom_fields=None, exclusion_rules=None, id=None, issue_sources=None, last_saved=None, lead_account_id=None, name=None, permissions=None, scheduling=None, status=None):  # noqa: E501
        """GetPlanResponse - a model defined in Swagger"""  # noqa: E501
        self._cross_project_releases = None
        self._custom_fields = None
        self._exclusion_rules = None
        self._id = None
        self._issue_sources = None
        self._last_saved = None
        self._lead_account_id = None
        self._name = None
        self._permissions = None
        self._scheduling = None
        self._status = None
        self.discriminator = None
        if cross_project_releases is not None:
            self.cross_project_releases = cross_project_releases
        if custom_fields is not None:
            self.custom_fields = custom_fields
        if exclusion_rules is not None:
            self.exclusion_rules = exclusion_rules
        self.id = id
        if issue_sources is not None:
            self.issue_sources = issue_sources
        if last_saved is not None:
            self.last_saved = last_saved
        if lead_account_id is not None:
            self.lead_account_id = lead_account_id
        if name is not None:
            self.name = name
        if permissions is not None:
            self.permissions = permissions
        self.scheduling = scheduling
        self.status = status

    @property
    def cross_project_releases(self):
        """Gets the cross_project_releases of this GetPlanResponse.  # noqa: E501

        The cross-project releases included in the plan.  # noqa: E501

        :return: The cross_project_releases of this GetPlanResponse.  # noqa: E501
        :rtype: list[GetCrossProjectReleaseResponse]
        """
        return self._cross_project_releases

    @cross_project_releases.setter
    def cross_project_releases(self, cross_project_releases):
        """Sets the cross_project_releases of this GetPlanResponse.

        The cross-project releases included in the plan.  # noqa: E501

        :param cross_project_releases: The cross_project_releases of this GetPlanResponse.  # noqa: E501
        :type: list[GetCrossProjectReleaseResponse]
        """

        self._cross_project_releases = cross_project_releases

    @property
    def custom_fields(self):
        """Gets the custom_fields of this GetPlanResponse.  # noqa: E501

        The custom fields for the plan.  # noqa: E501

        :return: The custom_fields of this GetPlanResponse.  # noqa: E501
        :rtype: list[GetCustomFieldResponse]
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this GetPlanResponse.

        The custom fields for the plan.  # noqa: E501

        :param custom_fields: The custom_fields of this GetPlanResponse.  # noqa: E501
        :type: list[GetCustomFieldResponse]
        """

        self._custom_fields = custom_fields

    @property
    def exclusion_rules(self):
        """Gets the exclusion_rules of this GetPlanResponse.  # noqa: E501

        The exclusion rules for the plan.  # noqa: E501

        :return: The exclusion_rules of this GetPlanResponse.  # noqa: E501
        :rtype: AllOfGetPlanResponseExclusionRules
        """
        return self._exclusion_rules

    @exclusion_rules.setter
    def exclusion_rules(self, exclusion_rules):
        """Sets the exclusion_rules of this GetPlanResponse.

        The exclusion rules for the plan.  # noqa: E501

        :param exclusion_rules: The exclusion_rules of this GetPlanResponse.  # noqa: E501
        :type: AllOfGetPlanResponseExclusionRules
        """

        self._exclusion_rules = exclusion_rules

    @property
    def id(self):
        """Gets the id of this GetPlanResponse.  # noqa: E501

        The plan ID.  # noqa: E501

        :return: The id of this GetPlanResponse.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GetPlanResponse.

        The plan ID.  # noqa: E501

        :param id: The id of this GetPlanResponse.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def issue_sources(self):
        """Gets the issue_sources of this GetPlanResponse.  # noqa: E501

        The issue sources included in the plan.  # noqa: E501

        :return: The issue_sources of this GetPlanResponse.  # noqa: E501
        :rtype: list[GetIssueSourceResponse]
        """
        return self._issue_sources

    @issue_sources.setter
    def issue_sources(self, issue_sources):
        """Sets the issue_sources of this GetPlanResponse.

        The issue sources included in the plan.  # noqa: E501

        :param issue_sources: The issue_sources of this GetPlanResponse.  # noqa: E501
        :type: list[GetIssueSourceResponse]
        """

        self._issue_sources = issue_sources

    @property
    def last_saved(self):
        """Gets the last_saved of this GetPlanResponse.  # noqa: E501

        The date when the plan was last saved in UTC.  # noqa: E501

        :return: The last_saved of this GetPlanResponse.  # noqa: E501
        :rtype: str
        """
        return self._last_saved

    @last_saved.setter
    def last_saved(self, last_saved):
        """Sets the last_saved of this GetPlanResponse.

        The date when the plan was last saved in UTC.  # noqa: E501

        :param last_saved: The last_saved of this GetPlanResponse.  # noqa: E501
        :type: str
        """

        self._last_saved = last_saved

    @property
    def lead_account_id(self):
        """Gets the lead_account_id of this GetPlanResponse.  # noqa: E501

        The account ID of the plan lead.  # noqa: E501

        :return: The lead_account_id of this GetPlanResponse.  # noqa: E501
        :rtype: str
        """
        return self._lead_account_id

    @lead_account_id.setter
    def lead_account_id(self, lead_account_id):
        """Sets the lead_account_id of this GetPlanResponse.

        The account ID of the plan lead.  # noqa: E501

        :param lead_account_id: The lead_account_id of this GetPlanResponse.  # noqa: E501
        :type: str
        """

        self._lead_account_id = lead_account_id

    @property
    def name(self):
        """Gets the name of this GetPlanResponse.  # noqa: E501

        The plan name.  # noqa: E501

        :return: The name of this GetPlanResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetPlanResponse.

        The plan name.  # noqa: E501

        :param name: The name of this GetPlanResponse.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def permissions(self):
        """Gets the permissions of this GetPlanResponse.  # noqa: E501

        The permissions for the plan.  # noqa: E501

        :return: The permissions of this GetPlanResponse.  # noqa: E501
        :rtype: list[GetPermissionResponse]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this GetPlanResponse.

        The permissions for the plan.  # noqa: E501

        :param permissions: The permissions of this GetPlanResponse.  # noqa: E501
        :type: list[GetPermissionResponse]
        """

        self._permissions = permissions

    @property
    def scheduling(self):
        """Gets the scheduling of this GetPlanResponse.  # noqa: E501

        The scheduling settings for the plan.  # noqa: E501

        :return: The scheduling of this GetPlanResponse.  # noqa: E501
        :rtype: AllOfGetPlanResponseScheduling
        """
        return self._scheduling

    @scheduling.setter
    def scheduling(self, scheduling):
        """Sets the scheduling of this GetPlanResponse.

        The scheduling settings for the plan.  # noqa: E501

        :param scheduling: The scheduling of this GetPlanResponse.  # noqa: E501
        :type: AllOfGetPlanResponseScheduling
        """
        if scheduling is None:
            raise ValueError("Invalid value for `scheduling`, must not be `None`")  # noqa: E501

        self._scheduling = scheduling

    @property
    def status(self):
        """Gets the status of this GetPlanResponse.  # noqa: E501

        The plan status. This is \"Active\", \"Trashed\" or \"Archived\".  # noqa: E501

        :return: The status of this GetPlanResponse.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this GetPlanResponse.

        The plan status. This is \"Active\", \"Trashed\" or \"Archived\".  # noqa: E501

        :param status: The status of this GetPlanResponse.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = ["Active", "Trashed", "Archived"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetPlanResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetPlanResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
