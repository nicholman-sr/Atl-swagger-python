# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IssueFieldOption(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'config': 'IssueFieldOptionConfiguration',
        'id': 'int',
        'properties': 'dict(str, object)',
        'value': 'str'
    }

    attribute_map = {
        'config': 'config',
        'id': 'id',
        'properties': 'properties',
        'value': 'value'
    }

    def __init__(self, config=None, id=None, properties=None, value=None):  # noqa: E501
        """IssueFieldOption - a model defined in Swagger"""  # noqa: E501
        self._config = None
        self._id = None
        self._properties = None
        self._value = None
        self.discriminator = None
        if config is not None:
            self.config = config
        self.id = id
        if properties is not None:
            self.properties = properties
        self.value = value

    @property
    def config(self):
        """Gets the config of this IssueFieldOption.  # noqa: E501


        :return: The config of this IssueFieldOption.  # noqa: E501
        :rtype: IssueFieldOptionConfiguration
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this IssueFieldOption.


        :param config: The config of this IssueFieldOption.  # noqa: E501
        :type: IssueFieldOptionConfiguration
        """

        self._config = config

    @property
    def id(self):
        """Gets the id of this IssueFieldOption.  # noqa: E501

        The unique identifier for the option. This is only unique within the select field's set of options.  # noqa: E501

        :return: The id of this IssueFieldOption.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this IssueFieldOption.

        The unique identifier for the option. This is only unique within the select field's set of options.  # noqa: E501

        :param id: The id of this IssueFieldOption.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def properties(self):
        """Gets the properties of this IssueFieldOption.  # noqa: E501

        The properties of the object, as arbitrary key-value pairs. These properties can be searched using JQL, if the extractions (see [Issue Field Option Property Index](https://developer.atlassian.com/cloud/jira/platform/modules/issue-field-option-property-index/)) are defined in the descriptor for the issue field module.  # noqa: E501

        :return: The properties of this IssueFieldOption.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this IssueFieldOption.

        The properties of the object, as arbitrary key-value pairs. These properties can be searched using JQL, if the extractions (see [Issue Field Option Property Index](https://developer.atlassian.com/cloud/jira/platform/modules/issue-field-option-property-index/)) are defined in the descriptor for the issue field module.  # noqa: E501

        :param properties: The properties of this IssueFieldOption.  # noqa: E501
        :type: dict(str, object)
        """

        self._properties = properties

    @property
    def value(self):
        """Gets the value of this IssueFieldOption.  # noqa: E501

        The option's name, which is displayed in Jira.  # noqa: E501

        :return: The value of this IssueFieldOption.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this IssueFieldOption.

        The option's name, which is displayed in Jira.  # noqa: E501

        :param value: The value of this IssueFieldOption.  # noqa: E501
        :type: str
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IssueFieldOption, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IssueFieldOption):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
