# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IssuePickerSuggestionsIssueType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'issues': 'list[SuggestedIssue]',
        'label': 'str',
        'msg': 'str',
        'sub': 'str'
    }

    attribute_map = {
        'id': 'id',
        'issues': 'issues',
        'label': 'label',
        'msg': 'msg',
        'sub': 'sub'
    }

    def __init__(self, id=None, issues=None, label=None, msg=None, sub=None):  # noqa: E501
        """IssuePickerSuggestionsIssueType - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._issues = None
        self._label = None
        self._msg = None
        self._sub = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if issues is not None:
            self.issues = issues
        if label is not None:
            self.label = label
        if msg is not None:
            self.msg = msg
        if sub is not None:
            self.sub = sub

    @property
    def id(self):
        """Gets the id of this IssuePickerSuggestionsIssueType.  # noqa: E501

        The ID of the type of issues suggested for use in auto-completion.  # noqa: E501

        :return: The id of this IssuePickerSuggestionsIssueType.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this IssuePickerSuggestionsIssueType.

        The ID of the type of issues suggested for use in auto-completion.  # noqa: E501

        :param id: The id of this IssuePickerSuggestionsIssueType.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def issues(self):
        """Gets the issues of this IssuePickerSuggestionsIssueType.  # noqa: E501

        A list of issues suggested for use in auto-completion.  # noqa: E501

        :return: The issues of this IssuePickerSuggestionsIssueType.  # noqa: E501
        :rtype: list[SuggestedIssue]
        """
        return self._issues

    @issues.setter
    def issues(self, issues):
        """Sets the issues of this IssuePickerSuggestionsIssueType.

        A list of issues suggested for use in auto-completion.  # noqa: E501

        :param issues: The issues of this IssuePickerSuggestionsIssueType.  # noqa: E501
        :type: list[SuggestedIssue]
        """

        self._issues = issues

    @property
    def label(self):
        """Gets the label of this IssuePickerSuggestionsIssueType.  # noqa: E501

        The label of the type of issues suggested for use in auto-completion.  # noqa: E501

        :return: The label of this IssuePickerSuggestionsIssueType.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this IssuePickerSuggestionsIssueType.

        The label of the type of issues suggested for use in auto-completion.  # noqa: E501

        :param label: The label of this IssuePickerSuggestionsIssueType.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def msg(self):
        """Gets the msg of this IssuePickerSuggestionsIssueType.  # noqa: E501

        If no issue suggestions are found, returns a message indicating no suggestions were found,  # noqa: E501

        :return: The msg of this IssuePickerSuggestionsIssueType.  # noqa: E501
        :rtype: str
        """
        return self._msg

    @msg.setter
    def msg(self, msg):
        """Sets the msg of this IssuePickerSuggestionsIssueType.

        If no issue suggestions are found, returns a message indicating no suggestions were found,  # noqa: E501

        :param msg: The msg of this IssuePickerSuggestionsIssueType.  # noqa: E501
        :type: str
        """

        self._msg = msg

    @property
    def sub(self):
        """Gets the sub of this IssuePickerSuggestionsIssueType.  # noqa: E501

        If issue suggestions are found, returns a message indicating the number of issues suggestions found and returned.  # noqa: E501

        :return: The sub of this IssuePickerSuggestionsIssueType.  # noqa: E501
        :rtype: str
        """
        return self._sub

    @sub.setter
    def sub(self, sub):
        """Sets the sub of this IssuePickerSuggestionsIssueType.

        If issue suggestions are found, returns a message indicating the number of issues suggestions found and returned.  # noqa: E501

        :param sub: The sub of this IssuePickerSuggestionsIssueType.  # noqa: E501
        :type: str
        """

        self._sub = sub

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IssuePickerSuggestionsIssueType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IssuePickerSuggestionsIssueType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
