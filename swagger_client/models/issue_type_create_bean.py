# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IssueTypeCreateBean(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'hierarchy_level': 'int',
        'name': 'str',
        'type': 'str'
    }

    attribute_map = {
        'description': 'description',
        'hierarchy_level': 'hierarchyLevel',
        'name': 'name',
        'type': 'type'
    }

    def __init__(self, description=None, hierarchy_level=None, name=None, type=None):  # noqa: E501
        """IssueTypeCreateBean - a model defined in Swagger"""  # noqa: E501
        self._description = None
        self._hierarchy_level = None
        self._name = None
        self._type = None
        self.discriminator = None
        if description is not None:
            self.description = description
        if hierarchy_level is not None:
            self.hierarchy_level = hierarchy_level
        self.name = name
        if type is not None:
            self.type = type

    @property
    def description(self):
        """Gets the description of this IssueTypeCreateBean.  # noqa: E501

        The description of the issue type.  # noqa: E501

        :return: The description of this IssueTypeCreateBean.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this IssueTypeCreateBean.

        The description of the issue type.  # noqa: E501

        :param description: The description of this IssueTypeCreateBean.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def hierarchy_level(self):
        """Gets the hierarchy_level of this IssueTypeCreateBean.  # noqa: E501

        The hierarchy level of the issue type. Use:   *  `-1` for Subtask.  *  `0` for Base.  Defaults to `0`.  # noqa: E501

        :return: The hierarchy_level of this IssueTypeCreateBean.  # noqa: E501
        :rtype: int
        """
        return self._hierarchy_level

    @hierarchy_level.setter
    def hierarchy_level(self, hierarchy_level):
        """Sets the hierarchy_level of this IssueTypeCreateBean.

        The hierarchy level of the issue type. Use:   *  `-1` for Subtask.  *  `0` for Base.  Defaults to `0`.  # noqa: E501

        :param hierarchy_level: The hierarchy_level of this IssueTypeCreateBean.  # noqa: E501
        :type: int
        """

        self._hierarchy_level = hierarchy_level

    @property
    def name(self):
        """Gets the name of this IssueTypeCreateBean.  # noqa: E501

        The unique name for the issue type. The maximum length is 60 characters.  # noqa: E501

        :return: The name of this IssueTypeCreateBean.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IssueTypeCreateBean.

        The unique name for the issue type. The maximum length is 60 characters.  # noqa: E501

        :param name: The name of this IssueTypeCreateBean.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def type(self):
        """Gets the type of this IssueTypeCreateBean.  # noqa: E501

        Deprecated. Use `hierarchyLevel` instead. See the [deprecation notice](https://community.developer.atlassian.com/t/deprecation-of-the-epic-link-parent-link-and-other-related-fields-in-rest-apis-and-webhooks/54048) for details.  Whether the issue type is `subtype` or `standard`. Defaults to `standard`.  # noqa: E501

        :return: The type of this IssueTypeCreateBean.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this IssueTypeCreateBean.

        Deprecated. Use `hierarchyLevel` instead. See the [deprecation notice](https://community.developer.atlassian.com/t/deprecation-of-the-epic-link-parent-link-and-other-related-fields-in-rest-apis-and-webhooks/54048) for details.  Whether the issue type is `subtype` or `standard`. Defaults to `standard`.  # noqa: E501

        :param type: The type of this IssueTypeCreateBean.  # noqa: E501
        :type: str
        """
        allowed_values = ["subtask", "standard"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IssueTypeCreateBean, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IssueTypeCreateBean):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
