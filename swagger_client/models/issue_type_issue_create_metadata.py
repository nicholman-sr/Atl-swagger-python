# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IssueTypeIssueCreateMetadata(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'avatar_id': 'int',
        'description': 'str',
        'entity_id': 'str',
        'expand': 'str',
        'fields': 'dict(str, FieldMetadata)',
        'hierarchy_level': 'int',
        'icon_url': 'str',
        'id': 'str',
        'name': 'str',
        'scope': 'AllOfIssueTypeIssueCreateMetadataScope',
        '_self': 'str',
        'subtask': 'bool'
    }

    attribute_map = {
        'avatar_id': 'avatarId',
        'description': 'description',
        'entity_id': 'entityId',
        'expand': 'expand',
        'fields': 'fields',
        'hierarchy_level': 'hierarchyLevel',
        'icon_url': 'iconUrl',
        'id': 'id',
        'name': 'name',
        'scope': 'scope',
        '_self': 'self',
        'subtask': 'subtask'
    }

    def __init__(self, avatar_id=None, description=None, entity_id=None, expand=None, fields=None, hierarchy_level=None, icon_url=None, id=None, name=None, scope=None, _self=None, subtask=None):  # noqa: E501
        """IssueTypeIssueCreateMetadata - a model defined in Swagger"""  # noqa: E501
        self._avatar_id = None
        self._description = None
        self._entity_id = None
        self._expand = None
        self._fields = None
        self._hierarchy_level = None
        self._icon_url = None
        self._id = None
        self._name = None
        self._scope = None
        self.__self = None
        self._subtask = None
        self.discriminator = None
        if avatar_id is not None:
            self.avatar_id = avatar_id
        if description is not None:
            self.description = description
        if entity_id is not None:
            self.entity_id = entity_id
        if expand is not None:
            self.expand = expand
        if fields is not None:
            self.fields = fields
        if hierarchy_level is not None:
            self.hierarchy_level = hierarchy_level
        if icon_url is not None:
            self.icon_url = icon_url
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if scope is not None:
            self.scope = scope
        if _self is not None:
            self._self = _self
        if subtask is not None:
            self.subtask = subtask

    @property
    def avatar_id(self):
        """Gets the avatar_id of this IssueTypeIssueCreateMetadata.  # noqa: E501

        The ID of the issue type's avatar.  # noqa: E501

        :return: The avatar_id of this IssueTypeIssueCreateMetadata.  # noqa: E501
        :rtype: int
        """
        return self._avatar_id

    @avatar_id.setter
    def avatar_id(self, avatar_id):
        """Sets the avatar_id of this IssueTypeIssueCreateMetadata.

        The ID of the issue type's avatar.  # noqa: E501

        :param avatar_id: The avatar_id of this IssueTypeIssueCreateMetadata.  # noqa: E501
        :type: int
        """

        self._avatar_id = avatar_id

    @property
    def description(self):
        """Gets the description of this IssueTypeIssueCreateMetadata.  # noqa: E501

        The description of the issue type.  # noqa: E501

        :return: The description of this IssueTypeIssueCreateMetadata.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this IssueTypeIssueCreateMetadata.

        The description of the issue type.  # noqa: E501

        :param description: The description of this IssueTypeIssueCreateMetadata.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def entity_id(self):
        """Gets the entity_id of this IssueTypeIssueCreateMetadata.  # noqa: E501

        Unique ID for next-gen projects.  # noqa: E501

        :return: The entity_id of this IssueTypeIssueCreateMetadata.  # noqa: E501
        :rtype: str
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this IssueTypeIssueCreateMetadata.

        Unique ID for next-gen projects.  # noqa: E501

        :param entity_id: The entity_id of this IssueTypeIssueCreateMetadata.  # noqa: E501
        :type: str
        """

        self._entity_id = entity_id

    @property
    def expand(self):
        """Gets the expand of this IssueTypeIssueCreateMetadata.  # noqa: E501

        Expand options that include additional issue type metadata details in the response.  # noqa: E501

        :return: The expand of this IssueTypeIssueCreateMetadata.  # noqa: E501
        :rtype: str
        """
        return self._expand

    @expand.setter
    def expand(self, expand):
        """Sets the expand of this IssueTypeIssueCreateMetadata.

        Expand options that include additional issue type metadata details in the response.  # noqa: E501

        :param expand: The expand of this IssueTypeIssueCreateMetadata.  # noqa: E501
        :type: str
        """

        self._expand = expand

    @property
    def fields(self):
        """Gets the fields of this IssueTypeIssueCreateMetadata.  # noqa: E501

        List of the fields available when creating an issue for the issue type.  # noqa: E501

        :return: The fields of this IssueTypeIssueCreateMetadata.  # noqa: E501
        :rtype: dict(str, FieldMetadata)
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this IssueTypeIssueCreateMetadata.

        List of the fields available when creating an issue for the issue type.  # noqa: E501

        :param fields: The fields of this IssueTypeIssueCreateMetadata.  # noqa: E501
        :type: dict(str, FieldMetadata)
        """

        self._fields = fields

    @property
    def hierarchy_level(self):
        """Gets the hierarchy_level of this IssueTypeIssueCreateMetadata.  # noqa: E501

        Hierarchy level of the issue type.  # noqa: E501

        :return: The hierarchy_level of this IssueTypeIssueCreateMetadata.  # noqa: E501
        :rtype: int
        """
        return self._hierarchy_level

    @hierarchy_level.setter
    def hierarchy_level(self, hierarchy_level):
        """Sets the hierarchy_level of this IssueTypeIssueCreateMetadata.

        Hierarchy level of the issue type.  # noqa: E501

        :param hierarchy_level: The hierarchy_level of this IssueTypeIssueCreateMetadata.  # noqa: E501
        :type: int
        """

        self._hierarchy_level = hierarchy_level

    @property
    def icon_url(self):
        """Gets the icon_url of this IssueTypeIssueCreateMetadata.  # noqa: E501

        The URL of the issue type's avatar.  # noqa: E501

        :return: The icon_url of this IssueTypeIssueCreateMetadata.  # noqa: E501
        :rtype: str
        """
        return self._icon_url

    @icon_url.setter
    def icon_url(self, icon_url):
        """Sets the icon_url of this IssueTypeIssueCreateMetadata.

        The URL of the issue type's avatar.  # noqa: E501

        :param icon_url: The icon_url of this IssueTypeIssueCreateMetadata.  # noqa: E501
        :type: str
        """

        self._icon_url = icon_url

    @property
    def id(self):
        """Gets the id of this IssueTypeIssueCreateMetadata.  # noqa: E501

        The ID of the issue type.  # noqa: E501

        :return: The id of this IssueTypeIssueCreateMetadata.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this IssueTypeIssueCreateMetadata.

        The ID of the issue type.  # noqa: E501

        :param id: The id of this IssueTypeIssueCreateMetadata.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this IssueTypeIssueCreateMetadata.  # noqa: E501

        The name of the issue type.  # noqa: E501

        :return: The name of this IssueTypeIssueCreateMetadata.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IssueTypeIssueCreateMetadata.

        The name of the issue type.  # noqa: E501

        :param name: The name of this IssueTypeIssueCreateMetadata.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def scope(self):
        """Gets the scope of this IssueTypeIssueCreateMetadata.  # noqa: E501

        Details of the next-gen projects the issue type is available in.  # noqa: E501

        :return: The scope of this IssueTypeIssueCreateMetadata.  # noqa: E501
        :rtype: AllOfIssueTypeIssueCreateMetadataScope
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this IssueTypeIssueCreateMetadata.

        Details of the next-gen projects the issue type is available in.  # noqa: E501

        :param scope: The scope of this IssueTypeIssueCreateMetadata.  # noqa: E501
        :type: AllOfIssueTypeIssueCreateMetadataScope
        """

        self._scope = scope

    @property
    def _self(self):
        """Gets the _self of this IssueTypeIssueCreateMetadata.  # noqa: E501

        The URL of these issue type details.  # noqa: E501

        :return: The _self of this IssueTypeIssueCreateMetadata.  # noqa: E501
        :rtype: str
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this IssueTypeIssueCreateMetadata.

        The URL of these issue type details.  # noqa: E501

        :param _self: The _self of this IssueTypeIssueCreateMetadata.  # noqa: E501
        :type: str
        """

        self.__self = _self

    @property
    def subtask(self):
        """Gets the subtask of this IssueTypeIssueCreateMetadata.  # noqa: E501

        Whether this issue type is used to create subtasks.  # noqa: E501

        :return: The subtask of this IssueTypeIssueCreateMetadata.  # noqa: E501
        :rtype: bool
        """
        return self._subtask

    @subtask.setter
    def subtask(self, subtask):
        """Sets the subtask of this IssueTypeIssueCreateMetadata.

        Whether this issue type is used to create subtasks.  # noqa: E501

        :param subtask: The subtask of this IssueTypeIssueCreateMetadata.  # noqa: E501
        :type: bool
        """

        self._subtask = subtask

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IssueTypeIssueCreateMetadata, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IssueTypeIssueCreateMetadata):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
