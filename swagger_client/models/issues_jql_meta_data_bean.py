# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IssuesJqlMetaDataBean(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'count': 'int',
        'max_results': 'int',
        'start_at': 'int',
        'total_count': 'int',
        'validation_warnings': 'list[str]'
    }

    attribute_map = {
        'count': 'count',
        'max_results': 'maxResults',
        'start_at': 'startAt',
        'total_count': 'totalCount',
        'validation_warnings': 'validationWarnings'
    }

    def __init__(self, count=None, max_results=None, start_at=None, total_count=None, validation_warnings=None):  # noqa: E501
        """IssuesJqlMetaDataBean - a model defined in Swagger"""  # noqa: E501
        self._count = None
        self._max_results = None
        self._start_at = None
        self._total_count = None
        self._validation_warnings = None
        self.discriminator = None
        self.count = count
        self.max_results = max_results
        self.start_at = start_at
        self.total_count = total_count
        if validation_warnings is not None:
            self.validation_warnings = validation_warnings

    @property
    def count(self):
        """Gets the count of this IssuesJqlMetaDataBean.  # noqa: E501

        The number of issues that were loaded in this evaluation.  # noqa: E501

        :return: The count of this IssuesJqlMetaDataBean.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this IssuesJqlMetaDataBean.

        The number of issues that were loaded in this evaluation.  # noqa: E501

        :param count: The count of this IssuesJqlMetaDataBean.  # noqa: E501
        :type: int
        """
        if count is None:
            raise ValueError("Invalid value for `count`, must not be `None`")  # noqa: E501

        self._count = count

    @property
    def max_results(self):
        """Gets the max_results of this IssuesJqlMetaDataBean.  # noqa: E501

        The maximum number of issues that could be loaded in this evaluation.  # noqa: E501

        :return: The max_results of this IssuesJqlMetaDataBean.  # noqa: E501
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this IssuesJqlMetaDataBean.

        The maximum number of issues that could be loaded in this evaluation.  # noqa: E501

        :param max_results: The max_results of this IssuesJqlMetaDataBean.  # noqa: E501
        :type: int
        """
        if max_results is None:
            raise ValueError("Invalid value for `max_results`, must not be `None`")  # noqa: E501

        self._max_results = max_results

    @property
    def start_at(self):
        """Gets the start_at of this IssuesJqlMetaDataBean.  # noqa: E501

        The index of the first issue.  # noqa: E501

        :return: The start_at of this IssuesJqlMetaDataBean.  # noqa: E501
        :rtype: int
        """
        return self._start_at

    @start_at.setter
    def start_at(self, start_at):
        """Sets the start_at of this IssuesJqlMetaDataBean.

        The index of the first issue.  # noqa: E501

        :param start_at: The start_at of this IssuesJqlMetaDataBean.  # noqa: E501
        :type: int
        """
        if start_at is None:
            raise ValueError("Invalid value for `start_at`, must not be `None`")  # noqa: E501

        self._start_at = start_at

    @property
    def total_count(self):
        """Gets the total_count of this IssuesJqlMetaDataBean.  # noqa: E501

        The total number of issues the JQL returned.  # noqa: E501

        :return: The total_count of this IssuesJqlMetaDataBean.  # noqa: E501
        :rtype: int
        """
        return self._total_count

    @total_count.setter
    def total_count(self, total_count):
        """Sets the total_count of this IssuesJqlMetaDataBean.

        The total number of issues the JQL returned.  # noqa: E501

        :param total_count: The total_count of this IssuesJqlMetaDataBean.  # noqa: E501
        :type: int
        """
        if total_count is None:
            raise ValueError("Invalid value for `total_count`, must not be `None`")  # noqa: E501

        self._total_count = total_count

    @property
    def validation_warnings(self):
        """Gets the validation_warnings of this IssuesJqlMetaDataBean.  # noqa: E501

        Any warnings related to the JQL query. Present only if the validation mode was set to `warn`.  # noqa: E501

        :return: The validation_warnings of this IssuesJqlMetaDataBean.  # noqa: E501
        :rtype: list[str]
        """
        return self._validation_warnings

    @validation_warnings.setter
    def validation_warnings(self, validation_warnings):
        """Sets the validation_warnings of this IssuesJqlMetaDataBean.

        Any warnings related to the JQL query. Present only if the validation mode was set to `warn`.  # noqa: E501

        :param validation_warnings: The validation_warnings of this IssuesJqlMetaDataBean.  # noqa: E501
        :type: list[str]
        """

        self._validation_warnings = validation_warnings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IssuesJqlMetaDataBean, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IssuesJqlMetaDataBean):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
