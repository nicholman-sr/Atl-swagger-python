# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class JiraWorkflow(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created': 'str',
        'description': 'str',
        'id': 'str',
        'is_editable': 'bool',
        'looped_transition_container_layout': 'WorkflowLayout',
        'name': 'str',
        'scope': 'WorkflowScope',
        'start_point_layout': 'WorkflowLayout',
        'statuses': 'list[WorkflowReferenceStatus]',
        'task_id': 'str',
        'transitions': 'list[WorkflowTransitions]',
        'updated': 'str',
        'version': 'DocumentVersion'
    }

    attribute_map = {
        'created': 'created',
        'description': 'description',
        'id': 'id',
        'is_editable': 'isEditable',
        'looped_transition_container_layout': 'loopedTransitionContainerLayout',
        'name': 'name',
        'scope': 'scope',
        'start_point_layout': 'startPointLayout',
        'statuses': 'statuses',
        'task_id': 'taskId',
        'transitions': 'transitions',
        'updated': 'updated',
        'version': 'version'
    }

    def __init__(self, created=None, description=None, id=None, is_editable=None, looped_transition_container_layout=None, name=None, scope=None, start_point_layout=None, statuses=None, task_id=None, transitions=None, updated=None, version=None):  # noqa: E501
        """JiraWorkflow - a model defined in Swagger"""  # noqa: E501
        self._created = None
        self._description = None
        self._id = None
        self._is_editable = None
        self._looped_transition_container_layout = None
        self._name = None
        self._scope = None
        self._start_point_layout = None
        self._statuses = None
        self._task_id = None
        self._transitions = None
        self._updated = None
        self._version = None
        self.discriminator = None
        if created is not None:
            self.created = created
        if description is not None:
            self.description = description
        if id is not None:
            self.id = id
        if is_editable is not None:
            self.is_editable = is_editable
        if looped_transition_container_layout is not None:
            self.looped_transition_container_layout = looped_transition_container_layout
        if name is not None:
            self.name = name
        if scope is not None:
            self.scope = scope
        if start_point_layout is not None:
            self.start_point_layout = start_point_layout
        if statuses is not None:
            self.statuses = statuses
        if task_id is not None:
            self.task_id = task_id
        if transitions is not None:
            self.transitions = transitions
        if updated is not None:
            self.updated = updated
        if version is not None:
            self.version = version

    @property
    def created(self):
        """Gets the created of this JiraWorkflow.  # noqa: E501

        The creation date of the workflow.  # noqa: E501

        :return: The created of this JiraWorkflow.  # noqa: E501
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this JiraWorkflow.

        The creation date of the workflow.  # noqa: E501

        :param created: The created of this JiraWorkflow.  # noqa: E501
        :type: str
        """

        self._created = created

    @property
    def description(self):
        """Gets the description of this JiraWorkflow.  # noqa: E501

        The description of the workflow.  # noqa: E501

        :return: The description of this JiraWorkflow.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this JiraWorkflow.

        The description of the workflow.  # noqa: E501

        :param description: The description of this JiraWorkflow.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this JiraWorkflow.  # noqa: E501

        The ID of the workflow.  # noqa: E501

        :return: The id of this JiraWorkflow.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this JiraWorkflow.

        The ID of the workflow.  # noqa: E501

        :param id: The id of this JiraWorkflow.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def is_editable(self):
        """Gets the is_editable of this JiraWorkflow.  # noqa: E501

        Indicates if the workflow can be edited.  # noqa: E501

        :return: The is_editable of this JiraWorkflow.  # noqa: E501
        :rtype: bool
        """
        return self._is_editable

    @is_editable.setter
    def is_editable(self, is_editable):
        """Sets the is_editable of this JiraWorkflow.

        Indicates if the workflow can be edited.  # noqa: E501

        :param is_editable: The is_editable of this JiraWorkflow.  # noqa: E501
        :type: bool
        """

        self._is_editable = is_editable

    @property
    def looped_transition_container_layout(self):
        """Gets the looped_transition_container_layout of this JiraWorkflow.  # noqa: E501


        :return: The looped_transition_container_layout of this JiraWorkflow.  # noqa: E501
        :rtype: WorkflowLayout
        """
        return self._looped_transition_container_layout

    @looped_transition_container_layout.setter
    def looped_transition_container_layout(self, looped_transition_container_layout):
        """Sets the looped_transition_container_layout of this JiraWorkflow.


        :param looped_transition_container_layout: The looped_transition_container_layout of this JiraWorkflow.  # noqa: E501
        :type: WorkflowLayout
        """

        self._looped_transition_container_layout = looped_transition_container_layout

    @property
    def name(self):
        """Gets the name of this JiraWorkflow.  # noqa: E501

        The name of the workflow.  # noqa: E501

        :return: The name of this JiraWorkflow.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this JiraWorkflow.

        The name of the workflow.  # noqa: E501

        :param name: The name of this JiraWorkflow.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def scope(self):
        """Gets the scope of this JiraWorkflow.  # noqa: E501


        :return: The scope of this JiraWorkflow.  # noqa: E501
        :rtype: WorkflowScope
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this JiraWorkflow.


        :param scope: The scope of this JiraWorkflow.  # noqa: E501
        :type: WorkflowScope
        """

        self._scope = scope

    @property
    def start_point_layout(self):
        """Gets the start_point_layout of this JiraWorkflow.  # noqa: E501


        :return: The start_point_layout of this JiraWorkflow.  # noqa: E501
        :rtype: WorkflowLayout
        """
        return self._start_point_layout

    @start_point_layout.setter
    def start_point_layout(self, start_point_layout):
        """Sets the start_point_layout of this JiraWorkflow.


        :param start_point_layout: The start_point_layout of this JiraWorkflow.  # noqa: E501
        :type: WorkflowLayout
        """

        self._start_point_layout = start_point_layout

    @property
    def statuses(self):
        """Gets the statuses of this JiraWorkflow.  # noqa: E501

        The statuses referenced in this workflow.  # noqa: E501

        :return: The statuses of this JiraWorkflow.  # noqa: E501
        :rtype: list[WorkflowReferenceStatus]
        """
        return self._statuses

    @statuses.setter
    def statuses(self, statuses):
        """Sets the statuses of this JiraWorkflow.

        The statuses referenced in this workflow.  # noqa: E501

        :param statuses: The statuses of this JiraWorkflow.  # noqa: E501
        :type: list[WorkflowReferenceStatus]
        """

        self._statuses = statuses

    @property
    def task_id(self):
        """Gets the task_id of this JiraWorkflow.  # noqa: E501

        If there is a current [asynchronous task](#async-operations) operation for this workflow.  # noqa: E501

        :return: The task_id of this JiraWorkflow.  # noqa: E501
        :rtype: str
        """
        return self._task_id

    @task_id.setter
    def task_id(self, task_id):
        """Sets the task_id of this JiraWorkflow.

        If there is a current [asynchronous task](#async-operations) operation for this workflow.  # noqa: E501

        :param task_id: The task_id of this JiraWorkflow.  # noqa: E501
        :type: str
        """

        self._task_id = task_id

    @property
    def transitions(self):
        """Gets the transitions of this JiraWorkflow.  # noqa: E501

        The transitions of the workflow. Note that a transition can have either the deprecated `to`/`from` fields or the `toStatusReference`/`links` fields, but never both nor a combination.  # noqa: E501

        :return: The transitions of this JiraWorkflow.  # noqa: E501
        :rtype: list[WorkflowTransitions]
        """
        return self._transitions

    @transitions.setter
    def transitions(self, transitions):
        """Sets the transitions of this JiraWorkflow.

        The transitions of the workflow. Note that a transition can have either the deprecated `to`/`from` fields or the `toStatusReference`/`links` fields, but never both nor a combination.  # noqa: E501

        :param transitions: The transitions of this JiraWorkflow.  # noqa: E501
        :type: list[WorkflowTransitions]
        """

        self._transitions = transitions

    @property
    def updated(self):
        """Gets the updated of this JiraWorkflow.  # noqa: E501

        The last edited date of the workflow.  # noqa: E501

        :return: The updated of this JiraWorkflow.  # noqa: E501
        :rtype: str
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this JiraWorkflow.

        The last edited date of the workflow.  # noqa: E501

        :param updated: The updated of this JiraWorkflow.  # noqa: E501
        :type: str
        """

        self._updated = updated

    @property
    def version(self):
        """Gets the version of this JiraWorkflow.  # noqa: E501


        :return: The version of this JiraWorkflow.  # noqa: E501
        :rtype: DocumentVersion
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this JiraWorkflow.


        :param version: The version of this JiraWorkflow.  # noqa: E501
        :type: DocumentVersion
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JiraWorkflow, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JiraWorkflow):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
