# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class JQLReferenceData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'jql_reserved_words': 'list[str]',
        'visible_field_names': 'list[FieldReferenceData]',
        'visible_function_names': 'list[FunctionReferenceData]'
    }

    attribute_map = {
        'jql_reserved_words': 'jqlReservedWords',
        'visible_field_names': 'visibleFieldNames',
        'visible_function_names': 'visibleFunctionNames'
    }

    def __init__(self, jql_reserved_words=None, visible_field_names=None, visible_function_names=None):  # noqa: E501
        """JQLReferenceData - a model defined in Swagger"""  # noqa: E501
        self._jql_reserved_words = None
        self._visible_field_names = None
        self._visible_function_names = None
        self.discriminator = None
        if jql_reserved_words is not None:
            self.jql_reserved_words = jql_reserved_words
        if visible_field_names is not None:
            self.visible_field_names = visible_field_names
        if visible_function_names is not None:
            self.visible_function_names = visible_function_names

    @property
    def jql_reserved_words(self):
        """Gets the jql_reserved_words of this JQLReferenceData.  # noqa: E501

        List of JQL query reserved words.  # noqa: E501

        :return: The jql_reserved_words of this JQLReferenceData.  # noqa: E501
        :rtype: list[str]
        """
        return self._jql_reserved_words

    @jql_reserved_words.setter
    def jql_reserved_words(self, jql_reserved_words):
        """Sets the jql_reserved_words of this JQLReferenceData.

        List of JQL query reserved words.  # noqa: E501

        :param jql_reserved_words: The jql_reserved_words of this JQLReferenceData.  # noqa: E501
        :type: list[str]
        """

        self._jql_reserved_words = jql_reserved_words

    @property
    def visible_field_names(self):
        """Gets the visible_field_names of this JQLReferenceData.  # noqa: E501

        List of fields usable in JQL queries.  # noqa: E501

        :return: The visible_field_names of this JQLReferenceData.  # noqa: E501
        :rtype: list[FieldReferenceData]
        """
        return self._visible_field_names

    @visible_field_names.setter
    def visible_field_names(self, visible_field_names):
        """Sets the visible_field_names of this JQLReferenceData.

        List of fields usable in JQL queries.  # noqa: E501

        :param visible_field_names: The visible_field_names of this JQLReferenceData.  # noqa: E501
        :type: list[FieldReferenceData]
        """

        self._visible_field_names = visible_field_names

    @property
    def visible_function_names(self):
        """Gets the visible_function_names of this JQLReferenceData.  # noqa: E501

        List of functions usable in JQL queries.  # noqa: E501

        :return: The visible_function_names of this JQLReferenceData.  # noqa: E501
        :rtype: list[FunctionReferenceData]
        """
        return self._visible_function_names

    @visible_function_names.setter
    def visible_function_names(self, visible_function_names):
        """Sets the visible_function_names of this JQLReferenceData.

        List of functions usable in JQL queries.  # noqa: E501

        :param visible_function_names: The visible_function_names of this JQLReferenceData.  # noqa: E501
        :type: list[FunctionReferenceData]
        """

        self._visible_function_names = visible_function_names

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JQLReferenceData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JQLReferenceData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
