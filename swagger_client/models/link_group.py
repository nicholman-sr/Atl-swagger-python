# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LinkGroup(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'groups': 'list[LinkGroup]',
        'header': 'SimpleLink',
        'id': 'str',
        'links': 'list[SimpleLink]',
        'style_class': 'str',
        'weight': 'int'
    }

    attribute_map = {
        'groups': 'groups',
        'header': 'header',
        'id': 'id',
        'links': 'links',
        'style_class': 'styleClass',
        'weight': 'weight'
    }

    def __init__(self, groups=None, header=None, id=None, links=None, style_class=None, weight=None):  # noqa: E501
        """LinkGroup - a model defined in Swagger"""  # noqa: E501
        self._groups = None
        self._header = None
        self._id = None
        self._links = None
        self._style_class = None
        self._weight = None
        self.discriminator = None
        if groups is not None:
            self.groups = groups
        if header is not None:
            self.header = header
        if id is not None:
            self.id = id
        if links is not None:
            self.links = links
        if style_class is not None:
            self.style_class = style_class
        if weight is not None:
            self.weight = weight

    @property
    def groups(self):
        """Gets the groups of this LinkGroup.  # noqa: E501


        :return: The groups of this LinkGroup.  # noqa: E501
        :rtype: list[LinkGroup]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this LinkGroup.


        :param groups: The groups of this LinkGroup.  # noqa: E501
        :type: list[LinkGroup]
        """

        self._groups = groups

    @property
    def header(self):
        """Gets the header of this LinkGroup.  # noqa: E501


        :return: The header of this LinkGroup.  # noqa: E501
        :rtype: SimpleLink
        """
        return self._header

    @header.setter
    def header(self, header):
        """Sets the header of this LinkGroup.


        :param header: The header of this LinkGroup.  # noqa: E501
        :type: SimpleLink
        """

        self._header = header

    @property
    def id(self):
        """Gets the id of this LinkGroup.  # noqa: E501


        :return: The id of this LinkGroup.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LinkGroup.


        :param id: The id of this LinkGroup.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def links(self):
        """Gets the links of this LinkGroup.  # noqa: E501


        :return: The links of this LinkGroup.  # noqa: E501
        :rtype: list[SimpleLink]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this LinkGroup.


        :param links: The links of this LinkGroup.  # noqa: E501
        :type: list[SimpleLink]
        """

        self._links = links

    @property
    def style_class(self):
        """Gets the style_class of this LinkGroup.  # noqa: E501


        :return: The style_class of this LinkGroup.  # noqa: E501
        :rtype: str
        """
        return self._style_class

    @style_class.setter
    def style_class(self, style_class):
        """Sets the style_class of this LinkGroup.


        :param style_class: The style_class of this LinkGroup.  # noqa: E501
        :type: str
        """

        self._style_class = style_class

    @property
    def weight(self):
        """Gets the weight of this LinkGroup.  # noqa: E501


        :return: The weight of this LinkGroup.  # noqa: E501
        :rtype: int
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this LinkGroup.


        :param weight: The weight of this LinkGroup.  # noqa: E501
        :type: int
        """

        self._weight = weight

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LinkGroup, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LinkGroup):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
