# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OrderOfCustomFieldOptions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'after': 'str',
        'custom_field_option_ids': 'list[str]',
        'position': 'str'
    }

    attribute_map = {
        'after': 'after',
        'custom_field_option_ids': 'customFieldOptionIds',
        'position': 'position'
    }

    def __init__(self, after=None, custom_field_option_ids=None, position=None):  # noqa: E501
        """OrderOfCustomFieldOptions - a model defined in Swagger"""  # noqa: E501
        self._after = None
        self._custom_field_option_ids = None
        self._position = None
        self.discriminator = None
        if after is not None:
            self.after = after
        self.custom_field_option_ids = custom_field_option_ids
        if position is not None:
            self.position = position

    @property
    def after(self):
        """Gets the after of this OrderOfCustomFieldOptions.  # noqa: E501

        The ID of the custom field option or cascading option to place the moved options after. Required if `position` isn't provided.  # noqa: E501

        :return: The after of this OrderOfCustomFieldOptions.  # noqa: E501
        :rtype: str
        """
        return self._after

    @after.setter
    def after(self, after):
        """Sets the after of this OrderOfCustomFieldOptions.

        The ID of the custom field option or cascading option to place the moved options after. Required if `position` isn't provided.  # noqa: E501

        :param after: The after of this OrderOfCustomFieldOptions.  # noqa: E501
        :type: str
        """

        self._after = after

    @property
    def custom_field_option_ids(self):
        """Gets the custom_field_option_ids of this OrderOfCustomFieldOptions.  # noqa: E501

        A list of IDs of custom field options to move. The order of the custom field option IDs in the list is the order they are given after the move. The list must contain custom field options or cascading options, but not both.  # noqa: E501

        :return: The custom_field_option_ids of this OrderOfCustomFieldOptions.  # noqa: E501
        :rtype: list[str]
        """
        return self._custom_field_option_ids

    @custom_field_option_ids.setter
    def custom_field_option_ids(self, custom_field_option_ids):
        """Sets the custom_field_option_ids of this OrderOfCustomFieldOptions.

        A list of IDs of custom field options to move. The order of the custom field option IDs in the list is the order they are given after the move. The list must contain custom field options or cascading options, but not both.  # noqa: E501

        :param custom_field_option_ids: The custom_field_option_ids of this OrderOfCustomFieldOptions.  # noqa: E501
        :type: list[str]
        """
        if custom_field_option_ids is None:
            raise ValueError("Invalid value for `custom_field_option_ids`, must not be `None`")  # noqa: E501

        self._custom_field_option_ids = custom_field_option_ids

    @property
    def position(self):
        """Gets the position of this OrderOfCustomFieldOptions.  # noqa: E501

        The position the custom field options should be moved to. Required if `after` isn't provided.  # noqa: E501

        :return: The position of this OrderOfCustomFieldOptions.  # noqa: E501
        :rtype: str
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this OrderOfCustomFieldOptions.

        The position the custom field options should be moved to. Required if `after` isn't provided.  # noqa: E501

        :param position: The position of this OrderOfCustomFieldOptions.  # noqa: E501
        :type: str
        """
        allowed_values = ["First", "Last"]  # noqa: E501
        if position not in allowed_values:
            raise ValueError(
                "Invalid value for `position` ({0}), must be one of {1}"  # noqa: E501
                .format(position, allowed_values)
            )

        self._position = position

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrderOfCustomFieldOptions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrderOfCustomFieldOptions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
