# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProjectRoleActorsUpdateBean(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'categorised_actors': 'dict(str, list[str])',
        'id': 'int'
    }

    attribute_map = {
        'categorised_actors': 'categorisedActors',
        'id': 'id'
    }

    def __init__(self, categorised_actors=None, id=None):  # noqa: E501
        """ProjectRoleActorsUpdateBean - a model defined in Swagger"""  # noqa: E501
        self._categorised_actors = None
        self._id = None
        self.discriminator = None
        if categorised_actors is not None:
            self.categorised_actors = categorised_actors
        if id is not None:
            self.id = id

    @property
    def categorised_actors(self):
        """Gets the categorised_actors of this ProjectRoleActorsUpdateBean.  # noqa: E501

        The actors to add to the project role.  Add groups using:   *  `atlassian-group-role-actor` and a list of group names.  *  `atlassian-group-role-actor-id` and a list of group IDs.  As a group's name can change, use of `atlassian-group-role-actor-id` is recommended. For example, `\"atlassian-group-role-actor-id\":[\"eef79f81-0b89-4fca-a736-4be531a10869\",\"77f6ab39-e755-4570-a6ae-2d7a8df0bcb8\"]`.  Add users using `atlassian-user-role-actor` and a list of account IDs. For example, `\"atlassian-user-role-actor\":[\"12345678-9abc-def1-2345-6789abcdef12\", \"abcdef12-3456-789a-bcde-f123456789ab\"]`.  # noqa: E501

        :return: The categorised_actors of this ProjectRoleActorsUpdateBean.  # noqa: E501
        :rtype: dict(str, list[str])
        """
        return self._categorised_actors

    @categorised_actors.setter
    def categorised_actors(self, categorised_actors):
        """Sets the categorised_actors of this ProjectRoleActorsUpdateBean.

        The actors to add to the project role.  Add groups using:   *  `atlassian-group-role-actor` and a list of group names.  *  `atlassian-group-role-actor-id` and a list of group IDs.  As a group's name can change, use of `atlassian-group-role-actor-id` is recommended. For example, `\"atlassian-group-role-actor-id\":[\"eef79f81-0b89-4fca-a736-4be531a10869\",\"77f6ab39-e755-4570-a6ae-2d7a8df0bcb8\"]`.  Add users using `atlassian-user-role-actor` and a list of account IDs. For example, `\"atlassian-user-role-actor\":[\"12345678-9abc-def1-2345-6789abcdef12\", \"abcdef12-3456-789a-bcde-f123456789ab\"]`.  # noqa: E501

        :param categorised_actors: The categorised_actors of this ProjectRoleActorsUpdateBean.  # noqa: E501
        :type: dict(str, list[str])
        """

        self._categorised_actors = categorised_actors

    @property
    def id(self):
        """Gets the id of this ProjectRoleActorsUpdateBean.  # noqa: E501

        The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs.  # noqa: E501

        :return: The id of this ProjectRoleActorsUpdateBean.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProjectRoleActorsUpdateBean.

        The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs.  # noqa: E501

        :param id: The id of this ProjectRoleActorsUpdateBean.  # noqa: E501
        :type: int
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProjectRoleActorsUpdateBean, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProjectRoleActorsUpdateBean):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
