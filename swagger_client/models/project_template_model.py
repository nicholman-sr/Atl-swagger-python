# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProjectTemplateModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'archetype': 'ProjectArchetype',
        'default_board_view': 'str',
        'description': 'str',
        'live_template_project_id_reference': 'int',
        'name': 'str',
        'project_template_key': 'ProjectTemplateKey',
        'snapshot_template': 'dict(str, object)',
        'template_generation_options': 'CustomTemplateOptions',
        'type': 'str'
    }

    attribute_map = {
        'archetype': 'archetype',
        'default_board_view': 'defaultBoardView',
        'description': 'description',
        'live_template_project_id_reference': 'liveTemplateProjectIdReference',
        'name': 'name',
        'project_template_key': 'projectTemplateKey',
        'snapshot_template': 'snapshotTemplate',
        'template_generation_options': 'templateGenerationOptions',
        'type': 'type'
    }

    def __init__(self, archetype=None, default_board_view=None, description=None, live_template_project_id_reference=None, name=None, project_template_key=None, snapshot_template=None, template_generation_options=None, type=None):  # noqa: E501
        """ProjectTemplateModel - a model defined in Swagger"""  # noqa: E501
        self._archetype = None
        self._default_board_view = None
        self._description = None
        self._live_template_project_id_reference = None
        self._name = None
        self._project_template_key = None
        self._snapshot_template = None
        self._template_generation_options = None
        self._type = None
        self.discriminator = None
        if archetype is not None:
            self.archetype = archetype
        if default_board_view is not None:
            self.default_board_view = default_board_view
        if description is not None:
            self.description = description
        if live_template_project_id_reference is not None:
            self.live_template_project_id_reference = live_template_project_id_reference
        if name is not None:
            self.name = name
        if project_template_key is not None:
            self.project_template_key = project_template_key
        if snapshot_template is not None:
            self.snapshot_template = snapshot_template
        if template_generation_options is not None:
            self.template_generation_options = template_generation_options
        if type is not None:
            self.type = type

    @property
    def archetype(self):
        """Gets the archetype of this ProjectTemplateModel.  # noqa: E501


        :return: The archetype of this ProjectTemplateModel.  # noqa: E501
        :rtype: ProjectArchetype
        """
        return self._archetype

    @archetype.setter
    def archetype(self, archetype):
        """Sets the archetype of this ProjectTemplateModel.


        :param archetype: The archetype of this ProjectTemplateModel.  # noqa: E501
        :type: ProjectArchetype
        """

        self._archetype = archetype

    @property
    def default_board_view(self):
        """Gets the default_board_view of this ProjectTemplateModel.  # noqa: E501


        :return: The default_board_view of this ProjectTemplateModel.  # noqa: E501
        :rtype: str
        """
        return self._default_board_view

    @default_board_view.setter
    def default_board_view(self, default_board_view):
        """Sets the default_board_view of this ProjectTemplateModel.


        :param default_board_view: The default_board_view of this ProjectTemplateModel.  # noqa: E501
        :type: str
        """

        self._default_board_view = default_board_view

    @property
    def description(self):
        """Gets the description of this ProjectTemplateModel.  # noqa: E501


        :return: The description of this ProjectTemplateModel.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ProjectTemplateModel.


        :param description: The description of this ProjectTemplateModel.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def live_template_project_id_reference(self):
        """Gets the live_template_project_id_reference of this ProjectTemplateModel.  # noqa: E501


        :return: The live_template_project_id_reference of this ProjectTemplateModel.  # noqa: E501
        :rtype: int
        """
        return self._live_template_project_id_reference

    @live_template_project_id_reference.setter
    def live_template_project_id_reference(self, live_template_project_id_reference):
        """Sets the live_template_project_id_reference of this ProjectTemplateModel.


        :param live_template_project_id_reference: The live_template_project_id_reference of this ProjectTemplateModel.  # noqa: E501
        :type: int
        """

        self._live_template_project_id_reference = live_template_project_id_reference

    @property
    def name(self):
        """Gets the name of this ProjectTemplateModel.  # noqa: E501


        :return: The name of this ProjectTemplateModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProjectTemplateModel.


        :param name: The name of this ProjectTemplateModel.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def project_template_key(self):
        """Gets the project_template_key of this ProjectTemplateModel.  # noqa: E501


        :return: The project_template_key of this ProjectTemplateModel.  # noqa: E501
        :rtype: ProjectTemplateKey
        """
        return self._project_template_key

    @project_template_key.setter
    def project_template_key(self, project_template_key):
        """Sets the project_template_key of this ProjectTemplateModel.


        :param project_template_key: The project_template_key of this ProjectTemplateModel.  # noqa: E501
        :type: ProjectTemplateKey
        """

        self._project_template_key = project_template_key

    @property
    def snapshot_template(self):
        """Gets the snapshot_template of this ProjectTemplateModel.  # noqa: E501


        :return: The snapshot_template of this ProjectTemplateModel.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._snapshot_template

    @snapshot_template.setter
    def snapshot_template(self, snapshot_template):
        """Sets the snapshot_template of this ProjectTemplateModel.


        :param snapshot_template: The snapshot_template of this ProjectTemplateModel.  # noqa: E501
        :type: dict(str, object)
        """

        self._snapshot_template = snapshot_template

    @property
    def template_generation_options(self):
        """Gets the template_generation_options of this ProjectTemplateModel.  # noqa: E501


        :return: The template_generation_options of this ProjectTemplateModel.  # noqa: E501
        :rtype: CustomTemplateOptions
        """
        return self._template_generation_options

    @template_generation_options.setter
    def template_generation_options(self, template_generation_options):
        """Sets the template_generation_options of this ProjectTemplateModel.


        :param template_generation_options: The template_generation_options of this ProjectTemplateModel.  # noqa: E501
        :type: CustomTemplateOptions
        """

        self._template_generation_options = template_generation_options

    @property
    def type(self):
        """Gets the type of this ProjectTemplateModel.  # noqa: E501


        :return: The type of this ProjectTemplateModel.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ProjectTemplateModel.


        :param type: The type of this ProjectTemplateModel.  # noqa: E501
        :type: str
        """
        allowed_values = ["LIVE", "SNAPSHOT"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProjectTemplateModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProjectTemplateModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
