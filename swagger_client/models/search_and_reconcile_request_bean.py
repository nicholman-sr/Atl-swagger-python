# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SearchAndReconcileRequestBean(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'expand': 'str',
        'fields': 'list[str]',
        'fields_by_keys': 'bool',
        'jql': 'str',
        'max_results': 'int',
        'next_page_token': 'str',
        'properties': 'list[str]',
        'reconcile_issues': 'list[int]'
    }

    attribute_map = {
        'expand': 'expand',
        'fields': 'fields',
        'fields_by_keys': 'fieldsByKeys',
        'jql': 'jql',
        'max_results': 'maxResults',
        'next_page_token': 'nextPageToken',
        'properties': 'properties',
        'reconcile_issues': 'reconcileIssues'
    }

    def __init__(self, expand=None, fields=None, fields_by_keys=None, jql=None, max_results=50, next_page_token=None, properties=None, reconcile_issues=None):  # noqa: E501
        """SearchAndReconcileRequestBean - a model defined in Swagger"""  # noqa: E501
        self._expand = None
        self._fields = None
        self._fields_by_keys = None
        self._jql = None
        self._max_results = None
        self._next_page_token = None
        self._properties = None
        self._reconcile_issues = None
        self.discriminator = None
        if expand is not None:
            self.expand = expand
        if fields is not None:
            self.fields = fields
        if fields_by_keys is not None:
            self.fields_by_keys = fields_by_keys
        if jql is not None:
            self.jql = jql
        if max_results is not None:
            self.max_results = max_results
        if next_page_token is not None:
            self.next_page_token = next_page_token
        if properties is not None:
            self.properties = properties
        if reconcile_issues is not None:
            self.reconcile_issues = reconcile_issues

    @property
    def expand(self):
        """Gets the expand of this SearchAndReconcileRequestBean.  # noqa: E501

        Use [expand](#expansion) to include additional information about issues in the response. Note that, unlike the majority of instances where `expand` is specified, `expand` is defined as a comma-delimited string of values. The expand options are:   *  `renderedFields` Returns field values rendered in HTML format.  *  `names` Returns the display name of each field.  *  `schema` Returns the schema describing a field type.  *  `transitions` Returns all possible transitions for the issue.  *  `operations` Returns all possible operations for the issue.  *  `editmeta` Returns information about how each field can be edited.  *  `changelog` Returns a list of recent updates to an issue, sorted by date, starting from the most recent.  *  `versionedRepresentations` Instead of `fields`, returns `versionedRepresentations` a JSON array containing each version of a field's value, with the highest numbered item representing the most recent version.  Examples: `\"names,changelog\"` Returns the display name of each field as well as a list of recent updates to an issue.  # noqa: E501

        :return: The expand of this SearchAndReconcileRequestBean.  # noqa: E501
        :rtype: str
        """
        return self._expand

    @expand.setter
    def expand(self, expand):
        """Sets the expand of this SearchAndReconcileRequestBean.

        Use [expand](#expansion) to include additional information about issues in the response. Note that, unlike the majority of instances where `expand` is specified, `expand` is defined as a comma-delimited string of values. The expand options are:   *  `renderedFields` Returns field values rendered in HTML format.  *  `names` Returns the display name of each field.  *  `schema` Returns the schema describing a field type.  *  `transitions` Returns all possible transitions for the issue.  *  `operations` Returns all possible operations for the issue.  *  `editmeta` Returns information about how each field can be edited.  *  `changelog` Returns a list of recent updates to an issue, sorted by date, starting from the most recent.  *  `versionedRepresentations` Instead of `fields`, returns `versionedRepresentations` a JSON array containing each version of a field's value, with the highest numbered item representing the most recent version.  Examples: `\"names,changelog\"` Returns the display name of each field as well as a list of recent updates to an issue.  # noqa: E501

        :param expand: The expand of this SearchAndReconcileRequestBean.  # noqa: E501
        :type: str
        """

        self._expand = expand

    @property
    def fields(self):
        """Gets the fields of this SearchAndReconcileRequestBean.  # noqa: E501

        A list of fields to return for each issue. Use it to retrieve a subset of fields. This parameter accepts a comma-separated list. Expand options include:   *  `*all` Returns all fields.  *  `*navigable` Returns navigable fields.  *  `id` Returns only issue IDs.  *  Any issue field, prefixed with a dash to exclude.  The default is `id`.  Examples:   *  `summary,comment` Returns the summary and comments fields only.  *  `*all,-comment` Returns all fields except comments.  Multiple `fields` parameters can be included in a request.  Note: By default, this resource returns IDs only. This differs from [GET issue](#api-rest-api-3-issue-issueIdOrKey-get) where the default is all fields.  # noqa: E501

        :return: The fields of this SearchAndReconcileRequestBean.  # noqa: E501
        :rtype: list[str]
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this SearchAndReconcileRequestBean.

        A list of fields to return for each issue. Use it to retrieve a subset of fields. This parameter accepts a comma-separated list. Expand options include:   *  `*all` Returns all fields.  *  `*navigable` Returns navigable fields.  *  `id` Returns only issue IDs.  *  Any issue field, prefixed with a dash to exclude.  The default is `id`.  Examples:   *  `summary,comment` Returns the summary and comments fields only.  *  `*all,-comment` Returns all fields except comments.  Multiple `fields` parameters can be included in a request.  Note: By default, this resource returns IDs only. This differs from [GET issue](#api-rest-api-3-issue-issueIdOrKey-get) where the default is all fields.  # noqa: E501

        :param fields: The fields of this SearchAndReconcileRequestBean.  # noqa: E501
        :type: list[str]
        """

        self._fields = fields

    @property
    def fields_by_keys(self):
        """Gets the fields_by_keys of this SearchAndReconcileRequestBean.  # noqa: E501

        Reference fields by their key (rather than ID). The default is `false`.  # noqa: E501

        :return: The fields_by_keys of this SearchAndReconcileRequestBean.  # noqa: E501
        :rtype: bool
        """
        return self._fields_by_keys

    @fields_by_keys.setter
    def fields_by_keys(self, fields_by_keys):
        """Sets the fields_by_keys of this SearchAndReconcileRequestBean.

        Reference fields by their key (rather than ID). The default is `false`.  # noqa: E501

        :param fields_by_keys: The fields_by_keys of this SearchAndReconcileRequestBean.  # noqa: E501
        :type: bool
        """

        self._fields_by_keys = fields_by_keys

    @property
    def jql(self):
        """Gets the jql of this SearchAndReconcileRequestBean.  # noqa: E501

        A [JQL](https://confluence.atlassian.com/x/egORLQ) expression. For performance reasons, this parameter requires a bounded query. A bounded query is a query with a search restriction.   *  Example of an unbounded query: `order by key desc`.  *  Example of a bounded query: `assignee = currentUser() order by key`.  Additionally, `orderBy` clause can contain a maximum of 7 fields.  # noqa: E501

        :return: The jql of this SearchAndReconcileRequestBean.  # noqa: E501
        :rtype: str
        """
        return self._jql

    @jql.setter
    def jql(self, jql):
        """Sets the jql of this SearchAndReconcileRequestBean.

        A [JQL](https://confluence.atlassian.com/x/egORLQ) expression. For performance reasons, this parameter requires a bounded query. A bounded query is a query with a search restriction.   *  Example of an unbounded query: `order by key desc`.  *  Example of a bounded query: `assignee = currentUser() order by key`.  Additionally, `orderBy` clause can contain a maximum of 7 fields.  # noqa: E501

        :param jql: The jql of this SearchAndReconcileRequestBean.  # noqa: E501
        :type: str
        """

        self._jql = jql

    @property
    def max_results(self):
        """Gets the max_results of this SearchAndReconcileRequestBean.  # noqa: E501

        The maximum number of items to return per page. To manage page size, API may return fewer items per page where a large number of fields are requested. The greatest number of items returned per page is achieved when requesting `id` or `key` only. It returns max 5000 issues.  # noqa: E501

        :return: The max_results of this SearchAndReconcileRequestBean.  # noqa: E501
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this SearchAndReconcileRequestBean.

        The maximum number of items to return per page. To manage page size, API may return fewer items per page where a large number of fields are requested. The greatest number of items returned per page is achieved when requesting `id` or `key` only. It returns max 5000 issues.  # noqa: E501

        :param max_results: The max_results of this SearchAndReconcileRequestBean.  # noqa: E501
        :type: int
        """

        self._max_results = max_results

    @property
    def next_page_token(self):
        """Gets the next_page_token of this SearchAndReconcileRequestBean.  # noqa: E501

        The token for a page to fetch that is not the first page. The first page has a `nextPageToken` of `null`. Use the `nextPageToken` to fetch the next page of issues.  # noqa: E501

        :return: The next_page_token of this SearchAndReconcileRequestBean.  # noqa: E501
        :rtype: str
        """
        return self._next_page_token

    @next_page_token.setter
    def next_page_token(self, next_page_token):
        """Sets the next_page_token of this SearchAndReconcileRequestBean.

        The token for a page to fetch that is not the first page. The first page has a `nextPageToken` of `null`. Use the `nextPageToken` to fetch the next page of issues.  # noqa: E501

        :param next_page_token: The next_page_token of this SearchAndReconcileRequestBean.  # noqa: E501
        :type: str
        """

        self._next_page_token = next_page_token

    @property
    def properties(self):
        """Gets the properties of this SearchAndReconcileRequestBean.  # noqa: E501

        A list of up to 5 issue properties to include in the results. This parameter accepts a comma-separated list.  # noqa: E501

        :return: The properties of this SearchAndReconcileRequestBean.  # noqa: E501
        :rtype: list[str]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this SearchAndReconcileRequestBean.

        A list of up to 5 issue properties to include in the results. This parameter accepts a comma-separated list.  # noqa: E501

        :param properties: The properties of this SearchAndReconcileRequestBean.  # noqa: E501
        :type: list[str]
        """

        self._properties = properties

    @property
    def reconcile_issues(self):
        """Gets the reconcile_issues of this SearchAndReconcileRequestBean.  # noqa: E501

        Strong consistency issue ids to be reconciled with search results. Accepts max 50 ids  # noqa: E501

        :return: The reconcile_issues of this SearchAndReconcileRequestBean.  # noqa: E501
        :rtype: list[int]
        """
        return self._reconcile_issues

    @reconcile_issues.setter
    def reconcile_issues(self, reconcile_issues):
        """Sets the reconcile_issues of this SearchAndReconcileRequestBean.

        Strong consistency issue ids to be reconciled with search results. Accepts max 50 ids  # noqa: E501

        :param reconcile_issues: The reconcile_issues of this SearchAndReconcileRequestBean.  # noqa: E501
        :type: list[int]
        """

        self._reconcile_issues = reconcile_issues

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SearchAndReconcileRequestBean, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SearchAndReconcileRequestBean):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
