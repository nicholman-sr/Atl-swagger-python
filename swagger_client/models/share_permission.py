# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SharePermission(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'group': 'AllOfSharePermissionGroup',
        'id': 'int',
        'project': 'AllOfSharePermissionProject',
        'role': 'AllOfSharePermissionRole',
        'type': 'str',
        'user': 'AllOfSharePermissionUser'
    }

    attribute_map = {
        'group': 'group',
        'id': 'id',
        'project': 'project',
        'role': 'role',
        'type': 'type',
        'user': 'user'
    }

    def __init__(self, group=None, id=None, project=None, role=None, type=None, user=None):  # noqa: E501
        """SharePermission - a model defined in Swagger"""  # noqa: E501
        self._group = None
        self._id = None
        self._project = None
        self._role = None
        self._type = None
        self._user = None
        self.discriminator = None
        if group is not None:
            self.group = group
        if id is not None:
            self.id = id
        if project is not None:
            self.project = project
        if role is not None:
            self.role = role
        self.type = type
        if user is not None:
            self.user = user

    @property
    def group(self):
        """Gets the group of this SharePermission.  # noqa: E501

        The group that the filter is shared with. For a request, specify the `groupId` or `name` property for the group. As a group's name can change, use of `groupId` is recommended.  # noqa: E501

        :return: The group of this SharePermission.  # noqa: E501
        :rtype: AllOfSharePermissionGroup
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this SharePermission.

        The group that the filter is shared with. For a request, specify the `groupId` or `name` property for the group. As a group's name can change, use of `groupId` is recommended.  # noqa: E501

        :param group: The group of this SharePermission.  # noqa: E501
        :type: AllOfSharePermissionGroup
        """

        self._group = group

    @property
    def id(self):
        """Gets the id of this SharePermission.  # noqa: E501

        The unique identifier of the share permission.  # noqa: E501

        :return: The id of this SharePermission.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SharePermission.

        The unique identifier of the share permission.  # noqa: E501

        :param id: The id of this SharePermission.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def project(self):
        """Gets the project of this SharePermission.  # noqa: E501

        The project that the filter is shared with. This is similar to the project object returned by [Get project](#api-rest-api-3-project-projectIdOrKey-get) but it contains a subset of the properties, which are: `self`, `id`, `key`, `assigneeType`, `name`, `roles`, `avatarUrls`, `projectType`, `simplified`.   For a request, specify the `id` for the project.  # noqa: E501

        :return: The project of this SharePermission.  # noqa: E501
        :rtype: AllOfSharePermissionProject
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this SharePermission.

        The project that the filter is shared with. This is similar to the project object returned by [Get project](#api-rest-api-3-project-projectIdOrKey-get) but it contains a subset of the properties, which are: `self`, `id`, `key`, `assigneeType`, `name`, `roles`, `avatarUrls`, `projectType`, `simplified`.   For a request, specify the `id` for the project.  # noqa: E501

        :param project: The project of this SharePermission.  # noqa: E501
        :type: AllOfSharePermissionProject
        """

        self._project = project

    @property
    def role(self):
        """Gets the role of this SharePermission.  # noqa: E501

        The project role that the filter is shared with.   For a request, specify the `id` for the role. You must also specify the `project` object and `id` for the project that the role is in.  # noqa: E501

        :return: The role of this SharePermission.  # noqa: E501
        :rtype: AllOfSharePermissionRole
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this SharePermission.

        The project role that the filter is shared with.   For a request, specify the `id` for the role. You must also specify the `project` object and `id` for the project that the role is in.  # noqa: E501

        :param role: The role of this SharePermission.  # noqa: E501
        :type: AllOfSharePermissionRole
        """

        self._role = role

    @property
    def type(self):
        """Gets the type of this SharePermission.  # noqa: E501

        The type of share permission:   *  `user` Shared with a user.  *  `group` Shared with a group. If set in a request, then specify `sharePermission.group` as well.  *  `project` Shared with a project. If set in a request, then specify `sharePermission.project` as well.  *  `projectRole` Share with a project role in a project. This value is not returned in responses. It is used in requests, where it needs to be specify with `projectId` and `projectRoleId`.  *  `global` Shared globally. If set in a request, no other `sharePermission` properties need to be specified.  *  `loggedin` Shared with all logged-in users. Note: This value is set in a request by specifying `authenticated` as the `type`.  *  `project-unknown` Shared with a project that the user does not have access to. Cannot be set in a request.  # noqa: E501

        :return: The type of this SharePermission.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SharePermission.

        The type of share permission:   *  `user` Shared with a user.  *  `group` Shared with a group. If set in a request, then specify `sharePermission.group` as well.  *  `project` Shared with a project. If set in a request, then specify `sharePermission.project` as well.  *  `projectRole` Share with a project role in a project. This value is not returned in responses. It is used in requests, where it needs to be specify with `projectId` and `projectRoleId`.  *  `global` Shared globally. If set in a request, no other `sharePermission` properties need to be specified.  *  `loggedin` Shared with all logged-in users. Note: This value is set in a request by specifying `authenticated` as the `type`.  *  `project-unknown` Shared with a project that the user does not have access to. Cannot be set in a request.  # noqa: E501

        :param type: The type of this SharePermission.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["user", "group", "project", "projectRole", "global", "loggedin", "authenticated", "project-unknown"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def user(self):
        """Gets the user of this SharePermission.  # noqa: E501

        The user account ID that the filter is shared with. For a request, specify the `accountId` property for the user.  # noqa: E501

        :return: The user of this SharePermission.  # noqa: E501
        :rtype: AllOfSharePermissionUser
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this SharePermission.

        The user account ID that the filter is shared with. For a request, specify the `accountId` property for the user.  # noqa: E501

        :param user: The user of this SharePermission.  # noqa: E501
        :type: AllOfSharePermissionUser
        """

        self._user = user

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SharePermission, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SharePermission):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
