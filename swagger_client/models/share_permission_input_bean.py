# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SharePermissionInputBean(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'str',
        'group_id': 'str',
        'groupname': 'str',
        'project_id': 'str',
        'project_role_id': 'str',
        'rights': 'int',
        'type': 'str'
    }

    attribute_map = {
        'account_id': 'accountId',
        'group_id': 'groupId',
        'groupname': 'groupname',
        'project_id': 'projectId',
        'project_role_id': 'projectRoleId',
        'rights': 'rights',
        'type': 'type'
    }

    def __init__(self, account_id=None, group_id=None, groupname=None, project_id=None, project_role_id=None, rights=None, type=None):  # noqa: E501
        """SharePermissionInputBean - a model defined in Swagger"""  # noqa: E501
        self._account_id = None
        self._group_id = None
        self._groupname = None
        self._project_id = None
        self._project_role_id = None
        self._rights = None
        self._type = None
        self.discriminator = None
        if account_id is not None:
            self.account_id = account_id
        if group_id is not None:
            self.group_id = group_id
        if groupname is not None:
            self.groupname = groupname
        if project_id is not None:
            self.project_id = project_id
        if project_role_id is not None:
            self.project_role_id = project_role_id
        if rights is not None:
            self.rights = rights
        self.type = type

    @property
    def account_id(self):
        """Gets the account_id of this SharePermissionInputBean.  # noqa: E501

        The user account ID that the filter is shared with. For a request, specify the `accountId` property for the user.  # noqa: E501

        :return: The account_id of this SharePermissionInputBean.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this SharePermissionInputBean.

        The user account ID that the filter is shared with. For a request, specify the `accountId` property for the user.  # noqa: E501

        :param account_id: The account_id of this SharePermissionInputBean.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def group_id(self):
        """Gets the group_id of this SharePermissionInputBean.  # noqa: E501

        The ID of the group, which uniquely identifies the group across all Atlassian products.For example, *952d12c3-5b5b-4d04-bb32-44d383afc4b2*. Cannot be provided with `groupname`.  # noqa: E501

        :return: The group_id of this SharePermissionInputBean.  # noqa: E501
        :rtype: str
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this SharePermissionInputBean.

        The ID of the group, which uniquely identifies the group across all Atlassian products.For example, *952d12c3-5b5b-4d04-bb32-44d383afc4b2*. Cannot be provided with `groupname`.  # noqa: E501

        :param group_id: The group_id of this SharePermissionInputBean.  # noqa: E501
        :type: str
        """

        self._group_id = group_id

    @property
    def groupname(self):
        """Gets the groupname of this SharePermissionInputBean.  # noqa: E501

        The name of the group to share the filter with. Set `type` to `group`. Please note that the name of a group is mutable, to reliably identify a group use `groupId`.  # noqa: E501

        :return: The groupname of this SharePermissionInputBean.  # noqa: E501
        :rtype: str
        """
        return self._groupname

    @groupname.setter
    def groupname(self, groupname):
        """Sets the groupname of this SharePermissionInputBean.

        The name of the group to share the filter with. Set `type` to `group`. Please note that the name of a group is mutable, to reliably identify a group use `groupId`.  # noqa: E501

        :param groupname: The groupname of this SharePermissionInputBean.  # noqa: E501
        :type: str
        """

        self._groupname = groupname

    @property
    def project_id(self):
        """Gets the project_id of this SharePermissionInputBean.  # noqa: E501

        The ID of the project to share the filter with. Set `type` to `project`.  # noqa: E501

        :return: The project_id of this SharePermissionInputBean.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this SharePermissionInputBean.

        The ID of the project to share the filter with. Set `type` to `project`.  # noqa: E501

        :param project_id: The project_id of this SharePermissionInputBean.  # noqa: E501
        :type: str
        """

        self._project_id = project_id

    @property
    def project_role_id(self):
        """Gets the project_role_id of this SharePermissionInputBean.  # noqa: E501

        The ID of the project role to share the filter with. Set `type` to `projectRole` and the `projectId` for the project that the role is in.  # noqa: E501

        :return: The project_role_id of this SharePermissionInputBean.  # noqa: E501
        :rtype: str
        """
        return self._project_role_id

    @project_role_id.setter
    def project_role_id(self, project_role_id):
        """Sets the project_role_id of this SharePermissionInputBean.

        The ID of the project role to share the filter with. Set `type` to `projectRole` and the `projectId` for the project that the role is in.  # noqa: E501

        :param project_role_id: The project_role_id of this SharePermissionInputBean.  # noqa: E501
        :type: str
        """

        self._project_role_id = project_role_id

    @property
    def rights(self):
        """Gets the rights of this SharePermissionInputBean.  # noqa: E501

        The rights for the share permission.  # noqa: E501

        :return: The rights of this SharePermissionInputBean.  # noqa: E501
        :rtype: int
        """
        return self._rights

    @rights.setter
    def rights(self, rights):
        """Sets the rights of this SharePermissionInputBean.

        The rights for the share permission.  # noqa: E501

        :param rights: The rights of this SharePermissionInputBean.  # noqa: E501
        :type: int
        """

        self._rights = rights

    @property
    def type(self):
        """Gets the type of this SharePermissionInputBean.  # noqa: E501

        The type of the share permission.Specify the type as follows:   *  `user` Share with a user.  *  `group` Share with a group. Specify `groupname` as well.  *  `project` Share with a project. Specify `projectId` as well.  *  `projectRole` Share with a project role in a project. Specify `projectId` and `projectRoleId` as well.  *  `global` Share globally, including anonymous users. If set, this type overrides all existing share permissions and must be deleted before any non-global share permissions is set.  *  `authenticated` Share with all logged-in users. This shows as `loggedin` in the response. If set, this type overrides all existing share permissions and must be deleted before any non-global share permissions is set.  # noqa: E501

        :return: The type of this SharePermissionInputBean.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SharePermissionInputBean.

        The type of the share permission.Specify the type as follows:   *  `user` Share with a user.  *  `group` Share with a group. Specify `groupname` as well.  *  `project` Share with a project. Specify `projectId` as well.  *  `projectRole` Share with a project role in a project. Specify `projectId` and `projectRoleId` as well.  *  `global` Share globally, including anonymous users. If set, this type overrides all existing share permissions and must be deleted before any non-global share permissions is set.  *  `authenticated` Share with all logged-in users. This shows as `loggedin` in the response. If set, this type overrides all existing share permissions and must be deleted before any non-global share permissions is set.  # noqa: E501

        :param type: The type of this SharePermissionInputBean.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["user", "project", "group", "projectRole", "global", "authenticated"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SharePermissionInputBean, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SharePermissionInputBean):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
