# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SimpleListWrapperGroupName(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'callback': 'ListWrapperCallbackGroupName',
        'items': 'list[GroupName]',
        'max_results': 'int',
        'paging_callback': 'ListWrapperCallbackGroupName',
        'size': 'int'
    }

    attribute_map = {
        'callback': 'callback',
        'items': 'items',
        'max_results': 'max-results',
        'paging_callback': 'pagingCallback',
        'size': 'size'
    }

    def __init__(self, callback=None, items=None, max_results=None, paging_callback=None, size=None):  # noqa: E501
        """SimpleListWrapperGroupName - a model defined in Swagger"""  # noqa: E501
        self._callback = None
        self._items = None
        self._max_results = None
        self._paging_callback = None
        self._size = None
        self.discriminator = None
        if callback is not None:
            self.callback = callback
        if items is not None:
            self.items = items
        if max_results is not None:
            self.max_results = max_results
        if paging_callback is not None:
            self.paging_callback = paging_callback
        if size is not None:
            self.size = size

    @property
    def callback(self):
        """Gets the callback of this SimpleListWrapperGroupName.  # noqa: E501


        :return: The callback of this SimpleListWrapperGroupName.  # noqa: E501
        :rtype: ListWrapperCallbackGroupName
        """
        return self._callback

    @callback.setter
    def callback(self, callback):
        """Sets the callback of this SimpleListWrapperGroupName.


        :param callback: The callback of this SimpleListWrapperGroupName.  # noqa: E501
        :type: ListWrapperCallbackGroupName
        """

        self._callback = callback

    @property
    def items(self):
        """Gets the items of this SimpleListWrapperGroupName.  # noqa: E501


        :return: The items of this SimpleListWrapperGroupName.  # noqa: E501
        :rtype: list[GroupName]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this SimpleListWrapperGroupName.


        :param items: The items of this SimpleListWrapperGroupName.  # noqa: E501
        :type: list[GroupName]
        """

        self._items = items

    @property
    def max_results(self):
        """Gets the max_results of this SimpleListWrapperGroupName.  # noqa: E501


        :return: The max_results of this SimpleListWrapperGroupName.  # noqa: E501
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this SimpleListWrapperGroupName.


        :param max_results: The max_results of this SimpleListWrapperGroupName.  # noqa: E501
        :type: int
        """

        self._max_results = max_results

    @property
    def paging_callback(self):
        """Gets the paging_callback of this SimpleListWrapperGroupName.  # noqa: E501


        :return: The paging_callback of this SimpleListWrapperGroupName.  # noqa: E501
        :rtype: ListWrapperCallbackGroupName
        """
        return self._paging_callback

    @paging_callback.setter
    def paging_callback(self, paging_callback):
        """Sets the paging_callback of this SimpleListWrapperGroupName.


        :param paging_callback: The paging_callback of this SimpleListWrapperGroupName.  # noqa: E501
        :type: ListWrapperCallbackGroupName
        """

        self._paging_callback = paging_callback

    @property
    def size(self):
        """Gets the size of this SimpleListWrapperGroupName.  # noqa: E501


        :return: The size of this SimpleListWrapperGroupName.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this SimpleListWrapperGroupName.


        :param size: The size of this SimpleListWrapperGroupName.  # noqa: E501
        :type: int
        """

        self._size = size

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SimpleListWrapperGroupName, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SimpleListWrapperGroupName):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
