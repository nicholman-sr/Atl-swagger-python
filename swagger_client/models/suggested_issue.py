# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SuggestedIssue(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'img': 'str',
        'key': 'str',
        'key_html': 'str',
        'summary': 'str',
        'summary_text': 'str'
    }

    attribute_map = {
        'id': 'id',
        'img': 'img',
        'key': 'key',
        'key_html': 'keyHtml',
        'summary': 'summary',
        'summary_text': 'summaryText'
    }

    def __init__(self, id=None, img=None, key=None, key_html=None, summary=None, summary_text=None):  # noqa: E501
        """SuggestedIssue - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._img = None
        self._key = None
        self._key_html = None
        self._summary = None
        self._summary_text = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if img is not None:
            self.img = img
        if key is not None:
            self.key = key
        if key_html is not None:
            self.key_html = key_html
        if summary is not None:
            self.summary = summary
        if summary_text is not None:
            self.summary_text = summary_text

    @property
    def id(self):
        """Gets the id of this SuggestedIssue.  # noqa: E501

        The ID of the issue.  # noqa: E501

        :return: The id of this SuggestedIssue.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SuggestedIssue.

        The ID of the issue.  # noqa: E501

        :param id: The id of this SuggestedIssue.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def img(self):
        """Gets the img of this SuggestedIssue.  # noqa: E501

        The URL of the issue type's avatar.  # noqa: E501

        :return: The img of this SuggestedIssue.  # noqa: E501
        :rtype: str
        """
        return self._img

    @img.setter
    def img(self, img):
        """Sets the img of this SuggestedIssue.

        The URL of the issue type's avatar.  # noqa: E501

        :param img: The img of this SuggestedIssue.  # noqa: E501
        :type: str
        """

        self._img = img

    @property
    def key(self):
        """Gets the key of this SuggestedIssue.  # noqa: E501

        The key of the issue.  # noqa: E501

        :return: The key of this SuggestedIssue.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this SuggestedIssue.

        The key of the issue.  # noqa: E501

        :param key: The key of this SuggestedIssue.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def key_html(self):
        """Gets the key_html of this SuggestedIssue.  # noqa: E501

        The key of the issue in HTML format.  # noqa: E501

        :return: The key_html of this SuggestedIssue.  # noqa: E501
        :rtype: str
        """
        return self._key_html

    @key_html.setter
    def key_html(self, key_html):
        """Sets the key_html of this SuggestedIssue.

        The key of the issue in HTML format.  # noqa: E501

        :param key_html: The key_html of this SuggestedIssue.  # noqa: E501
        :type: str
        """

        self._key_html = key_html

    @property
    def summary(self):
        """Gets the summary of this SuggestedIssue.  # noqa: E501

        The phrase containing the query string in HTML format, with the string highlighted with HTML bold tags.  # noqa: E501

        :return: The summary of this SuggestedIssue.  # noqa: E501
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this SuggestedIssue.

        The phrase containing the query string in HTML format, with the string highlighted with HTML bold tags.  # noqa: E501

        :param summary: The summary of this SuggestedIssue.  # noqa: E501
        :type: str
        """

        self._summary = summary

    @property
    def summary_text(self):
        """Gets the summary_text of this SuggestedIssue.  # noqa: E501

        The phrase containing the query string, as plain text.  # noqa: E501

        :return: The summary_text of this SuggestedIssue.  # noqa: E501
        :rtype: str
        """
        return self._summary_text

    @summary_text.setter
    def summary_text(self, summary_text):
        """Sets the summary_text of this SuggestedIssue.

        The phrase containing the query string, as plain text.  # noqa: E501

        :param summary_text: The summary_text of this SuggestedIssue.  # noqa: E501
        :type: str
        """

        self._summary_text = summary_text

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SuggestedIssue, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SuggestedIssue):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
