# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TargetClassification(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'classifications': 'dict(str, list[str])',
        'issue_type': 'str',
        'project_key_or_id': 'str'
    }

    attribute_map = {
        'classifications': 'classifications',
        'issue_type': 'issueType',
        'project_key_or_id': 'projectKeyOrId'
    }

    def __init__(self, classifications=None, issue_type=None, project_key_or_id=None):  # noqa: E501
        """TargetClassification - a model defined in Swagger"""  # noqa: E501
        self._classifications = None
        self._issue_type = None
        self._project_key_or_id = None
        self.discriminator = None
        self.classifications = classifications
        if issue_type is not None:
            self.issue_type = issue_type
        if project_key_or_id is not None:
            self.project_key_or_id = project_key_or_id

    @property
    def classifications(self):
        """Gets the classifications of this TargetClassification.  # noqa: E501

        An object with the key as the ID of the target classification and value with the list of the IDs of the current source classifications.  # noqa: E501

        :return: The classifications of this TargetClassification.  # noqa: E501
        :rtype: dict(str, list[str])
        """
        return self._classifications

    @classifications.setter
    def classifications(self, classifications):
        """Sets the classifications of this TargetClassification.

        An object with the key as the ID of the target classification and value with the list of the IDs of the current source classifications.  # noqa: E501

        :param classifications: The classifications of this TargetClassification.  # noqa: E501
        :type: dict(str, list[str])
        """
        if classifications is None:
            raise ValueError("Invalid value for `classifications`, must not be `None`")  # noqa: E501

        self._classifications = classifications

    @property
    def issue_type(self):
        """Gets the issue_type of this TargetClassification.  # noqa: E501

        ID of the source issueType to which issues present in `issueIdOrKeys` belongs.  # noqa: E501

        :return: The issue_type of this TargetClassification.  # noqa: E501
        :rtype: str
        """
        return self._issue_type

    @issue_type.setter
    def issue_type(self, issue_type):
        """Sets the issue_type of this TargetClassification.

        ID of the source issueType to which issues present in `issueIdOrKeys` belongs.  # noqa: E501

        :param issue_type: The issue_type of this TargetClassification.  # noqa: E501
        :type: str
        """

        self._issue_type = issue_type

    @property
    def project_key_or_id(self):
        """Gets the project_key_or_id of this TargetClassification.  # noqa: E501

        ID or key of the source project to which issues present in `issueIdOrKeys` belongs.  # noqa: E501

        :return: The project_key_or_id of this TargetClassification.  # noqa: E501
        :rtype: str
        """
        return self._project_key_or_id

    @project_key_or_id.setter
    def project_key_or_id(self, project_key_or_id):
        """Sets the project_key_or_id of this TargetClassification.

        ID or key of the source project to which issues present in `issueIdOrKeys` belongs.  # noqa: E501

        :param project_key_or_id: The project_key_or_id of this TargetClassification.  # noqa: E501
        :type: str
        """

        self._project_key_or_id = project_key_or_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TargetClassification, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TargetClassification):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
