# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TargetToSourcesMapping(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'infer_classification_defaults': 'bool',
        'infer_field_defaults': 'bool',
        'infer_status_defaults': 'bool',
        'infer_subtask_type_default': 'bool',
        'issue_ids_or_keys': 'list[str]',
        'target_classification': 'list[TargetClassification]',
        'target_mandatory_fields': 'list[TargetMandatoryFields]',
        'target_status': 'list[TargetStatus]'
    }

    attribute_map = {
        'infer_classification_defaults': 'inferClassificationDefaults',
        'infer_field_defaults': 'inferFieldDefaults',
        'infer_status_defaults': 'inferStatusDefaults',
        'infer_subtask_type_default': 'inferSubtaskTypeDefault',
        'issue_ids_or_keys': 'issueIdsOrKeys',
        'target_classification': 'targetClassification',
        'target_mandatory_fields': 'targetMandatoryFields',
        'target_status': 'targetStatus'
    }

    def __init__(self, infer_classification_defaults=None, infer_field_defaults=None, infer_status_defaults=None, infer_subtask_type_default=None, issue_ids_or_keys=None, target_classification=None, target_mandatory_fields=None, target_status=None):  # noqa: E501
        """TargetToSourcesMapping - a model defined in Swagger"""  # noqa: E501
        self._infer_classification_defaults = None
        self._infer_field_defaults = None
        self._infer_status_defaults = None
        self._infer_subtask_type_default = None
        self._issue_ids_or_keys = None
        self._target_classification = None
        self._target_mandatory_fields = None
        self._target_status = None
        self.discriminator = None
        self.infer_classification_defaults = infer_classification_defaults
        self.infer_field_defaults = infer_field_defaults
        self.infer_status_defaults = infer_status_defaults
        self.infer_subtask_type_default = infer_subtask_type_default
        if issue_ids_or_keys is not None:
            self.issue_ids_or_keys = issue_ids_or_keys
        if target_classification is not None:
            self.target_classification = target_classification
        if target_mandatory_fields is not None:
            self.target_mandatory_fields = target_mandatory_fields
        if target_status is not None:
            self.target_status = target_status

    @property
    def infer_classification_defaults(self):
        """Gets the infer_classification_defaults of this TargetToSourcesMapping.  # noqa: E501

        If `true`, when issues are moved into this target group, they will adopt the target project's default classification, if they don't have a classification already. If they do have a classification, it will be kept the same even after the move. Leave `targetClassification` empty when using this.  If `false`, you must provide a `targetClassification` mapping for each classification associated with the selected issues.  [Benefit from data classification](https://support.atlassian.com/security-and-access-policies/docs/what-is-data-classification/)  # noqa: E501

        :return: The infer_classification_defaults of this TargetToSourcesMapping.  # noqa: E501
        :rtype: bool
        """
        return self._infer_classification_defaults

    @infer_classification_defaults.setter
    def infer_classification_defaults(self, infer_classification_defaults):
        """Sets the infer_classification_defaults of this TargetToSourcesMapping.

        If `true`, when issues are moved into this target group, they will adopt the target project's default classification, if they don't have a classification already. If they do have a classification, it will be kept the same even after the move. Leave `targetClassification` empty when using this.  If `false`, you must provide a `targetClassification` mapping for each classification associated with the selected issues.  [Benefit from data classification](https://support.atlassian.com/security-and-access-policies/docs/what-is-data-classification/)  # noqa: E501

        :param infer_classification_defaults: The infer_classification_defaults of this TargetToSourcesMapping.  # noqa: E501
        :type: bool
        """
        if infer_classification_defaults is None:
            raise ValueError("Invalid value for `infer_classification_defaults`, must not be `None`")  # noqa: E501

        self._infer_classification_defaults = infer_classification_defaults

    @property
    def infer_field_defaults(self):
        """Gets the infer_field_defaults of this TargetToSourcesMapping.  # noqa: E501

        If `true`, values from the source issues will be retained for the mandatory fields in the field configuration of the destination project. The `targetMandatoryFields` property shouldn't be defined.  If `false`, the user is required to set values for mandatory fields present in the field configuration of the destination project. Provide input by defining the `targetMandatoryFields` property  # noqa: E501

        :return: The infer_field_defaults of this TargetToSourcesMapping.  # noqa: E501
        :rtype: bool
        """
        return self._infer_field_defaults

    @infer_field_defaults.setter
    def infer_field_defaults(self, infer_field_defaults):
        """Sets the infer_field_defaults of this TargetToSourcesMapping.

        If `true`, values from the source issues will be retained for the mandatory fields in the field configuration of the destination project. The `targetMandatoryFields` property shouldn't be defined.  If `false`, the user is required to set values for mandatory fields present in the field configuration of the destination project. Provide input by defining the `targetMandatoryFields` property  # noqa: E501

        :param infer_field_defaults: The infer_field_defaults of this TargetToSourcesMapping.  # noqa: E501
        :type: bool
        """
        if infer_field_defaults is None:
            raise ValueError("Invalid value for `infer_field_defaults`, must not be `None`")  # noqa: E501

        self._infer_field_defaults = infer_field_defaults

    @property
    def infer_status_defaults(self):
        """Gets the infer_status_defaults of this TargetToSourcesMapping.  # noqa: E501

        If `true`, the statuses of issues being moved in this target group that are not present in the target workflow will be changed to the default status of the target workflow (see below). Leave `targetStatus` empty when using this.  If `false`, you must provide a `targetStatus` for each status not present in the target workflow.  The default status in a workflow is referred to as the \"initial status\". Each workflow has its own unique initial status. When an issue is created, it is automatically assigned to this initial status. Read more about configuring initial statuses: [Configure the initial status | Atlassian Support.](https://support.atlassian.com/jira-cloud-administration/docs/configure-the-initial-status/)  # noqa: E501

        :return: The infer_status_defaults of this TargetToSourcesMapping.  # noqa: E501
        :rtype: bool
        """
        return self._infer_status_defaults

    @infer_status_defaults.setter
    def infer_status_defaults(self, infer_status_defaults):
        """Sets the infer_status_defaults of this TargetToSourcesMapping.

        If `true`, the statuses of issues being moved in this target group that are not present in the target workflow will be changed to the default status of the target workflow (see below). Leave `targetStatus` empty when using this.  If `false`, you must provide a `targetStatus` for each status not present in the target workflow.  The default status in a workflow is referred to as the \"initial status\". Each workflow has its own unique initial status. When an issue is created, it is automatically assigned to this initial status. Read more about configuring initial statuses: [Configure the initial status | Atlassian Support.](https://support.atlassian.com/jira-cloud-administration/docs/configure-the-initial-status/)  # noqa: E501

        :param infer_status_defaults: The infer_status_defaults of this TargetToSourcesMapping.  # noqa: E501
        :type: bool
        """
        if infer_status_defaults is None:
            raise ValueError("Invalid value for `infer_status_defaults`, must not be `None`")  # noqa: E501

        self._infer_status_defaults = infer_status_defaults

    @property
    def infer_subtask_type_default(self):
        """Gets the infer_subtask_type_default of this TargetToSourcesMapping.  # noqa: E501

        When an issue is moved, its subtasks (if there are any) need to be moved with it. `inferSubtaskTypeDefault` helps with moving the subtasks by picking a random subtask type in the target project.  If `true`, subtasks will automatically move to the same project as their parent.  When they move:   *  Their `issueType` will be set to the default for subtasks in the target project.  *  Values for mandatory fields will be retained from the source issues  *  Specifying separate mapping for implicit subtasks wonâ€™t be allowed.  If `false`, you must manually move the subtasks. They will retain the parent which they had in the current project after being moved.  # noqa: E501

        :return: The infer_subtask_type_default of this TargetToSourcesMapping.  # noqa: E501
        :rtype: bool
        """
        return self._infer_subtask_type_default

    @infer_subtask_type_default.setter
    def infer_subtask_type_default(self, infer_subtask_type_default):
        """Sets the infer_subtask_type_default of this TargetToSourcesMapping.

        When an issue is moved, its subtasks (if there are any) need to be moved with it. `inferSubtaskTypeDefault` helps with moving the subtasks by picking a random subtask type in the target project.  If `true`, subtasks will automatically move to the same project as their parent.  When they move:   *  Their `issueType` will be set to the default for subtasks in the target project.  *  Values for mandatory fields will be retained from the source issues  *  Specifying separate mapping for implicit subtasks wonâ€™t be allowed.  If `false`, you must manually move the subtasks. They will retain the parent which they had in the current project after being moved.  # noqa: E501

        :param infer_subtask_type_default: The infer_subtask_type_default of this TargetToSourcesMapping.  # noqa: E501
        :type: bool
        """
        if infer_subtask_type_default is None:
            raise ValueError("Invalid value for `infer_subtask_type_default`, must not be `None`")  # noqa: E501

        self._infer_subtask_type_default = infer_subtask_type_default

    @property
    def issue_ids_or_keys(self):
        """Gets the issue_ids_or_keys of this TargetToSourcesMapping.  # noqa: E501

        List of issue IDs or keys to be moved.  # noqa: E501

        :return: The issue_ids_or_keys of this TargetToSourcesMapping.  # noqa: E501
        :rtype: list[str]
        """
        return self._issue_ids_or_keys

    @issue_ids_or_keys.setter
    def issue_ids_or_keys(self, issue_ids_or_keys):
        """Sets the issue_ids_or_keys of this TargetToSourcesMapping.

        List of issue IDs or keys to be moved.  # noqa: E501

        :param issue_ids_or_keys: The issue_ids_or_keys of this TargetToSourcesMapping.  # noqa: E501
        :type: list[str]
        """

        self._issue_ids_or_keys = issue_ids_or_keys

    @property
    def target_classification(self):
        """Gets the target_classification of this TargetToSourcesMapping.  # noqa: E501

        List of the objects containing classifications in the source issues and their new values which need to be set during the bulk move operation.  It is mandatory to provide source classification to target classification mapping when the source classification is invalid for the target project and issue type.   *  **You should only define this property when `inferClassificationDefaults` is `false`.**  *  **In order to provide mapping for issues which don't have a classification, use `\"-1\"`.**  # noqa: E501

        :return: The target_classification of this TargetToSourcesMapping.  # noqa: E501
        :rtype: list[TargetClassification]
        """
        return self._target_classification

    @target_classification.setter
    def target_classification(self, target_classification):
        """Sets the target_classification of this TargetToSourcesMapping.

        List of the objects containing classifications in the source issues and their new values which need to be set during the bulk move operation.  It is mandatory to provide source classification to target classification mapping when the source classification is invalid for the target project and issue type.   *  **You should only define this property when `inferClassificationDefaults` is `false`.**  *  **In order to provide mapping for issues which don't have a classification, use `\"-1\"`.**  # noqa: E501

        :param target_classification: The target_classification of this TargetToSourcesMapping.  # noqa: E501
        :type: list[TargetClassification]
        """

        self._target_classification = target_classification

    @property
    def target_mandatory_fields(self):
        """Gets the target_mandatory_fields of this TargetToSourcesMapping.  # noqa: E501

        List of objects containing mandatory fields in the target field configuration and new values that need to be set during the bulk move operation.  The new values will only be applied if the field is mandatory in the target project and at least one issue from the source has that field empty, or if the field context is different in the target project (e.g. project-scoped version fields).  **You should only define this property when `inferFieldDefaults` is `false`.**  # noqa: E501

        :return: The target_mandatory_fields of this TargetToSourcesMapping.  # noqa: E501
        :rtype: list[TargetMandatoryFields]
        """
        return self._target_mandatory_fields

    @target_mandatory_fields.setter
    def target_mandatory_fields(self, target_mandatory_fields):
        """Sets the target_mandatory_fields of this TargetToSourcesMapping.

        List of objects containing mandatory fields in the target field configuration and new values that need to be set during the bulk move operation.  The new values will only be applied if the field is mandatory in the target project and at least one issue from the source has that field empty, or if the field context is different in the target project (e.g. project-scoped version fields).  **You should only define this property when `inferFieldDefaults` is `false`.**  # noqa: E501

        :param target_mandatory_fields: The target_mandatory_fields of this TargetToSourcesMapping.  # noqa: E501
        :type: list[TargetMandatoryFields]
        """

        self._target_mandatory_fields = target_mandatory_fields

    @property
    def target_status(self):
        """Gets the target_status of this TargetToSourcesMapping.  # noqa: E501

        List of the objects containing statuses in the source workflow and their new values which need to be set during the bulk move operation.  The new values will only be applied if the source status is invalid for the target project and issue type.  It is mandatory to provide source status to target status mapping when the source status is invalid for the target project and issue type.  **You should only define this property when `inferStatusDefaults` is `false`.**  # noqa: E501

        :return: The target_status of this TargetToSourcesMapping.  # noqa: E501
        :rtype: list[TargetStatus]
        """
        return self._target_status

    @target_status.setter
    def target_status(self, target_status):
        """Sets the target_status of this TargetToSourcesMapping.

        List of the objects containing statuses in the source workflow and their new values which need to be set during the bulk move operation.  The new values will only be applied if the source status is invalid for the target project and issue type.  It is mandatory to provide source status to target status mapping when the source status is invalid for the target project and issue type.  **You should only define this property when `inferStatusDefaults` is `false`.**  # noqa: E501

        :param target_status: The target_status of this TargetToSourcesMapping.  # noqa: E501
        :type: list[TargetStatus]
        """

        self._target_status = target_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TargetToSourcesMapping, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TargetToSourcesMapping):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
