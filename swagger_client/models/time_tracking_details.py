# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TimeTrackingDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'original_estimate': 'str',
        'original_estimate_seconds': 'int',
        'remaining_estimate': 'str',
        'remaining_estimate_seconds': 'int',
        'time_spent': 'str',
        'time_spent_seconds': 'int'
    }

    attribute_map = {
        'original_estimate': 'originalEstimate',
        'original_estimate_seconds': 'originalEstimateSeconds',
        'remaining_estimate': 'remainingEstimate',
        'remaining_estimate_seconds': 'remainingEstimateSeconds',
        'time_spent': 'timeSpent',
        'time_spent_seconds': 'timeSpentSeconds'
    }

    def __init__(self, original_estimate=None, original_estimate_seconds=None, remaining_estimate=None, remaining_estimate_seconds=None, time_spent=None, time_spent_seconds=None):  # noqa: E501
        """TimeTrackingDetails - a model defined in Swagger"""  # noqa: E501
        self._original_estimate = None
        self._original_estimate_seconds = None
        self._remaining_estimate = None
        self._remaining_estimate_seconds = None
        self._time_spent = None
        self._time_spent_seconds = None
        self.discriminator = None
        if original_estimate is not None:
            self.original_estimate = original_estimate
        if original_estimate_seconds is not None:
            self.original_estimate_seconds = original_estimate_seconds
        if remaining_estimate is not None:
            self.remaining_estimate = remaining_estimate
        if remaining_estimate_seconds is not None:
            self.remaining_estimate_seconds = remaining_estimate_seconds
        if time_spent is not None:
            self.time_spent = time_spent
        if time_spent_seconds is not None:
            self.time_spent_seconds = time_spent_seconds

    @property
    def original_estimate(self):
        """Gets the original_estimate of this TimeTrackingDetails.  # noqa: E501

        The original estimate of time needed for this issue in readable format.  # noqa: E501

        :return: The original_estimate of this TimeTrackingDetails.  # noqa: E501
        :rtype: str
        """
        return self._original_estimate

    @original_estimate.setter
    def original_estimate(self, original_estimate):
        """Sets the original_estimate of this TimeTrackingDetails.

        The original estimate of time needed for this issue in readable format.  # noqa: E501

        :param original_estimate: The original_estimate of this TimeTrackingDetails.  # noqa: E501
        :type: str
        """

        self._original_estimate = original_estimate

    @property
    def original_estimate_seconds(self):
        """Gets the original_estimate_seconds of this TimeTrackingDetails.  # noqa: E501

        The original estimate of time needed for this issue in seconds.  # noqa: E501

        :return: The original_estimate_seconds of this TimeTrackingDetails.  # noqa: E501
        :rtype: int
        """
        return self._original_estimate_seconds

    @original_estimate_seconds.setter
    def original_estimate_seconds(self, original_estimate_seconds):
        """Sets the original_estimate_seconds of this TimeTrackingDetails.

        The original estimate of time needed for this issue in seconds.  # noqa: E501

        :param original_estimate_seconds: The original_estimate_seconds of this TimeTrackingDetails.  # noqa: E501
        :type: int
        """

        self._original_estimate_seconds = original_estimate_seconds

    @property
    def remaining_estimate(self):
        """Gets the remaining_estimate of this TimeTrackingDetails.  # noqa: E501

        The remaining estimate of time needed for this issue in readable format.  # noqa: E501

        :return: The remaining_estimate of this TimeTrackingDetails.  # noqa: E501
        :rtype: str
        """
        return self._remaining_estimate

    @remaining_estimate.setter
    def remaining_estimate(self, remaining_estimate):
        """Sets the remaining_estimate of this TimeTrackingDetails.

        The remaining estimate of time needed for this issue in readable format.  # noqa: E501

        :param remaining_estimate: The remaining_estimate of this TimeTrackingDetails.  # noqa: E501
        :type: str
        """

        self._remaining_estimate = remaining_estimate

    @property
    def remaining_estimate_seconds(self):
        """Gets the remaining_estimate_seconds of this TimeTrackingDetails.  # noqa: E501

        The remaining estimate of time needed for this issue in seconds.  # noqa: E501

        :return: The remaining_estimate_seconds of this TimeTrackingDetails.  # noqa: E501
        :rtype: int
        """
        return self._remaining_estimate_seconds

    @remaining_estimate_seconds.setter
    def remaining_estimate_seconds(self, remaining_estimate_seconds):
        """Sets the remaining_estimate_seconds of this TimeTrackingDetails.

        The remaining estimate of time needed for this issue in seconds.  # noqa: E501

        :param remaining_estimate_seconds: The remaining_estimate_seconds of this TimeTrackingDetails.  # noqa: E501
        :type: int
        """

        self._remaining_estimate_seconds = remaining_estimate_seconds

    @property
    def time_spent(self):
        """Gets the time_spent of this TimeTrackingDetails.  # noqa: E501

        Time worked on this issue in readable format.  # noqa: E501

        :return: The time_spent of this TimeTrackingDetails.  # noqa: E501
        :rtype: str
        """
        return self._time_spent

    @time_spent.setter
    def time_spent(self, time_spent):
        """Sets the time_spent of this TimeTrackingDetails.

        Time worked on this issue in readable format.  # noqa: E501

        :param time_spent: The time_spent of this TimeTrackingDetails.  # noqa: E501
        :type: str
        """

        self._time_spent = time_spent

    @property
    def time_spent_seconds(self):
        """Gets the time_spent_seconds of this TimeTrackingDetails.  # noqa: E501

        Time worked on this issue in seconds.  # noqa: E501

        :return: The time_spent_seconds of this TimeTrackingDetails.  # noqa: E501
        :rtype: int
        """
        return self._time_spent_seconds

    @time_spent_seconds.setter
    def time_spent_seconds(self, time_spent_seconds):
        """Sets the time_spent_seconds of this TimeTrackingDetails.

        Time worked on this issue in seconds.  # noqa: E501

        :param time_spent_seconds: The time_spent_seconds of this TimeTrackingDetails.  # noqa: E501
        :type: int
        """

        self._time_spent_seconds = time_spent_seconds

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TimeTrackingDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TimeTrackingDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
