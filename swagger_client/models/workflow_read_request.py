# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WorkflowReadRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'project_and_issue_types': 'list[ProjectAndIssueTypePair]',
        'workflow_ids': 'list[str]',
        'workflow_names': 'list[str]'
    }

    attribute_map = {
        'project_and_issue_types': 'projectAndIssueTypes',
        'workflow_ids': 'workflowIds',
        'workflow_names': 'workflowNames'
    }

    def __init__(self, project_and_issue_types=None, workflow_ids=None, workflow_names=None):  # noqa: E501
        """WorkflowReadRequest - a model defined in Swagger"""  # noqa: E501
        self._project_and_issue_types = None
        self._workflow_ids = None
        self._workflow_names = None
        self.discriminator = None
        if project_and_issue_types is not None:
            self.project_and_issue_types = project_and_issue_types
        if workflow_ids is not None:
            self.workflow_ids = workflow_ids
        if workflow_names is not None:
            self.workflow_names = workflow_names

    @property
    def project_and_issue_types(self):
        """Gets the project_and_issue_types of this WorkflowReadRequest.  # noqa: E501

        The list of projects and issue types to query.  # noqa: E501

        :return: The project_and_issue_types of this WorkflowReadRequest.  # noqa: E501
        :rtype: list[ProjectAndIssueTypePair]
        """
        return self._project_and_issue_types

    @project_and_issue_types.setter
    def project_and_issue_types(self, project_and_issue_types):
        """Sets the project_and_issue_types of this WorkflowReadRequest.

        The list of projects and issue types to query.  # noqa: E501

        :param project_and_issue_types: The project_and_issue_types of this WorkflowReadRequest.  # noqa: E501
        :type: list[ProjectAndIssueTypePair]
        """

        self._project_and_issue_types = project_and_issue_types

    @property
    def workflow_ids(self):
        """Gets the workflow_ids of this WorkflowReadRequest.  # noqa: E501

        The list of workflow IDs to query.  # noqa: E501

        :return: The workflow_ids of this WorkflowReadRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._workflow_ids

    @workflow_ids.setter
    def workflow_ids(self, workflow_ids):
        """Sets the workflow_ids of this WorkflowReadRequest.

        The list of workflow IDs to query.  # noqa: E501

        :param workflow_ids: The workflow_ids of this WorkflowReadRequest.  # noqa: E501
        :type: list[str]
        """

        self._workflow_ids = workflow_ids

    @property
    def workflow_names(self):
        """Gets the workflow_names of this WorkflowReadRequest.  # noqa: E501

        The list of workflow names to query.  # noqa: E501

        :return: The workflow_names of this WorkflowReadRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._workflow_names

    @workflow_names.setter
    def workflow_names(self, workflow_names):
        """Sets the workflow_names of this WorkflowReadRequest.

        The list of workflow names to query.  # noqa: E501

        :param workflow_names: The workflow_names of this WorkflowReadRequest.  # noqa: E501
        :type: list[str]
        """

        self._workflow_names = workflow_names

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WorkflowReadRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorkflowReadRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
