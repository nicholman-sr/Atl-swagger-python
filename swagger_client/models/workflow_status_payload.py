# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WorkflowStatusPayload(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'layout': 'WorkflowStatusLayoutPayload',
        'pcri': 'ProjectCreateResourceIdentifier',
        'properties': 'dict(str, str)'
    }

    attribute_map = {
        'layout': 'layout',
        'pcri': 'pcri',
        'properties': 'properties'
    }

    def __init__(self, layout=None, pcri=None, properties=None):  # noqa: E501
        """WorkflowStatusPayload - a model defined in Swagger"""  # noqa: E501
        self._layout = None
        self._pcri = None
        self._properties = None
        self.discriminator = None
        if layout is not None:
            self.layout = layout
        if pcri is not None:
            self.pcri = pcri
        if properties is not None:
            self.properties = properties

    @property
    def layout(self):
        """Gets the layout of this WorkflowStatusPayload.  # noqa: E501


        :return: The layout of this WorkflowStatusPayload.  # noqa: E501
        :rtype: WorkflowStatusLayoutPayload
        """
        return self._layout

    @layout.setter
    def layout(self, layout):
        """Sets the layout of this WorkflowStatusPayload.


        :param layout: The layout of this WorkflowStatusPayload.  # noqa: E501
        :type: WorkflowStatusLayoutPayload
        """

        self._layout = layout

    @property
    def pcri(self):
        """Gets the pcri of this WorkflowStatusPayload.  # noqa: E501


        :return: The pcri of this WorkflowStatusPayload.  # noqa: E501
        :rtype: ProjectCreateResourceIdentifier
        """
        return self._pcri

    @pcri.setter
    def pcri(self, pcri):
        """Sets the pcri of this WorkflowStatusPayload.


        :param pcri: The pcri of this WorkflowStatusPayload.  # noqa: E501
        :type: ProjectCreateResourceIdentifier
        """

        self._pcri = pcri

    @property
    def properties(self):
        """Gets the properties of this WorkflowStatusPayload.  # noqa: E501

        The properties of the workflow status.  # noqa: E501

        :return: The properties of this WorkflowStatusPayload.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this WorkflowStatusPayload.

        The properties of the workflow status.  # noqa: E501

        :param properties: The properties of this WorkflowStatusPayload.  # noqa: E501
        :type: dict(str, str)
        """

        self._properties = properties

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WorkflowStatusPayload, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorkflowStatusPayload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
