# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation  # noqa: E501

    OpenAPI spec version: 1001.0.0-SNAPSHOT-0daa9a9e2722e510da52cb72ee41a43128c97f42
    Contact: ecosystem@atlassian.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WorkflowTrigger(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'parameters': 'dict(str, str)',
        'rule_key': 'str'
    }

    attribute_map = {
        'id': 'id',
        'parameters': 'parameters',
        'rule_key': 'ruleKey'
    }

    def __init__(self, id=None, parameters=None, rule_key=None):  # noqa: E501
        """WorkflowTrigger - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._parameters = None
        self._rule_key = None
        self.discriminator = None
        if id is not None:
            self.id = id
        self.parameters = parameters
        self.rule_key = rule_key

    @property
    def id(self):
        """Gets the id of this WorkflowTrigger.  # noqa: E501

        The ID of the trigger.  # noqa: E501

        :return: The id of this WorkflowTrigger.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this WorkflowTrigger.

        The ID of the trigger.  # noqa: E501

        :param id: The id of this WorkflowTrigger.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def parameters(self):
        """Gets the parameters of this WorkflowTrigger.  # noqa: E501

        The parameters of the trigger.  # noqa: E501

        :return: The parameters of this WorkflowTrigger.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this WorkflowTrigger.

        The parameters of the trigger.  # noqa: E501

        :param parameters: The parameters of this WorkflowTrigger.  # noqa: E501
        :type: dict(str, str)
        """
        if parameters is None:
            raise ValueError("Invalid value for `parameters`, must not be `None`")  # noqa: E501

        self._parameters = parameters

    @property
    def rule_key(self):
        """Gets the rule_key of this WorkflowTrigger.  # noqa: E501

        The rule key of the trigger.  # noqa: E501

        :return: The rule_key of this WorkflowTrigger.  # noqa: E501
        :rtype: str
        """
        return self._rule_key

    @rule_key.setter
    def rule_key(self, rule_key):
        """Sets the rule_key of this WorkflowTrigger.

        The rule key of the trigger.  # noqa: E501

        :param rule_key: The rule_key of this WorkflowTrigger.  # noqa: E501
        :type: str
        """
        if rule_key is None:
            raise ValueError("Invalid value for `rule_key`, must not be `None`")  # noqa: E501

        self._rule_key = rule_key

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WorkflowTrigger, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorkflowTrigger):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
